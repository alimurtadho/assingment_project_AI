name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov coverage codecov
    
    - name: Create test database
      working-directory: ./backend
      run: |
        touch test.db
    
    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term --cov-fail-under=70
      env:
        DATABASE_URL: sqlite:///test.db
        SECRET_KEY: test-secret-key
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        REFRESH_TOKEN_EXPIRE_DAYS: 7
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  build-frontend:
    runs-on: ubuntu-latest
    needs: test-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: sqlite:///test.db
        SECRET_KEY: test-secret-key
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Health check
      run: |
        curl -f http://localhost:8000/docs || exit 1

  notify-telegram:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-frontend, integration-tests]
    if: always()
    
    steps:
    - name: Notify Telegram on Success
      if: needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.build-frontend.result == 'success' && needs.integration-tests.result == 'success'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ‚úÖ *CI/CD Pipeline SUCCESS* ‚úÖ
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          üéâ All tests passed!
          üìä Coverage reports uploaded to Codecov
          üöÄ Build completed successfully
    
    - name: Notify Telegram on Failure
      if: needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' || needs.build-frontend.result == 'failure' || needs.integration-tests.result == 'failure'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ‚ùå *CI/CD Pipeline FAILED* ‚ùå
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Failed Jobs:
          - Backend Tests: ${{ needs.test-backend.result }}
          - Frontend Tests: ${{ needs.test-frontend.result }}
          - Frontend Build: ${{ needs.build-frontend.result }}
          - Integration Tests: ${{ needs.integration-tests.result }}
          
          Please check the workflow logs for details.
