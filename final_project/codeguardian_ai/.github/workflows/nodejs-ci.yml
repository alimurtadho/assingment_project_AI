name: Node.js CI Pipeline

# Workflow ini akan dijalankan setiap kali ada push ke branch 'codeguardianAI'
on:
  push:
    branches: [ codeguardianAI ]
  pull_request:
    branches: [ codeguardianAI ]

jobs:
  # Job pertama: Lint
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint || echo "ESLint found issues, but continuing..."
        continue-on-error: true
      
      - name: Check code formatting with Prettier
        run: npx prettier --check backend/ frontend/src/ || true

  # Job kedua: Test (dijalankan setelah job lint berhasil)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint  # Job test hanya akan dijalankan jika job lint berhasil
    
    # Setup database service untuk testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: codeguardian_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install backend dependencies
        run: npm ci
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Setup database schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codeguardian_test
        run: |
          npx prisma migrate deploy || echo "No migrations to deploy"
          npx prisma generate
      
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codeguardian_test
          NODE_ENV: test
          JWT_SECRET: test_secret_key_for_ci
          OPENAI_API_KEY: test_key
        run: npm run test:backend
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --coverage --watchAll=false --passWithNoTests
      
      - name: Build application
        run: |
          cd frontend
          npm run build
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            frontend/coverage/
