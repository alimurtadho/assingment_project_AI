8edc3c134cebff43da79f9338caa371f
/* istanbul ignore next */
function cov_2padtkys6j() {
  var path = "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/test-gen.js";
  var hash = "31488ceb5c647bdc5f6e5d21930dec981703b2fd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/test-gen.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 2,
          column: 32
        }
      },
      "2": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 3,
          column: 66
        }
      },
      "3": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 58
        }
      },
      "4": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "7": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "8": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 72,
          column: 3
        }
      },
      "9": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 71,
          column: 3
        }
      },
      "10": {
        start: {
          line: 21,
          column: 37
        },
        end: {
          line: 21,
          column: 45
        }
      },
      "11": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 48
        }
      },
      "12": {
        start: {
          line: 23,
          column: 58
        },
        end: {
          line: 23,
          column: 66
        }
      },
      "13": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 90
        }
      },
      "14": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "15": {
        start: {
          line: 34,
          column: 19
        },
        end: {
          line: 42,
          column: 6
        }
      },
      "16": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 56,
          column: 7
        }
      },
      "17": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "18": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 51
        }
      },
      "19": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 70,
          column: 7
        }
      },
      "20": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 100,
          column: 3
        }
      },
      "21": {
        start: {
          line: 76,
          column: 2
        },
        end: {
          line: 99,
          column: 3
        }
      },
      "22": {
        start: {
          line: 77,
          column: 19
        },
        end: {
          line: 77,
          column: 29
        }
      },
      "23": {
        start: {
          line: 79,
          column: 19
        },
        end: {
          line: 88,
          column: 6
        }
      },
      "24": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "25": {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 91,
          column: 70
        }
      },
      "26": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "27": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 51
        }
      },
      "28": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 51
        }
      },
      "29": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 125,
          column: 3
        }
      },
      "30": {
        start: {
          line: 104,
          column: 2
        },
        end: {
          line: 124,
          column: 3
        }
      },
      "31": {
        start: {
          line: 105,
          column: 37
        },
        end: {
          line: 105,
          column: 45
        }
      },
      "32": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 48
        }
      },
      "33": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 67
        }
      },
      "34": {
        start: {
          line: 110,
          column: 28
        },
        end: {
          line: 110,
          column: 90
        }
      },
      "35": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 116,
          column: 7
        }
      },
      "36": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 53
        }
      },
      "37": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 123,
          column: 7
        }
      },
      "38": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 152,
          column: 3
        }
      },
      "39": {
        start: {
          line: 129,
          column: 2
        },
        end: {
          line: 151,
          column: 3
        }
      },
      "40": {
        start: {
          line: 130,
          column: 18
        },
        end: {
          line: 133,
          column: 7
        }
      },
      "41": {
        start: {
          line: 130,
          column: 41
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "42": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 135,
          column: 77
        }
      },
      "43": {
        start: {
          line: 137,
          column: 29
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "44": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 143,
          column: 7
        }
      },
      "45": {
        start: {
          line: 141,
          column: 28
        },
        end: {
          line: 141,
          column: 38
        }
      },
      "46": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 63
        }
      },
      "47": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "48": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 154,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 68
          },
          end: {
            line: 19,
            column: 69
          }
        },
        loc: {
          start: {
            line: 19,
            column: 88
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 75,
            column: 25
          },
          end: {
            line: 75,
            column: 26
          }
        },
        loc: {
          start: {
            line: 75,
            column: 45
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 75
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 103,
            column: 68
          },
          end: {
            line: 103,
            column: 69
          }
        },
        loc: {
          start: {
            line: 103,
            column: 88
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 103
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 128,
            column: 54
          },
          end: {
            line: 128,
            column: 55
          }
        },
        loc: {
          start: {
            line: 128,
            column: 74
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 128
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 130,
            column: 32
          },
          end: {
            line: 130,
            column: 33
          }
        },
        loc: {
          start: {
            line: 130,
            column: 41
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 130
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 141,
            column: 23
          },
          end: {
            line: 141,
            column: 24
          }
        },
        loc: {
          start: {
            line: 141,
            column: 28
          },
          end: {
            line: 141,
            column: 38
          }
        },
        line: 141
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 23,
            column: 34
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 47
          },
          end: {
            line: 23,
            column: 53
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 21
          },
          end: {
            line: 51,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 21
          },
          end: {
            line: 51,
            column: 50
          }
        }, {
          start: {
            line: 51,
            column: 54
          },
          end: {
            line: 51,
            column: 55
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "31488ceb5c647bdc5f6e5d21930dec981703b2fd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2padtkys6j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2padtkys6j();
const express =
/* istanbul ignore next */
(cov_2padtkys6j().s[0]++, require('express'));
const multer =
/* istanbul ignore next */
(cov_2padtkys6j().s[1]++, require('multer'));
const {
  validateFileUpload
} =
/* istanbul ignore next */
(cov_2padtkys6j().s[2]++, require('../middleware/validation'));
const testGenerator =
/* istanbul ignore next */
(cov_2padtkys6j().s[3]++, require('../services/testGenerator'));
const {
  PrismaClient
} =
/* istanbul ignore next */
(cov_2padtkys6j().s[4]++, require('@prisma/client'));
const router =
/* istanbul ignore next */
(cov_2padtkys6j().s[5]++, express.Router());
const prisma =
/* istanbul ignore next */
(cov_2padtkys6j().s[6]++, new PrismaClient());

// Configure multer for file uploads
const upload =
/* istanbul ignore next */
(cov_2padtkys6j().s[7]++, multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  }
}));

// Generate tests endpoint
/* istanbul ignore next */
cov_2padtkys6j().s[8]++;
router.post('/generate', upload.single('file'), validateFileUpload, async (req, res) => {
  /* istanbul ignore next */
  cov_2padtkys6j().f[0]++;
  cov_2padtkys6j().s[9]++;
  try {
    const {
      buffer,
      originalname
    } =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[10]++, req.file);
    const fileContent =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[11]++, buffer.toString('utf-8'));
    const {
      testFramework =
      /* istanbul ignore next */
      (cov_2padtkys6j().b[0][0]++, 'jest'),
      testType =
      /* istanbul ignore next */
      (cov_2padtkys6j().b[1][0]++, 'unit')
    } =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[12]++, req.body);
    /* istanbul ignore next */
    cov_2padtkys6j().s[13]++;
    console.log(`🧪 Generating tests for: ${originalname} (framework: ${testFramework})`);

    // Generate test cases
    const testResults =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[14]++, await testGenerator.generateTests(fileContent, originalname, {
      framework: testFramework,
      type: testType
    }));

    // Save to database
    const result =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[15]++, await prisma.scanResult.create({
      data: {
        filename: originalname,
        fileContent: fileContent,
        scanType: 'test-generation',
        testCases: testResults,
        status: 'completed'
      }
    }));

    // Log the action
    /* istanbul ignore next */
    cov_2padtkys6j().s[16]++;
    await prisma.auditLog.create({
      data: {
        action: 'test_generation',
        details: {
          filename: originalname,
          framework: testFramework,
          testCount:
          /* istanbul ignore next */
          (cov_2padtkys6j().b[2][0]++, testResults.testCases?.length) ||
          /* istanbul ignore next */
          (cov_2padtkys6j().b[2][1]++, 0)
        },
        ipAddress: req.ip,
        userAgent: req.get('User-Agent')
      }
    });
    /* istanbul ignore next */
    cov_2padtkys6j().s[17]++;
    res.json({
      success: true,
      testId: result.id,
      filename: originalname,
      tests: testResults
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2padtkys6j().s[18]++;
    console.error('Test generation error:', error);
    /* istanbul ignore next */
    cov_2padtkys6j().s[19]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Get test results
/* istanbul ignore next */
cov_2padtkys6j().s[20]++;
router.get('/tests/:id', async (req, res) => {
  /* istanbul ignore next */
  cov_2padtkys6j().f[1]++;
  cov_2padtkys6j().s[21]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[22]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[23]++, await prisma.scanResult.findUnique({
      where: {
        id
      },
      select: {
        id: true,
        filename: true,
        testCases: true,
        status: true,
        createdAt: true
      }
    }));
    /* istanbul ignore next */
    cov_2padtkys6j().s[24]++;
    if (!result) {
      /* istanbul ignore next */
      cov_2padtkys6j().b[3][0]++;
      cov_2padtkys6j().s[25]++;
      return res.status(404).json({
        error: 'Test result not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2padtkys6j().b[3][1]++;
    }
    cov_2padtkys6j().s[26]++;
    res.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_2padtkys6j().s[27]++;
    console.error('Get test result error:', error);
    /* istanbul ignore next */
    cov_2padtkys6j().s[28]++;
    res.status(500).json({
      error: error.message
    });
  }
});

// Get test coverage analysis
/* istanbul ignore next */
cov_2padtkys6j().s[29]++;
router.post('/coverage', upload.single('file'), validateFileUpload, async (req, res) => {
  /* istanbul ignore next */
  cov_2padtkys6j().f[2]++;
  cov_2padtkys6j().s[30]++;
  try {
    const {
      buffer,
      originalname
    } =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[31]++, req.file);
    const fileContent =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[32]++, buffer.toString('utf-8'));
    /* istanbul ignore next */
    cov_2padtkys6j().s[33]++;
    console.log(`📊 Analyzing test coverage for: ${originalname}`);
    const coverageResults =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[34]++, await testGenerator.analyzeCoverage(fileContent, originalname));
    /* istanbul ignore next */
    cov_2padtkys6j().s[35]++;
    res.json({
      success: true,
      filename: originalname,
      coverage: coverageResults
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2padtkys6j().s[36]++;
    console.error('Coverage analysis error:', error);
    /* istanbul ignore next */
    cov_2padtkys6j().s[37]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Generate integration tests
/* istanbul ignore next */
cov_2padtkys6j().s[38]++;
router.post('/integration', upload.array('files', 5), async (req, res) => {
  /* istanbul ignore next */
  cov_2padtkys6j().f[3]++;
  cov_2padtkys6j().s[39]++;
  try {
    const files =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[40]++, req.files.map(file => {
      /* istanbul ignore next */
      cov_2padtkys6j().f[4]++;
      cov_2padtkys6j().s[41]++;
      return {
        filename: file.originalname,
        content: file.buffer.toString('utf-8')
      };
    }));
    /* istanbul ignore next */
    cov_2padtkys6j().s[42]++;
    console.log(`🔗 Generating integration tests for ${files.length} files`);
    const integrationTests =
    /* istanbul ignore next */
    (cov_2padtkys6j().s[43]++, await testGenerator.generateIntegrationTests(files));
    /* istanbul ignore next */
    cov_2padtkys6j().s[44]++;
    res.json({
      success: true,
      files: files.map(f => {
        /* istanbul ignore next */
        cov_2padtkys6j().f[5]++;
        cov_2padtkys6j().s[45]++;
        return f.filename;
      }),
      integrationTests
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2padtkys6j().s[46]++;
    console.error('Integration test generation error:', error);
    /* istanbul ignore next */
    cov_2padtkys6j().s[47]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/* istanbul ignore next */
cov_2padtkys6j().s[48]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnBhZHRreXM2aiIsImFjdHVhbENvdmVyYWdlIiwiZXhwcmVzcyIsInMiLCJyZXF1aXJlIiwibXVsdGVyIiwidmFsaWRhdGVGaWxlVXBsb2FkIiwidGVzdEdlbmVyYXRvciIsIlByaXNtYUNsaWVudCIsInJvdXRlciIsIlJvdXRlciIsInByaXNtYSIsInVwbG9hZCIsInN0b3JhZ2UiLCJtZW1vcnlTdG9yYWdlIiwibGltaXRzIiwiZmlsZVNpemUiLCJwb3N0Iiwic2luZ2xlIiwicmVxIiwicmVzIiwiZiIsImJ1ZmZlciIsIm9yaWdpbmFsbmFtZSIsImZpbGUiLCJmaWxlQ29udGVudCIsInRvU3RyaW5nIiwidGVzdEZyYW1ld29yayIsImIiLCJ0ZXN0VHlwZSIsImJvZHkiLCJjb25zb2xlIiwibG9nIiwidGVzdFJlc3VsdHMiLCJnZW5lcmF0ZVRlc3RzIiwiZnJhbWV3b3JrIiwidHlwZSIsInJlc3VsdCIsInNjYW5SZXN1bHQiLCJjcmVhdGUiLCJkYXRhIiwiZmlsZW5hbWUiLCJzY2FuVHlwZSIsInRlc3RDYXNlcyIsInN0YXR1cyIsImF1ZGl0TG9nIiwiYWN0aW9uIiwiZGV0YWlscyIsInRlc3RDb3VudCIsImxlbmd0aCIsImlwQWRkcmVzcyIsImlwIiwidXNlckFnZW50IiwiZ2V0IiwianNvbiIsInN1Y2Nlc3MiLCJ0ZXN0SWQiLCJpZCIsInRlc3RzIiwiZXJyb3IiLCJtZXNzYWdlIiwicGFyYW1zIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwic2VsZWN0IiwiY3JlYXRlZEF0IiwiY292ZXJhZ2VSZXN1bHRzIiwiYW5hbHl6ZUNvdmVyYWdlIiwiY292ZXJhZ2UiLCJhcnJheSIsImZpbGVzIiwibWFwIiwiY29udGVudCIsImludGVncmF0aW9uVGVzdHMiLCJnZW5lcmF0ZUludGVncmF0aW9uVGVzdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidGVzdC1nZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IG11bHRlciA9IHJlcXVpcmUoJ211bHRlcicpO1xuY29uc3QgeyB2YWxpZGF0ZUZpbGVVcGxvYWQgfSA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmUvdmFsaWRhdGlvbicpO1xuY29uc3QgdGVzdEdlbmVyYXRvciA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL3Rlc3RHZW5lcmF0b3InKTtcbmNvbnN0IHsgUHJpc21hQ2xpZW50IH0gPSByZXF1aXJlKCdAcHJpc21hL2NsaWVudCcpO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xuXG4vLyBDb25maWd1cmUgbXVsdGVyIGZvciBmaWxlIHVwbG9hZHNcbmNvbnN0IHVwbG9hZCA9IG11bHRlcih7XG4gIHN0b3JhZ2U6IG11bHRlci5tZW1vcnlTdG9yYWdlKCksXG4gIGxpbWl0czoge1xuICAgIGZpbGVTaXplOiA1ICogMTAyNCAqIDEwMjQsIC8vIDVNQiBsaW1pdFxuICB9XG59KTtcblxuLy8gR2VuZXJhdGUgdGVzdHMgZW5kcG9pbnRcbnJvdXRlci5wb3N0KCcvZ2VuZXJhdGUnLCB1cGxvYWQuc2luZ2xlKCdmaWxlJyksIHZhbGlkYXRlRmlsZVVwbG9hZCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBidWZmZXIsIG9yaWdpbmFsbmFtZSB9ID0gcmVxLmZpbGU7XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBidWZmZXIudG9TdHJpbmcoJ3V0Zi04Jyk7XG4gICAgY29uc3QgeyB0ZXN0RnJhbWV3b3JrID0gJ2plc3QnLCB0ZXN0VHlwZSA9ICd1bml0JyB9ID0gcmVxLmJvZHk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCfp6ogR2VuZXJhdGluZyB0ZXN0cyBmb3I6ICR7b3JpZ2luYWxuYW1lfSAoZnJhbWV3b3JrOiAke3Rlc3RGcmFtZXdvcmt9KWApO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIHRlc3QgY2FzZXNcbiAgICBjb25zdCB0ZXN0UmVzdWx0cyA9IGF3YWl0IHRlc3RHZW5lcmF0b3IuZ2VuZXJhdGVUZXN0cyhmaWxlQ29udGVudCwgb3JpZ2luYWxuYW1lLCB7XG4gICAgICBmcmFtZXdvcms6IHRlc3RGcmFtZXdvcmssXG4gICAgICB0eXBlOiB0ZXN0VHlwZVxuICAgIH0pO1xuICAgIFxuICAgIC8vIFNhdmUgdG8gZGF0YWJhc2VcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEuc2NhblJlc3VsdC5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBmaWxlbmFtZTogb3JpZ2luYWxuYW1lLFxuICAgICAgICBmaWxlQ29udGVudDogZmlsZUNvbnRlbnQsXG4gICAgICAgIHNjYW5UeXBlOiAndGVzdC1nZW5lcmF0aW9uJyxcbiAgICAgICAgdGVzdENhc2VzOiB0ZXN0UmVzdWx0cyxcbiAgICAgICAgc3RhdHVzOiAnY29tcGxldGVkJ1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIExvZyB0aGUgYWN0aW9uXG4gICAgYXdhaXQgcHJpc21hLmF1ZGl0TG9nLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIGFjdGlvbjogJ3Rlc3RfZ2VuZXJhdGlvbicsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBmaWxlbmFtZTogb3JpZ2luYWxuYW1lLFxuICAgICAgICAgIGZyYW1ld29yazogdGVzdEZyYW1ld29yayxcbiAgICAgICAgICB0ZXN0Q291bnQ6IHRlc3RSZXN1bHRzLnRlc3RDYXNlcz8ubGVuZ3RoIHx8IDBcbiAgICAgICAgfSxcbiAgICAgICAgaXBBZGRyZXNzOiByZXEuaXAsXG4gICAgICAgIHVzZXJBZ2VudDogcmVxLmdldCgnVXNlci1BZ2VudCcpXG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmVzLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHRlc3RJZDogcmVzdWx0LmlkLFxuICAgICAgZmlsZW5hbWU6IG9yaWdpbmFsbmFtZSxcbiAgICAgIHRlc3RzOiB0ZXN0UmVzdWx0c1xuICAgIH0pO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Rlc3QgZ2VuZXJhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgIH0pO1xuICB9XG59KTtcblxuLy8gR2V0IHRlc3QgcmVzdWx0c1xucm91dGVyLmdldCgnL3Rlc3RzLzppZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnNjYW5SZXN1bHQuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBpZCB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIGlkOiB0cnVlLFxuICAgICAgICBmaWxlbmFtZTogdHJ1ZSxcbiAgICAgICAgdGVzdENhc2VzOiB0cnVlLFxuICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgIGNyZWF0ZWRBdDogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1Rlc3QgcmVzdWx0IG5vdCBmb3VuZCcgfSk7XG4gICAgfVxuICAgIFxuICAgIHJlcy5qc29uKHJlc3VsdCk7XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignR2V0IHRlc3QgcmVzdWx0IGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xuICB9XG59KTtcblxuLy8gR2V0IHRlc3QgY292ZXJhZ2UgYW5hbHlzaXNcbnJvdXRlci5wb3N0KCcvY292ZXJhZ2UnLCB1cGxvYWQuc2luZ2xlKCdmaWxlJyksIHZhbGlkYXRlRmlsZVVwbG9hZCwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBidWZmZXIsIG9yaWdpbmFsbmFtZSB9ID0gcmVxLmZpbGU7XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBidWZmZXIudG9TdHJpbmcoJ3V0Zi04Jyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCfk4ogQW5hbHl6aW5nIHRlc3QgY292ZXJhZ2UgZm9yOiAke29yaWdpbmFsbmFtZX1gKTtcbiAgICBcbiAgICBjb25zdCBjb3ZlcmFnZVJlc3VsdHMgPSBhd2FpdCB0ZXN0R2VuZXJhdG9yLmFuYWx5emVDb3ZlcmFnZShmaWxlQ29udGVudCwgb3JpZ2luYWxuYW1lKTtcbiAgICBcbiAgICByZXMuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZmlsZW5hbWU6IG9yaWdpbmFsbmFtZSxcbiAgICAgIGNvdmVyYWdlOiBjb3ZlcmFnZVJlc3VsdHNcbiAgICB9KTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdDb3ZlcmFnZSBhbmFseXNpcyBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgIH0pO1xuICB9XG59KTtcblxuLy8gR2VuZXJhdGUgaW50ZWdyYXRpb24gdGVzdHNcbnJvdXRlci5wb3N0KCcvaW50ZWdyYXRpb24nLCB1cGxvYWQuYXJyYXkoJ2ZpbGVzJywgNSksIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGZpbGVzID0gcmVxLmZpbGVzLm1hcChmaWxlID0+ICh7XG4gICAgICBmaWxlbmFtZTogZmlsZS5vcmlnaW5hbG5hbWUsXG4gICAgICBjb250ZW50OiBmaWxlLmJ1ZmZlci50b1N0cmluZygndXRmLTgnKVxuICAgIH0pKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhg8J+UlyBHZW5lcmF0aW5nIGludGVncmF0aW9uIHRlc3RzIGZvciAke2ZpbGVzLmxlbmd0aH0gZmlsZXNgKTtcbiAgICBcbiAgICBjb25zdCBpbnRlZ3JhdGlvblRlc3RzID0gYXdhaXQgdGVzdEdlbmVyYXRvci5nZW5lcmF0ZUludGVncmF0aW9uVGVzdHMoZmlsZXMpO1xuICAgIFxuICAgIHJlcy5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBmaWxlczogZmlsZXMubWFwKGYgPT4gZi5maWxlbmFtZSksXG4gICAgICBpbnRlZ3JhdGlvblRlc3RzXG4gICAgfSk7XG4gICAgXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignSW50ZWdyYXRpb24gdGVzdCBnZW5lcmF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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