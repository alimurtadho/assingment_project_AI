{"version":3,"names":["cov_2padtkys6j","actualCoverage","express","s","require","multer","validateFileUpload","testGenerator","PrismaClient","router","Router","prisma","upload","storage","memoryStorage","limits","fileSize","post","single","req","res","f","buffer","originalname","file","fileContent","toString","testFramework","b","testType","body","console","log","testResults","generateTests","framework","type","result","scanResult","create","data","filename","scanType","testCases","status","auditLog","action","details","testCount","length","ipAddress","ip","userAgent","get","json","success","testId","id","tests","error","message","params","findUnique","where","select","createdAt","coverageResults","analyzeCoverage","coverage","array","files","map","content","integrationTests","generateIntegrationTests","module","exports"],"sources":["test-gen.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst { validateFileUpload } = require('../middleware/validation');\nconst testGenerator = require('../services/testGenerator');\nconst { PrismaClient } = require('@prisma/client');\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  }\n});\n\n// Generate tests endpoint\nrouter.post('/generate', upload.single('file'), validateFileUpload, async (req, res) => {\n  try {\n    const { buffer, originalname } = req.file;\n    const fileContent = buffer.toString('utf-8');\n    const { testFramework = 'jest', testType = 'unit' } = req.body;\n    \n    console.log(`ðŸ§ª Generating tests for: ${originalname} (framework: ${testFramework})`);\n    \n    // Generate test cases\n    const testResults = await testGenerator.generateTests(fileContent, originalname, {\n      framework: testFramework,\n      type: testType\n    });\n    \n    // Save to database\n    const result = await prisma.scanResult.create({\n      data: {\n        filename: originalname,\n        fileContent: fileContent,\n        scanType: 'test-generation',\n        testCases: testResults,\n        status: 'completed'\n      }\n    });\n    \n    // Log the action\n    await prisma.auditLog.create({\n      data: {\n        action: 'test_generation',\n        details: {\n          filename: originalname,\n          framework: testFramework,\n          testCount: testResults.testCases?.length || 0\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      }\n    });\n    \n    res.json({\n      success: true,\n      testId: result.id,\n      filename: originalname,\n      tests: testResults\n    });\n    \n  } catch (error) {\n    console.error('Test generation error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Get test results\nrouter.get('/tests/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const result = await prisma.scanResult.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        filename: true,\n        testCases: true,\n        status: true,\n        createdAt: true\n      }\n    });\n    \n    if (!result) {\n      return res.status(404).json({ error: 'Test result not found' });\n    }\n    \n    res.json(result);\n    \n  } catch (error) {\n    console.error('Get test result error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get test coverage analysis\nrouter.post('/coverage', upload.single('file'), validateFileUpload, async (req, res) => {\n  try {\n    const { buffer, originalname } = req.file;\n    const fileContent = buffer.toString('utf-8');\n    \n    console.log(`ðŸ“Š Analyzing test coverage for: ${originalname}`);\n    \n    const coverageResults = await testGenerator.analyzeCoverage(fileContent, originalname);\n    \n    res.json({\n      success: true,\n      filename: originalname,\n      coverage: coverageResults\n    });\n    \n  } catch (error) {\n    console.error('Coverage analysis error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Generate integration tests\nrouter.post('/integration', upload.array('files', 5), async (req, res) => {\n  try {\n    const files = req.files.map(file => ({\n      filename: file.originalname,\n      content: file.buffer.toString('utf-8')\n    }));\n    \n    console.log(`ðŸ”— Generating integration tests for ${files.length} files`);\n    \n    const integrationTests = await testGenerator.generateIntegrationTests(files);\n    \n    res.json({\n      success: true,\n      files: files.map(f => f.filename),\n      integrationTests\n    });\n    \n  } catch (error) {\n    console.error('Integration test generation error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}