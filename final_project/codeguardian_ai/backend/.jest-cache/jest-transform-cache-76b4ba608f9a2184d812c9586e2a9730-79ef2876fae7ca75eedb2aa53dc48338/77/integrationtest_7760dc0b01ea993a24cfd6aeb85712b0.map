{"version":3,"names":["request","require","path","fs","ResponseFormatter","ValidationUtils","Logger","ErrorHandler","SecurityScanner","AIReviewer","TestGenerator","describe","app","server","beforeAll","process","env","NODE_ENV","OPENAI_API_KEY","ServerClass","serverInstance","listen","afterAll","close","test","result","success","id","expect","toHaveProperty","error","data","pagination","page","limit","total","totalPages","paginated","mockFile","originalname","mimetype","size","buffer","Buffer","from","validateFile","isValid","toBe","errors","toContain","alloc","maliciousCode","detectMaliciousContent","isSafe","threats","length","toBeGreaterThan","sanitized","sanitizeContent","not","logger","getInstance","toBeDefined","info","warn","mockReq","method","url","ip","headers","trackingId","trackRequest","Error","name","handled","handleError","statusCode","errorCode","message","clientError","serverError","categorizeError","scanner","beforeEach","patterns","code","scanCode","vulnerabilities","sqlInjection","find","v","type","highRiskCode","lowRiskCode","highRisk","lowRisk","riskScore","evalVuln","remediation","reviewer","openai","chat","completions","create","jest","fn","mockResolvedValue","choices","content","JSON","stringify","review","overall_rating","strengths","issues","suggestions","reviewCode","analyzeCode","mockRejectedValue","rejects","toThrow","generator","generateTests","jestCode","mochaCode","detectFramework","simpleCode","complexCode","simpleAnalysis","analyzeCodeComplexity","complexAnalysis","cyclomaticComplexity","response","get","body","options","requests","Array","fill","map","responses","Promise","all","forEach","status","post","send","invalid","module","exports","createMockFile","filename","byteLength","createMockOpenAI","responseContent"],"sources":["integration.test.js"],"sourcesContent":["/**\n * Comprehensive Integration Test Suite for CodeGuardian AI v2.0\n * Tests the refactored backend services and utilities\n */\n\nconst request = require('supertest');\nconst path = require('path');\nconst fs = require('fs');\n\n// Import refactored modules\nconst ResponseFormatter = require('../utils/responseFormatter');\nconst ValidationUtils = require('../utils/validationUtils');\nconst Logger = require('../utils/logger');\nconst ErrorHandler = require('../utils/errorHandler');\n\n// Import refactored services\nconst SecurityScanner = require('../services/securityScanner');\nconst AIReviewer = require('../services/aiReviewer');\nconst TestGenerator = require('../services/testGenerator');\n\ndescribe('CodeGuardian AI v2.0 Integration Tests', () => {\n    let app;\n    let server;\n\n    beforeAll(async () => {\n        // Set test environment\n        process.env.NODE_ENV = 'test';\n        process.env.OPENAI_API_KEY = 'test-api-key';\n        \n        // Import the refactored server\n        const ServerClass = require('../server.refactored');\n        const serverInstance = new ServerClass();\n        app = serverInstance.app;\n        \n        // Start server for testing\n        server = app.listen(0); // Use random port for testing\n    });\n\n    afterAll(async () => {\n        if (server) {\n            server.close();\n        }\n    });\n\n    describe('Utility Classes', () => {\n        describe('ResponseFormatter', () => {\n            test('should format success response correctly', () => {\n                const result = ResponseFormatter.success('Test successful', { id: 1 });\n                \n                expect(result).toHaveProperty('success', true);\n                expect(result).toHaveProperty('message', 'Test successful');\n                expect(result).toHaveProperty('data', { id: 1 });\n                expect(result).toHaveProperty('timestamp');\n            });\n\n            test('should format error response correctly', () => {\n                const result = ResponseFormatter.error('Test error', 400, 'VALIDATION_ERROR');\n                \n                expect(result).toHaveProperty('success', false);\n                expect(result).toHaveProperty('message', 'Test error');\n                expect(result).toHaveProperty('statusCode', 400);\n                expect(result).toHaveProperty('errorCode', 'VALIDATION_ERROR');\n                expect(result).toHaveProperty('timestamp');\n            });\n\n            test('should format paginated response correctly', () => {\n                const data = [{ id: 1 }, { id: 2 }];\n                const pagination = { page: 1, limit: 10, total: 2, totalPages: 1 };\n                const result = ResponseFormatter.paginated(data, pagination, 'Test paginated');\n                \n                expect(result).toHaveProperty('success', true);\n                expect(result).toHaveProperty('data', data);\n                expect(result).toHaveProperty('pagination', pagination);\n            });\n        });\n\n        describe('ValidationUtils', () => {\n            test('should validate JavaScript file correctly', () => {\n                const mockFile = {\n                    originalname: 'test.js',\n                    mimetype: 'text/javascript',\n                    size: 1024,\n                    buffer: Buffer.from('console.log(\"test\");')\n                };\n\n                const result = ValidationUtils.validateFile(mockFile);\n                expect(result.isValid).toBe(true);\n            });\n\n            test('should reject invalid file type', () => {\n                const mockFile = {\n                    originalname: 'test.exe',\n                    mimetype: 'application/octet-stream',\n                    size: 1024,\n                    buffer: Buffer.from('invalid content')\n                };\n\n                const result = ValidationUtils.validateFile(mockFile);\n                expect(result.isValid).toBe(false);\n                expect(result.errors).toContain('Unsupported file type');\n            });\n\n            test('should reject oversized file', () => {\n                const mockFile = {\n                    originalname: 'test.js',\n                    mimetype: 'text/javascript',\n                    size: 100 * 1024 * 1024, // 100MB\n                    buffer: Buffer.alloc(100 * 1024 * 1024)\n                };\n\n                const result = ValidationUtils.validateFile(mockFile);\n                expect(result.isValid).toBe(false);\n                expect(result.errors).toContain('File too large');\n            });\n\n            test('should detect potential malicious content', () => {\n                const maliciousCode = 'eval(atob(\"dmFyIGEgPSBkb2N1bWVudA==\"))';\n                const result = ValidationUtils.detectMaliciousContent(maliciousCode);\n                \n                expect(result.isSafe).toBe(false);\n                expect(result.threats.length).toBeGreaterThan(0);\n            });\n\n            test('should sanitize code content', () => {\n                const maliciousCode = 'const x = 1; \\\\x00\\\\x01 eval(\"test\"); // normal code';\n                const sanitized = ValidationUtils.sanitizeContent(maliciousCode);\n                \n                expect(sanitized).not.toContain('\\\\x00');\n                expect(sanitized).not.toContain('\\\\x01');\n                expect(sanitized).toContain('const x = 1;');\n            });\n        });\n\n        describe('Logger', () => {\n            test('should create logger instance', () => {\n                const logger = Logger.getInstance();\n                expect(logger).toBeDefined();\n                expect(typeof logger.info).toBe('function');\n                expect(typeof logger.error).toBe('function');\n                expect(typeof logger.warn).toBe('function');\n            });\n\n            test('should track requests', () => {\n                const mockReq = {\n                    method: 'GET',\n                    url: '/test',\n                    ip: '127.0.0.1',\n                    headers: { 'user-agent': 'test' }\n                };\n                \n                const trackingId = Logger.trackRequest(mockReq);\n                expect(trackingId).toBeDefined();\n                expect(typeof trackingId).toBe('string');\n            });\n        });\n\n        describe('ErrorHandler', () => {\n            test('should handle validation errors', () => {\n                const error = new Error('Validation failed');\n                error.name = 'ValidationError';\n                \n                const handled = ErrorHandler.handleError(error);\n                \n                expect(handled.statusCode).toBe(400);\n                expect(handled.errorCode).toBe('VALIDATION_ERROR');\n                expect(handled.message).toBe('Validation failed');\n            });\n\n            test('should handle unknown errors safely', () => {\n                const error = new Error('Unknown error');\n                \n                const handled = ErrorHandler.handleError(error);\n                \n                expect(handled.statusCode).toBe(500);\n                expect(handled.errorCode).toBe('INTERNAL_SERVER_ERROR');\n            });\n\n            test('should categorize errors correctly', () => {\n                const clientError = new Error('Client error');\n                clientError.statusCode = 400;\n                \n                const serverError = new Error('Server error');\n                serverError.statusCode = 500;\n                \n                expect(ErrorHandler.categorizeError(clientError)).toBe('client');\n                expect(ErrorHandler.categorizeError(serverError)).toBe('server');\n            });\n        });\n    });\n\n    describe('Enhanced Services', () => {\n        describe('SecurityScanner', () => {\n            let scanner;\n\n            beforeEach(() => {\n                scanner = new SecurityScanner();\n            });\n\n            test('should initialize with patterns', () => {\n                expect(scanner.patterns).toBeDefined();\n                expect(scanner.patterns.length).toBeGreaterThan(0);\n            });\n\n            test('should scan JavaScript code for vulnerabilities', async () => {\n                const code = `\n                    function unsafeFunction(input) {\n                        eval(input); // This is dangerous\n                        document.innerHTML = input; // XSS vulnerability\n                        return input;\n                    }\n                `;\n\n                const result = await scanner.scanCode(code, 'test.js');\n                \n                expect(result).toHaveProperty('vulnerabilities');\n                expect(result).toHaveProperty('riskScore');\n                expect(result).toHaveProperty('summary');\n                expect(result.vulnerabilities.length).toBeGreaterThan(0);\n            });\n\n            test('should detect SQL injection patterns', async () => {\n                const code = `\n                    function queryDatabase(userId) {\n                        const query = \"SELECT * FROM users WHERE id = \" + userId;\n                        return db.query(query);\n                    }\n                `;\n\n                const result = await scanner.scanCode(code, 'db.js');\n                \n                const sqlInjection = result.vulnerabilities.find(v => \n                    v.type === 'sql_injection'\n                );\n                expect(sqlInjection).toBeDefined();\n            });\n\n            test('should calculate risk scores correctly', async () => {\n                const highRiskCode = `\n                    eval(userInput);\n                    exec(command);\n                    document.write(userContent);\n                `;\n\n                const lowRiskCode = `\n                    const x = 1;\n                    console.log('Hello World');\n                `;\n\n                const highRisk = await scanner.scanCode(highRiskCode, 'high.js');\n                const lowRisk = await scanner.scanCode(lowRiskCode, 'low.js');\n\n                expect(highRisk.riskScore).toBeGreaterThan(lowRisk.riskScore);\n            });\n\n            test('should provide remediation suggestions', async () => {\n                const code = 'eval(userInput);';\n                const result = await scanner.scanCode(code, 'test.js');\n                \n                const evalVuln = result.vulnerabilities.find(v => \n                    v.type === 'code_injection'\n                );\n                expect(evalVuln).toBeDefined();\n                expect(evalVuln.remediation).toBeDefined();\n                expect(evalVuln.remediation.length).toBeGreaterThan(0);\n            });\n        });\n\n        describe('AIReviewer', () => {\n            let reviewer;\n\n            beforeEach(() => {\n                reviewer = new AIReviewer();\n                // Mock OpenAI API\n                reviewer.openai = {\n                    chat: {\n                        completions: {\n                            create: jest.fn().mockResolvedValue({\n                                choices: [{\n                                    message: {\n                                        content: JSON.stringify({\n                                            review: {\n                                                overall_rating: 7,\n                                                strengths: ['Well structured'],\n                                                issues: ['Missing error handling'],\n                                                suggestions: ['Add try-catch blocks']\n                                            }\n                                        })\n                                    }\n                                }]\n                            })\n                        }\n                    }\n                };\n            });\n\n            test('should perform general code review', async () => {\n                const code = `\n                    function calculateSum(a, b) {\n                        return a + b;\n                    }\n                `;\n\n                const result = await reviewer.reviewCode(code, 'test.js');\n                \n                expect(result).toHaveProperty('type', 'code_review');\n                expect(result).toHaveProperty('analysis');\n                expect(result).toHaveProperty('metadata');\n            });\n\n            test('should perform security analysis', async () => {\n                const code = 'eval(userInput);';\n                const result = await reviewer.analyzeCode(code, 'test.js', 'security');\n                \n                expect(result).toHaveProperty('type', 'security_analysis');\n                expect(result).toHaveProperty('analysis');\n            });\n\n            test('should provide refactoring suggestions', async () => {\n                const code = `\n                    function oldFunction() {\n                        var x = 1;\n                        var y = 2;\n                        return x + y;\n                    }\n                `;\n\n                const result = await reviewer.analyzeCode(code, 'test.js', 'refactoring');\n                \n                expect(result).toHaveProperty('type', 'refactoring_suggestions');\n                expect(result).toHaveProperty('analysis');\n            });\n\n            test('should analyze performance', async () => {\n                const code = `\n                    function inefficientLoop(arr) {\n                        for (let i = 0; i < arr.length; i++) {\n                            for (let j = 0; j < arr.length; j++) {\n                                // O(n²) complexity\n                                console.log(arr[i], arr[j]);\n                            }\n                        }\n                    }\n                `;\n\n                const result = await reviewer.analyzeCode(code, 'test.js', 'performance');\n                \n                expect(result).toHaveProperty('type', 'performance_analysis');\n                expect(result).toHaveProperty('analysis');\n            });\n\n            test('should handle API failures gracefully', async () => {\n                reviewer.openai.chat.completions.create.mockRejectedValue(\n                    new Error('API Error')\n                );\n\n                const code = 'console.log(\"test\");';\n                \n                await expect(reviewer.reviewCode(code, 'test.js')).rejects.toThrow();\n            });\n        });\n\n        describe('TestGenerator', () => {\n            let generator;\n\n            beforeEach(() => {\n                generator = new TestGenerator();\n                // Mock OpenAI API\n                generator.openai = {\n                    chat: {\n                        completions: {\n                            create: jest.fn().mockResolvedValue({\n                                choices: [{\n                                    message: {\n                                        content: `\n                                        describe('Calculator', () => {\n                                            test('should add two numbers', () => {\n                                                expect(add(2, 3)).toBe(5);\n                                            });\n                                        });\n                                        `\n                                    }\n                                }]\n                            })\n                        }\n                    }\n                };\n            });\n\n            test('should generate unit tests', async () => {\n                const code = `\n                    function add(a, b) {\n                        return a + b;\n                    }\n                `;\n\n                const result = await generator.generateTests(code, 'calculator.js', 'unit');\n                \n                expect(result).toHaveProperty('type', 'unit');\n                expect(result).toHaveProperty('tests');\n                expect(result).toHaveProperty('framework');\n                expect(result).toHaveProperty('metadata');\n            });\n\n            test('should generate integration tests', async () => {\n                const code = `\n                    class UserService {\n                        async createUser(userData) {\n                            return await database.users.create(userData);\n                        }\n                    }\n                `;\n\n                const result = await generator.generateTests(code, 'userService.js', 'integration');\n                \n                expect(result).toHaveProperty('type', 'integration');\n                expect(result).toHaveProperty('tests');\n            });\n\n            test('should generate E2E tests', async () => {\n                const code = `\n                    app.post('/api/users', (req, res) => {\n                        // Create user endpoint\n                        res.json({ success: true });\n                    });\n                `;\n\n                const result = await generator.generateTests(code, 'routes.js', 'e2e');\n                \n                expect(result).toHaveProperty('type', 'e2e');\n                expect(result).toHaveProperty('tests');\n            });\n\n            test('should detect appropriate test framework', () => {\n                const jestCode = 'describe(\"test\", () => {})';\n                const mochaCode = 'it(\"should test\", function() {})';\n                \n                expect(generator.detectFramework(jestCode)).toBe('jest');\n                expect(generator.detectFramework(mochaCode)).toBe('mocha');\n            });\n\n            test('should analyze code complexity', () => {\n                const simpleCode = 'const x = 1;';\n                const complexCode = `\n                    function complex(arr) {\n                        for (let i = 0; i < arr.length; i++) {\n                            if (arr[i] > 10) {\n                                for (let j = 0; j < arr[i]; j++) {\n                                    try {\n                                        processItem(arr[i], j);\n                                    } catch (e) {\n                                        handleError(e);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `;\n                \n                const simpleAnalysis = generator.analyzeCodeComplexity(simpleCode);\n                const complexAnalysis = generator.analyzeCodeComplexity(complexCode);\n                \n                expect(complexAnalysis.cyclomaticComplexity).toBeGreaterThan(\n                    simpleAnalysis.cyclomaticComplexity\n                );\n            });\n        });\n    });\n\n    describe('API Endpoints', () => {\n        test('should respond to health check', async () => {\n            const response = await request(app)\n                .get('/api/health')\n                .expect(200);\n\n            expect(response.body).toHaveProperty('success', true);\n            expect(response.body).toHaveProperty('status', 'healthy');\n        });\n\n        test('should handle CORS properly', async () => {\n            const response = await request(app)\n                .options('/api/health')\n                .expect(204);\n\n            expect(response.headers).toHaveProperty('access-control-allow-origin');\n        });\n\n        test('should apply rate limiting', async () => {\n            // This test would need to be adapted based on your rate limiting configuration\n            const requests = Array(10).fill().map(() => \n                request(app).get('/api/health')\n            );\n\n            const responses = await Promise.all(requests);\n            \n            // All requests should succeed under normal rate limits\n            responses.forEach(response => {\n                expect(response.status).toBe(200);\n            });\n        });\n    });\n\n    describe('Error Handling', () => {\n        test('should handle 404 errors', async () => {\n            const response = await request(app)\n                .get('/api/nonexistent-endpoint')\n                .expect(404);\n\n            expect(response.body).toHaveProperty('success', false);\n            expect(response.body).toHaveProperty('message');\n        });\n\n        test('should handle malformed requests', async () => {\n            const response = await request(app)\n                .post('/api/security/scan')\n                .send({ invalid: 'data' })\n                .expect(400);\n\n            expect(response.body).toHaveProperty('success', false);\n        });\n    });\n});\n\nmodule.exports = {\n    // Export test utilities for use in other test files\n    createMockFile: (filename, content, size = null) => ({\n        originalname: filename,\n        mimetype: 'text/javascript',\n        size: size || Buffer.byteLength(content),\n        buffer: Buffer.from(content)\n    }),\n    \n    createMockOpenAI: (responseContent) => ({\n        chat: {\n            completions: {\n                create: jest.fn().mockResolvedValue({\n                    choices: [{\n                        message: { content: responseContent }\n                    }]\n                })\n            }\n        }\n    })\n};\n"],"mappings":"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","ignoreList":[]}