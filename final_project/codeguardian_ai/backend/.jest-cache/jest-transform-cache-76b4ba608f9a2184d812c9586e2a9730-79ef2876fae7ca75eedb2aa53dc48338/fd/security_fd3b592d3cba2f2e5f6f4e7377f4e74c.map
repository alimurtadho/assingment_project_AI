{"version":3,"names":["cov_it201g5we","actualCoverage","express","s","require","multer","validateFileUpload","securityScanner","PrismaClient","router","Router","prisma","upload","storage","memoryStorage","limits","fileSize","fileFilter","req","file","cb","f","allowedTypes","fileExt","originalname","toLowerCase","substring","lastIndexOf","includes","b","Error","post","single","res","buffer","fileContent","toString","console","log","scanResults","scanCode","result","scanResult","create","data","filename","scanType","vulnerabilities","riskScore","status","auditLog","action","details","vulnerabilityCount","length","ipAddress","ip","userAgent","get","json","success","scanId","id","summary","recommendations","error","message","params","findUnique","where","select","createdAt","page","limit","type","query","skip","results","findMany","orderBy","parseInt","take","total","count","pagination","pages","Math","ceil","module","exports"],"sources":["security.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst { validateFileUpload } = require('../middleware/validation');\nconst securityScanner = require('../services/securityScanner');\nconst { PrismaClient } = require('@prisma/client');\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow common code file types\n    const allowedTypes = ['.js', '.ts', '.py', '.java', '.cpp', '.c', '.php', '.rb', '.go', '.rs'];\n    const fileExt = file.originalname.toLowerCase().substring(file.originalname.lastIndexOf('.'));\n    \n    if (allowedTypes.includes(fileExt)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only code files are allowed.'));\n    }\n  }\n});\n\n// Security scan endpoint\nrouter.post('/scan', upload.single('file'), validateFileUpload, async (req, res) => {\n  try {\n    const { buffer, originalname } = req.file;\n    const fileContent = buffer.toString('utf-8');\n    \n    console.log(`📁 Scanning file: ${originalname}`);\n    \n    // Perform security scan\n    const scanResults = await securityScanner.scanCode(fileContent, originalname);\n    \n    // Save to database\n    const result = await prisma.scanResult.create({\n      data: {\n        filename: originalname,\n        fileContent: fileContent,\n        scanType: 'security',\n        vulnerabilities: scanResults.vulnerabilities,\n        riskScore: scanResults.riskScore,\n        status: 'completed'\n      }\n    });\n    \n    // Log the action\n    await prisma.auditLog.create({\n      data: {\n        action: 'security_scan',\n        details: {\n          filename: originalname,\n          vulnerabilityCount: scanResults.vulnerabilities.length,\n          riskScore: scanResults.riskScore\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      }\n    });\n    \n    res.json({\n      success: true,\n      scanId: result.id,\n      filename: originalname,\n      riskScore: scanResults.riskScore,\n      vulnerabilities: scanResults.vulnerabilities,\n      summary: scanResults.summary,\n      recommendations: scanResults.recommendations\n    });\n    \n  } catch (error) {\n    console.error('Security scan error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Get scan results\nrouter.get('/scan/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const result = await prisma.scanResult.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        filename: true,\n        scanType: true,\n        vulnerabilities: true,\n        riskScore: true,\n        status: true,\n        createdAt: true\n      }\n    });\n    \n    if (!result) {\n      return res.status(404).json({ error: 'Scan result not found' });\n    }\n    \n    res.json(result);\n    \n  } catch (error) {\n    console.error('Get scan result error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get all scan results\nrouter.get('/scans', async (req, res) => {\n  try {\n    const { page = 1, limit = 10, type } = req.query;\n    const skip = (page - 1) * limit;\n    \n    const where = type ? { scanType: type } : {};\n    \n    const results = await prisma.scanResult.findMany({\n      where,\n      select: {\n        id: true,\n        filename: true,\n        scanType: true,\n        riskScore: true,\n        status: true,\n        createdAt: true\n      },\n      orderBy: { createdAt: 'desc' },\n      skip: parseInt(skip),\n      take: parseInt(limit)\n    });\n    \n    const total = await prisma.scanResult.count({ where });\n    \n    res.json({\n      results,\n      pagination: {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        total,\n        pages: Math.ceil(total / limit)\n      }\n    });\n    \n  } catch (error) {\n    console.error('Get scan results error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}