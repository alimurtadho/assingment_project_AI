{"version":3,"names":["cov_2rhd6a1jgi","actualCoverage","body","validationResult","s","require","ValidationUtils","fileUploadRules","f","custom","value","req","file","b","Error","allowedTypes","includes","mimetype","maxSize","size","handleValidationErrors","res","next","errors","isEmpty","status","json","success","message","array","map","error","field","param","msg","sanitizeFileContent","content","replace","substring","validateApiKey","apiKey","startsWith","length","module","exports"],"sources":["validationUtils.js"],"sourcesContent":["// Backend Utilities - Validation Helpers\nconst { body, validationResult } = require('express-validator');\n\nclass ValidationUtils {\n  // File validation rules\n  static fileUploadRules() {\n    return [\n      body('file').custom((value, { req }) => {\n        if (!req.file) {\n          throw new Error('File is required');\n        }\n        \n        const allowedTypes = [\n          'text/plain',\n          'application/javascript',\n          'text/javascript',\n          'application/typescript',\n          'text/x-python',\n          'text/x-java',\n          'text/x-c',\n          'text/x-cpp'\n        ];\n\n        if (!allowedTypes.includes(req.file.mimetype)) {\n          throw new Error('Invalid file type. Only code files are allowed.');\n        }\n\n        const maxSize = 5 * 1024 * 1024; // 5MB\n        if (req.file.size > maxSize) {\n          throw new Error('File size too large. Maximum 5MB allowed.');\n        }\n\n        return true;\n      })\n    ];\n  }\n\n  // Handle validation errors\n  static handleValidationErrors(req, res, next) {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        message: 'Validation failed',\n        errors: errors.array().map(error => ({\n          field: error.param,\n          message: error.msg,\n          value: error.value\n        }))\n      });\n    }\n    next();\n  }\n\n  // Sanitize file content\n  static sanitizeFileContent(content) {\n    // Remove potential malicious content\n    return content\n      .replace(/[\\x00-\\x08\\x0B-\\x0C\\x0E-\\x1F\\x7F]/g, '') // Remove control characters\n      .substring(0, 100000); // Limit to 100KB of content\n  }\n\n  // Validate API keys\n  static validateApiKey(apiKey) {\n    if (!apiKey || typeof apiKey !== 'string') {\n      return false;\n    }\n    \n    // Basic OpenAI API key format validation\n    return apiKey.startsWith('sk-') && apiKey.length > 20;\n  }\n}\n\nmodule.exports = ValidationUtils;\n"],"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","ignoreList":[]}