{"version":3,"names":["ErrorHandler","require","describe","test","error","Error","name","statusCode","result","handleError","expect","toEqual","errorCode","message","category","isOperational","timestamp","any","String","toBe","not","toContain","clientErrorCodes","forEach","categorizeError","serverErrorCodes","operationalErrors","errorName","isOperationalError","nonOperationalErrors","process","env","NODE_ENV","stack","formatted","formatErrorForResponse","success","details","toBeUndefined","mockLogger","jest","fn","warn","beforeEach","clearAllMocks","doMock","getInstance","logError","userId","toHaveBeenCalledWith","objectContaining","context","middleware","getExpressMiddleware","length","mockReq","url","method","mockRes","status","mockReturnThis","json","mockNext","recovery","strategy","maxAttempts","backoffMs","undefined","code","data","circular","toThrow","longMessage","repeat","toBeLessThanOrEqual","afterEach"],"sources":["errorHandler.test.js"],"sourcesContent":["/**\n * Unit Tests for ErrorHandler Utility\n * Tests centralized error handling and categorization\n */\n\nconst ErrorHandler = require('../../utils/errorHandler');\n\ndescribe('ErrorHandler Utility', () => {\n    describe('handleError method', () => {\n        test('should handle ValidationError', () => {\n            const error = new Error('Invalid email format');\n            error.name = 'ValidationError';\n            error.statusCode = 400;\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 400,\n                errorCode: 'VALIDATION_ERROR',\n                message: 'Invalid email format',\n                category: 'client',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle AuthenticationError', () => {\n            const error = new Error('Invalid credentials');\n            error.name = 'AuthenticationError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 401,\n                errorCode: 'AUTHENTICATION_ERROR',\n                message: 'Invalid credentials',\n                category: 'client',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle AuthorizationError', () => {\n            const error = new Error('Access denied');\n            error.name = 'AuthorizationError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 403,\n                errorCode: 'AUTHORIZATION_ERROR',\n                message: 'Access denied',\n                category: 'client',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle NotFoundError', () => {\n            const error = new Error('Resource not found');\n            error.name = 'NotFoundError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 404,\n                errorCode: 'NOT_FOUND_ERROR',\n                message: 'Resource not found',\n                category: 'client',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle ConflictError', () => {\n            const error = new Error('Resource already exists');\n            error.name = 'ConflictError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 409,\n                errorCode: 'CONFLICT_ERROR',\n                message: 'Resource already exists',\n                category: 'client',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle RateLimitError', () => {\n            const error = new Error('Too many requests');\n            error.name = 'RateLimitError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 429,\n                errorCode: 'RATE_LIMIT_ERROR',\n                message: 'Too many requests',\n                category: 'client',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle DatabaseError', () => {\n            const error = new Error('Connection failed');\n            error.name = 'DatabaseError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 500,\n                errorCode: 'DATABASE_ERROR',\n                message: 'Database operation failed',\n                category: 'server',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle ExternalServiceError', () => {\n            const error = new Error('API timeout');\n            error.name = 'ExternalServiceError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 502,\n                errorCode: 'EXTERNAL_SERVICE_ERROR',\n                message: 'External service unavailable',\n                category: 'server',\n                isOperational: true,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle unknown errors safely', () => {\n            const error = new Error('Unknown error occurred');\n            error.name = 'WeirdError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result).toEqual({\n                statusCode: 500,\n                errorCode: 'INTERNAL_SERVER_ERROR',\n                message: 'An internal server error occurred',\n                category: 'server',\n                isOperational: false,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle errors with custom status codes', () => {\n            const error = new Error('Custom error');\n            error.statusCode = 418; // I'm a teapot\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.statusCode).toBe(418);\n            expect(result.errorCode).toBe('CUSTOM_ERROR');\n        });\n\n        test('should sanitize sensitive information', () => {\n            const error = new Error('Database connection failed: password=secret123');\n            error.name = 'DatabaseError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.message).toBe('Database operation failed');\n            expect(result.message).not.toContain('secret123');\n        });\n    });\n\n    describe('categorizeError method', () => {\n        test('should categorize client errors (4xx)', () => {\n            const clientErrorCodes = [400, 401, 403, 404, 409, 422, 429];\n\n            clientErrorCodes.forEach(statusCode => {\n                const error = new Error('Client error');\n                error.statusCode = statusCode;\n\n                const category = ErrorHandler.categorizeError(error);\n                expect(category).toBe('client');\n            });\n        });\n\n        test('should categorize server errors (5xx)', () => {\n            const serverErrorCodes = [500, 502, 503, 504];\n\n            serverErrorCodes.forEach(statusCode => {\n                const error = new Error('Server error');\n                error.statusCode = statusCode;\n\n                const category = ErrorHandler.categorizeError(error);\n                expect(category).toBe('server');\n            });\n        });\n\n        test('should categorize unknown status codes as server errors', () => {\n            const error = new Error('Unknown error');\n            error.statusCode = 999;\n\n            const category = ErrorHandler.categorizeError(error);\n            expect(category).toBe('server');\n        });\n\n        test('should handle errors without status codes', () => {\n            const error = new Error('Generic error');\n\n            const category = ErrorHandler.categorizeError(error);\n            expect(category).toBe('server');\n        });\n    });\n\n    describe('isOperationalError method', () => {\n        test('should identify operational errors', () => {\n            const operationalErrors = [\n                'ValidationError',\n                'AuthenticationError',\n                'AuthorizationError',\n                'NotFoundError',\n                'ConflictError',\n                'RateLimitError',\n                'DatabaseError',\n                'ExternalServiceError'\n            ];\n\n            operationalErrors.forEach(errorName => {\n                const error = new Error('Test error');\n                error.name = errorName;\n\n                const isOperational = ErrorHandler.isOperationalError(error);\n                expect(isOperational).toBe(true);\n            });\n        });\n\n        test('should identify non-operational errors', () => {\n            const nonOperationalErrors = [\n                'SyntaxError',\n                'ReferenceError',\n                'TypeError',\n                'UnknownError',\n                'WeirdError'\n            ];\n\n            nonOperationalErrors.forEach(errorName => {\n                const error = new Error('Test error');\n                error.name = errorName;\n\n                const isOperational = ErrorHandler.isOperationalError(error);\n                expect(isOperational).toBe(false);\n            });\n        });\n\n        test('should handle errors with isOperational property', () => {\n            const error = new Error('Custom operational error');\n            error.isOperational = true;\n\n            const isOperational = ErrorHandler.isOperationalError(error);\n            expect(isOperational).toBe(true);\n        });\n    });\n\n    describe('formatErrorForResponse method', () => {\n        test('should format error for development environment', () => {\n            process.env.NODE_ENV = 'development';\n            \n            const error = new Error('Detailed error message');\n            error.stack = 'Error stack trace...';\n\n            const formatted = ErrorHandler.formatErrorForResponse(error);\n\n            expect(formatted).toEqual({\n                success: false,\n                message: 'Detailed error message',\n                statusCode: 500,\n                errorCode: 'INTERNAL_SERVER_ERROR',\n                details: {\n                    stack: 'Error stack trace...',\n                    name: 'Error'\n                },\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should format error for production environment', () => {\n            process.env.NODE_ENV = 'production';\n            \n            const error = new Error('Detailed error message');\n            error.stack = 'Error stack trace...';\n\n            const formatted = ErrorHandler.formatErrorForResponse(error);\n\n            expect(formatted).toEqual({\n                success: false,\n                message: 'An internal server error occurred',\n                statusCode: 500,\n                errorCode: 'INTERNAL_SERVER_ERROR',\n                timestamp: expect.any(String)\n            });\n\n            expect(formatted.details).toBeUndefined();\n        });\n\n        test('should preserve client error messages in production', () => {\n            process.env.NODE_ENV = 'production';\n            \n            const error = new Error('Invalid email format');\n            error.name = 'ValidationError';\n            error.statusCode = 400;\n\n            const formatted = ErrorHandler.formatErrorForResponse(error);\n\n            expect(formatted.message).toBe('Invalid email format');\n        });\n    });\n\n    describe('logError method', () => {\n        // Mock the Logger to test error logging\n        const mockLogger = {\n            error: jest.fn(),\n            warn: jest.fn()\n        };\n\n        beforeEach(() => {\n            jest.clearAllMocks();\n            // Mock Logger.getInstance to return our mock\n            jest.doMock('../../utils/logger', () => ({\n                getInstance: () => mockLogger,\n                logError: mockLogger.error\n            }));\n        });\n\n        test('should log operational errors as warnings', () => {\n            const error = new Error('Validation failed');\n            error.name = 'ValidationError';\n\n            ErrorHandler.logError(error, { userId: 123 });\n\n            expect(mockLogger.error).toHaveBeenCalledWith(\n                'Operational error occurred',\n                expect.objectContaining({\n                    error: expect.objectContaining({\n                        message: 'Validation failed',\n                        name: 'ValidationError'\n                    }),\n                    context: { userId: 123 }\n                })\n            );\n        });\n\n        test('should log non-operational errors as errors', () => {\n            const error = new Error('Unexpected error');\n            error.name = 'TypeError';\n\n            ErrorHandler.logError(error);\n\n            expect(mockLogger.error).toHaveBeenCalledWith(\n                'Critical error occurred',\n                expect.objectContaining({\n                    error: expect.objectContaining({\n                        message: 'Unexpected error',\n                        name: 'TypeError'\n                    })\n                })\n            );\n        });\n    });\n\n    describe('Express middleware integration', () => {\n        test('should provide Express error middleware', () => {\n            const middleware = ErrorHandler.getExpressMiddleware();\n\n            expect(typeof middleware).toBe('function');\n            expect(middleware.length).toBe(4); // err, req, res, next\n        });\n\n        test('should handle errors via middleware', () => {\n            const middleware = ErrorHandler.getExpressMiddleware();\n            \n            const error = new Error('Test error');\n            const mockReq = { url: '/test', method: 'GET' };\n            const mockRes = {\n                status: jest.fn().mockReturnThis(),\n                json: jest.fn()\n            };\n            const mockNext = jest.fn();\n\n            middleware(error, mockReq, mockRes, mockNext);\n\n            expect(mockRes.status).toHaveBeenCalledWith(500);\n            expect(mockRes.json).toHaveBeenCalledWith(\n                expect.objectContaining({\n                    success: false,\n                    message: expect.any(String)\n                })\n            );\n        });\n\n        test('should handle validation errors with 400 status', () => {\n            const middleware = ErrorHandler.getExpressMiddleware();\n            \n            const error = new Error('Validation failed');\n            error.name = 'ValidationError';\n            \n            const mockReq = {};\n            const mockRes = {\n                status: jest.fn().mockReturnThis(),\n                json: jest.fn()\n            };\n            const mockNext = jest.fn();\n\n            middleware(error, mockReq, mockRes, mockNext);\n\n            expect(mockRes.status).toHaveBeenCalledWith(400);\n        });\n    });\n\n    describe('error recovery strategies', () => {\n        test('should suggest recovery for database errors', () => {\n            const error = new Error('Connection lost');\n            error.name = 'DatabaseError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.recovery).toEqual({\n                strategy: 'retry',\n                maxAttempts: 3,\n                backoffMs: 1000\n            });\n        });\n\n        test('should suggest recovery for external service errors', () => {\n            const error = new Error('Service timeout');\n            error.name = 'ExternalServiceError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.recovery).toEqual({\n                strategy: 'retry',\n                maxAttempts: 2,\n                backoffMs: 2000\n            });\n        });\n\n        test('should not suggest recovery for client errors', () => {\n            const error = new Error('Invalid input');\n            error.name = 'ValidationError';\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.recovery).toBeUndefined();\n        });\n    });\n\n    describe('edge cases and error conditions', () => {\n        test('should handle null error', () => {\n            const result = ErrorHandler.handleError(null);\n\n            expect(result).toEqual({\n                statusCode: 500,\n                errorCode: 'UNKNOWN_ERROR',\n                message: 'An unknown error occurred',\n                category: 'server',\n                isOperational: false,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle undefined error', () => {\n            const result = ErrorHandler.handleError(undefined);\n\n            expect(result.statusCode).toBe(500);\n            expect(result.errorCode).toBe('UNKNOWN_ERROR');\n        });\n\n        test('should handle string error', () => {\n            const result = ErrorHandler.handleError('String error message');\n\n            expect(result).toEqual({\n                statusCode: 500,\n                errorCode: 'INTERNAL_SERVER_ERROR',\n                message: 'String error message',\n                category: 'server',\n                isOperational: false,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle object error without message', () => {\n            const error = { code: 'CUSTOM_ERROR', data: 'some data' };\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.statusCode).toBe(500);\n            expect(result.message).toBe('An unknown error occurred');\n        });\n\n        test('should handle circular references in error object', () => {\n            const error = new Error('Circular error');\n            error.circular = error;\n\n            expect(() => ErrorHandler.handleError(error)).not.toThrow();\n        });\n\n        test('should handle very long error messages', () => {\n            const longMessage = 'x'.repeat(10000);\n            const error = new Error(longMessage);\n\n            const result = ErrorHandler.handleError(error);\n\n            expect(result.message.length).toBeLessThanOrEqual(1000); // Should be truncated\n        });\n    });\n\n    afterEach(() => {\n        // Reset NODE_ENV\n        delete process.env.NODE_ENV;\n    });\n});\n"],"mappings":"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","ignoreList":[]}