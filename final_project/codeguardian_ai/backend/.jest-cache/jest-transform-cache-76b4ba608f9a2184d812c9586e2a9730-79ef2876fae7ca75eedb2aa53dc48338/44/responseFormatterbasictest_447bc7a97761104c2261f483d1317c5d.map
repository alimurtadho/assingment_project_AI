{"version":3,"names":["ResponseFormatter","require","describe","test","data","id","name","result","success","expect","toEqual","message","timestamp","any","String","users","toBe","toBeNull","error","code","details","field","issue","pagination","page","limit","total","paginated","totalPages","toMatch","Date","not","toThrow"],"sources":["responseFormatter.basic.test.js"],"sourcesContent":["/**\n * Basic unit tests for ResponseFormatter utility\n * Tests the actual implementation that exists\n */\n\nconst ResponseFormatter = require('../../../utils/responseFormatter');\n\ndescribe('ResponseFormatter Utility - Basic Tests', () => {\n    describe('success method', () => {\n        test('should create success response with data and default message', () => {\n            const data = { id: 1, name: 'test' };\n            \n            const result = ResponseFormatter.success(data);\n            \n            expect(result).toEqual({\n                success: true,\n                message: 'Success',\n                data,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should create success response with data and custom message', () => {\n            const data = { users: [] };\n            const message = 'Users retrieved successfully';\n            \n            const result = ResponseFormatter.success(data, message);\n            \n            expect(result).toEqual({\n                success: true,\n                message,\n                data,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle null data', () => {\n            const result = ResponseFormatter.success(null);\n            \n            expect(result.success).toBe(true);\n            expect(result.data).toBeNull();\n            expect(result.message).toBe('Success');\n        });\n    });\n\n    describe('error method', () => {\n        test('should create error response with default parameters', () => {\n            const message = 'Something went wrong';\n            \n            const result = ResponseFormatter.error(message);\n            \n            expect(result).toEqual({\n                success: false,\n                message,\n                error: {\n                    code: 500,\n                    details: null\n                },\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should create error response with custom code and details', () => {\n            const message = 'Validation failed';\n            const code = 400;\n            const details = { field: 'email', issue: 'invalid format' };\n            \n            const result = ResponseFormatter.error(message, code, details);\n            \n            expect(result).toEqual({\n                success: false,\n                message,\n                error: {\n                    code,\n                    details\n                },\n                timestamp: expect.any(String)\n            });\n        });\n    });\n\n    describe('paginated method', () => {\n        test('should create paginated response', () => {\n            const data = [{ id: 1 }, { id: 2 }, { id: 3 }];\n            const pagination = {\n                page: 1,\n                limit: 10,\n                total: 25\n            };\n            \n            const result = ResponseFormatter.paginated(data, pagination);\n            \n            expect(result).toEqual({\n                success: true,\n                data,\n                pagination: {\n                    page: 1,\n                    limit: 10,\n                    total: 25,\n                    totalPages: 3\n                },\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should calculate totalPages correctly', () => {\n            const data = [];\n            const pagination = {\n                page: 1,\n                limit: 10,\n                total: 23 // Should result in 3 pages\n            };\n            \n            const result = ResponseFormatter.paginated(data, pagination);\n            \n            expect(result.pagination.totalPages).toBe(3);\n        });\n    });\n\n    describe('timestamp handling', () => {\n        test('should generate valid ISO timestamp', () => {\n            const result = ResponseFormatter.success({});\n            \n            expect(result.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n            expect(() => new Date(result.timestamp)).not.toThrow();\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}