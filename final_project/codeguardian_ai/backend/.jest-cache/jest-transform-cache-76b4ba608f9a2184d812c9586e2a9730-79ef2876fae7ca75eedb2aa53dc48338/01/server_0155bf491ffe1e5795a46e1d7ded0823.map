{"version":3,"names":["express","require","cors","helmet","compression","rateLimit","morgan","path","ResponseFormatter","ValidationUtils","Logger","ErrorHandler","securityRoutes","aiReviewRoutes","testGenerationRoutes","authRoutes","projectRoutes","PrismaClient","prisma","CodeGuardianServer","constructor","app","port","process","env","PORT","initializeMiddleware","initializeRoutes","initializeErrorHandling","use","contentSecurityPolicy","directives","defaultSrc","styleSrc","scriptSrc","imgSrc","crossOriginEmbedderPolicy","origin","NODE_ENV","credentials","methods","allowedHeaders","limiter","windowMs","max","message","error","standardHeaders","legacyHeaders","skip","req","stream","write","info","trim","json","limit","verify","res","buf","JSON","parse","e","createError","urlencoded","extended","next","requestId","Date","now","Math","random","toString","substr","setHeader","method","ip","userAgent","headers","startTime","static","join","__dirname","get","health","status","timestamp","toISOString","version","environment","uptime","services","database","ai","OPENAI_API_KEY","features","securityScanning","aiReview","testGeneration","batchProcessing","realTimeAnalysis","success","apiDocs","title","description","baseUrl","protocol","endpoints","security","auth","projects","enhancedAnalysis","multipleTestTypes","realTimeReports","sendFile","warn","availableEndpoints","processingTime","stack","statusCode","details","name","code","on","gracefulShutdown","reason","promise","start","testDatabaseConnection","server","listen","exit","$connect","signal","close","$disconnect","setTimeout","main","module","catch","exports"],"sources":["server.js"],"sourcesContent":["/**\n * Enhanced CodeGuardian AI Server\n * Refactored with improved architecture, error handling, and utility integration\n */\n\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst rateLimit = require('express-rate-limit');\nconst morgan = require('morgan');\nconst path = require('path');\n\n// Import enhanced utilities\nconst ResponseFormatter = require('./utils/responseFormatter');\nconst ValidationUtils = require('./utils/validationUtils');\nconst Logger = require('./utils/logger');\nconst ErrorHandler = require('./utils/errorHandler');\n\n// Import refactored route handlers\nconst securityRoutes = require('./routes/security.refactored');\nconst aiReviewRoutes = require('./routes/ai-review.refactored');\nconst testGenerationRoutes = require('./routes/test-generation.refactored');\n\n// Import original routes (will be gradually migrated)\nconst authRoutes = require('./routes/auth');\nconst projectRoutes = require('./routes/projects');\n\n// Database connection\nconst { PrismaClient } = require('@prisma/client');\nconst prisma = new PrismaClient();\n\nclass CodeGuardianServer {\n  constructor() {\n    this.app = express();\n    this.port = process.env.PORT || 3001;\n    this.initializeMiddleware();\n    this.initializeRoutes();\n    this.initializeErrorHandling();\n  }\n\n  /**\n   * Initialize enhanced middleware stack\n   */\n  initializeMiddleware() {\n    // Security middleware\n    this.app.use(helmet({\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n          scriptSrc: [\"'self'\"],\n          imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        },\n      },\n      crossOriginEmbedderPolicy: false\n    }));\n\n    // CORS configuration\n    this.app.use(cors({\n      origin: process.env.NODE_ENV === 'production' \n        ? ['https://your-production-domain.com']\n        : ['http://localhost:3000', 'http://localhost:5173'],\n      credentials: true,\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n    }));\n\n    // Compression middleware\n    this.app.use(compression());\n\n    // Rate limiting\n    const limiter = rateLimit({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 100, // Limit each IP to 100 requests per windowMs\n      message: ResponseFormatter.error('Too many requests, please try again later.', 429),\n      standardHeaders: true,\n      legacyHeaders: false,\n      skip: (req) => {\n        // Skip rate limiting for health checks\n        return req.path === '/api/health';\n      }\n    });\n    this.app.use('/api/', limiter);\n\n    // Enhanced request logging with Winston\n    this.app.use(morgan('combined', {\n      stream: {\n        write: (message) => Logger.info(message.trim())\n      }\n    }));\n\n    // Body parsing middleware\n    this.app.use(express.json({ \n      limit: '50mb',\n      verify: (req, res, buf) => {\n        try {\n          JSON.parse(buf);\n        } catch (e) {\n          throw ErrorHandler.createError('INVALID_JSON', 'Invalid JSON in request body', 400);\n        }\n      }\n    }));\n    this.app.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\n    // Request ID middleware for tracking\n    this.app.use((req, res, next) => {\n      req.requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      res.setHeader('X-Request-ID', req.requestId);\n      next();\n    });\n\n    // Request validation middleware\n    this.app.use((req, res, next) => {\n      // Log incoming requests\n      Logger.info('Incoming request', {\n        requestId: req.requestId,\n        method: req.method,\n        path: req.path,\n        ip: req.ip,\n        userAgent: req.headers['user-agent']\n      });\n\n      // Add request start time for performance tracking\n      req.startTime = Date.now();\n      next();\n    });\n\n    // Serve static files (for production builds)\n    if (process.env.NODE_ENV === 'production') {\n      this.app.use(express.static(path.join(__dirname, '../frontend/build')));\n    }\n  }\n\n  /**\n   * Initialize enhanced API routes\n   */\n  initializeRoutes() {\n    // Health check endpoint\n    this.app.get('/api/health', (req, res) => {\n      const health = {\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        version: '2.0.0',\n        environment: process.env.NODE_ENV || 'development',\n        uptime: process.uptime(),\n        services: {\n          database: 'connected', // This could be dynamic based on actual DB connection\n          ai: process.env.OPENAI_API_KEY ? 'configured' : 'not-configured'\n        },\n        features: {\n          securityScanning: 'enhanced',\n          aiReview: 'enhanced',\n          testGeneration: 'enhanced',\n          batchProcessing: 'enabled',\n          realTimeAnalysis: 'enabled'\n        }\n      };\n\n      res.json(ResponseFormatter.success(health, 'Service is healthy'));\n    });\n\n    // API route groups with enhanced handlers\n    this.app.use('/api/security', securityRoutes);\n    this.app.use('/api/ai-review', aiReviewRoutes);\n    this.app.use('/api/test-generation', testGenerationRoutes);\n\n    // Original routes (to be gradually migrated)\n    this.app.use('/api/auth', authRoutes);\n    this.app.use('/api/projects', projectRoutes);\n\n    // API documentation endpoint\n    this.app.get('/api/docs', (req, res) => {\n      const apiDocs = {\n        title: 'CodeGuardian AI API Documentation',\n        version: '2.0.0',\n        description: 'Enhanced DevSecOps platform with AI-powered code analysis',\n        baseUrl: `${req.protocol}://${req.get('host')}/api`,\n        endpoints: {\n          security: {\n            path: '/security',\n            methods: ['POST /scan', 'POST /batch-scan', 'GET /patterns', 'GET /health'],\n            description: 'Security vulnerability scanning with enhanced detection'\n          },\n          aiReview: {\n            path: '/ai-review',\n            methods: ['POST /analyze', 'POST /batch-analyze', 'POST /refactor', 'POST /security-analysis', 'POST /performance-analysis'],\n            description: 'AI-powered code review with multiple analysis types'\n          },\n          testGeneration: {\n            path: '/test-generation',\n            methods: ['POST /generate', 'POST /batch-generate', 'POST /unit-tests', 'POST /integration-tests', 'POST /e2e-tests'],\n            description: 'AI-powered test generation for multiple test types'\n          },\n          auth: {\n            path: '/auth',\n            methods: ['POST /login', 'POST /register', 'POST /logout'],\n            description: 'User authentication and authorization'\n          },\n          projects: {\n            path: '/projects',\n            methods: ['GET /', 'POST /', 'GET /:id', 'PUT /:id', 'DELETE /:id'],\n            description: 'Project management and history'\n          }\n        },\n        features: {\n          batchProcessing: 'Process multiple files simultaneously',\n          enhancedAnalysis: 'Comprehensive code analysis with AI insights',\n          multipleTestTypes: 'Generate unit, integration, E2E, performance, and security tests',\n          securityScanning: 'Advanced vulnerability detection with CWE mapping',\n          realTimeReports: 'Instant analysis results with detailed recommendations'\n        }\n      };\n\n      res.json(ResponseFormatter.success(apiDocs, 'API documentation retrieved'));\n    });\n\n    // Catch-all for React app (production)\n    if (process.env.NODE_ENV === 'production') {\n      this.app.get('*', (req, res) => {\n        res.sendFile(path.join(__dirname, '../frontend/build/index.html'));\n      });\n    }\n\n    // 404 handler for API routes\n    this.app.use('/api/*', (req, res) => {\n      Logger.warn('API endpoint not found', {\n        requestId: req.requestId,\n        method: req.method,\n        path: req.path,\n        ip: req.ip\n      });\n\n      res.status(404).json(\n        ResponseFormatter.error(`API endpoint not found: ${req.method} ${req.path}`, 404, {\n          availableEndpoints: [\n            '/api/health',\n            '/api/docs',\n            '/api/security/*',\n            '/api/ai-review/*',\n            '/api/test-generation/*',\n            '/api/auth/*',\n            '/api/projects/*'\n          ]\n        })\n      );\n    });\n  }\n\n  /**\n   * Initialize enhanced error handling\n   */\n  initializeErrorHandling() {\n    // Global error handler\n    this.app.use((error, req, res, next) => {\n      const requestId = req.requestId || 'unknown';\n      const processingTime = req.startTime ? Date.now() - req.startTime : 0;\n\n      // Log the error\n      Logger.error('Request error', {\n        requestId,\n        error: error.message,\n        stack: error.stack,\n        method: req.method,\n        path: req.path,\n        ip: req.ip,\n        processingTime\n      });\n\n      // Handle different types of errors\n      let statusCode = error.statusCode || error.status || 500;\n      let message = error.message || 'Internal server error';\n      let details = null;\n\n      // Handle specific error types\n      if (error.name === 'ValidationError') {\n        statusCode = 400;\n        message = 'Validation failed';\n        details = error.details;\n      } else if (error.name === 'UnauthorizedError') {\n        statusCode = 401;\n        message = 'Unauthorized access';\n      } else if (error.code === 'ENOENT') {\n        statusCode = 404;\n        message = 'Resource not found';\n      } else if (error.code === 'ECONNREFUSED') {\n        statusCode = 503;\n        message = 'Service temporarily unavailable';\n      }\n\n      // Don't expose internal errors in production\n      if (process.env.NODE_ENV === 'production' && statusCode === 500) {\n        message = 'Internal server error';\n        details = null;\n      }\n\n      // Send error response\n      res.status(statusCode).json(\n        ResponseFormatter.error(message, statusCode, details, {\n          requestId,\n          timestamp: new Date().toISOString(),\n          processingTime\n        })\n      );\n    });\n\n    // Handle uncaught exceptions\n    process.on('uncaughtException', (error) => {\n      Logger.error('Uncaught exception', {\n        error: error.message,\n        stack: error.stack\n      });\n      \n      // Graceful shutdown\n      this.gracefulShutdown('uncaughtException');\n    });\n\n    // Handle unhandled promise rejections\n    process.on('unhandledRejection', (reason, promise) => {\n      Logger.error('Unhandled promise rejection', {\n        reason: reason?.toString(),\n        promise: promise?.toString()\n      });\n      \n      // Graceful shutdown\n      this.gracefulShutdown('unhandledRejection');\n    });\n\n    // Handle SIGTERM\n    process.on('SIGTERM', () => {\n      Logger.info('SIGTERM received, starting graceful shutdown');\n      this.gracefulShutdown('SIGTERM');\n    });\n\n    // Handle SIGINT\n    process.on('SIGINT', () => {\n      Logger.info('SIGINT received, starting graceful shutdown');\n      this.gracefulShutdown('SIGINT');\n    });\n  }\n\n  /**\n   * Start the server\n   */\n  async start() {\n    try {\n      // Test database connection\n      await this.testDatabaseConnection();\n\n      // Start the server\n      this.server = this.app.listen(this.port, () => {\n        Logger.info('CodeGuardian AI Server started', {\n          port: this.port,\n          environment: process.env.NODE_ENV || 'development',\n          version: '2.0.0',\n          features: ['Enhanced Security Scanning', 'AI Code Review', 'Test Generation', 'Batch Processing'],\n          timestamp: new Date().toISOString()\n        });\n      });\n\n      return this.server;\n    } catch (error) {\n      Logger.error('Failed to start server', error);\n      process.exit(1);\n    }\n  }\n\n  /**\n   * Test database connection\n   */\n  async testDatabaseConnection() {\n    try {\n      await prisma.$connect();\n      Logger.info('Database connection established');\n    } catch (error) {\n      Logger.error('Database connection failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async gracefulShutdown(signal) {\n    Logger.info('Starting graceful shutdown', { signal });\n\n    // Stop accepting new requests\n    if (this.server) {\n      this.server.close(() => {\n        Logger.info('HTTP server closed');\n      });\n    }\n\n    // Close database connection\n    try {\n      await prisma.$disconnect();\n      Logger.info('Database connection closed');\n    } catch (error) {\n      Logger.error('Error closing database connection', error);\n    }\n\n    // Exit process\n    setTimeout(() => {\n      Logger.error('Forceful shutdown');\n      process.exit(1);\n    }, 10000);\n\n    Logger.info('Graceful shutdown completed');\n    process.exit(0);\n  }\n}\n\n// Create and start server\nconst server = new CodeGuardianServer();\n\n// Start server if this file is run directly\nif (require.main === module) {\n  server.start().catch((error) => {\n    Logger.error('Failed to start server', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = server;\n"],"mappings":"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","ignoreList":[]}