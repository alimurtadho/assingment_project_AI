1fd6a0b2e8237f51f4992a22b0c578c8
/* istanbul ignore next */
function cov_f0x49w9iw() {
  var path = "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/services/testGenerator.refactored.js";
  var hash = "af4ee8346c649035c56e470aa9e817ac416ed215";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/services/testGenerator.refactored.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "1": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 63
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 59
        }
      },
      "3": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 41
        }
      },
      "4": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 53
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 25
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 43
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "8": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "10": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "11": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 94,
          column: 6
        }
      },
      "12": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "13": {
        start: {
          line: 102,
          column: 6
        },
        end: {
          line: 104,
          column: 7
        }
      },
      "14": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 75
        }
      },
      "15": {
        start: {
          line: 106,
          column: 6
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "16": {
        start: {
          line: 110,
          column: 6
        },
        end: {
          line: 110,
          column: 72
        }
      },
      "17": {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 112,
          column: 89
        }
      },
      "18": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 113,
          column: 102
        }
      },
      "19": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 376,
          column: 6
        }
      },
      "20": {
        start: {
          line: 383,
          column: 21
        },
        end: {
          line: 383,
          column: 48
        }
      },
      "21": {
        start: {
          line: 384,
          column: 22
        },
        end: {
          line: 384,
          column: 32
        }
      },
      "22": {
        start: {
          line: 386,
          column: 4
        },
        end: {
          line: 441,
          column: 5
        }
      },
      "23": {
        start: {
          line: 387,
          column: 6
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "24": {
        start: {
          line: 394,
          column: 6
        },
        end: {
          line: 394,
          column: 60
        }
      },
      "25": {
        start: {
          line: 397,
          column: 27
        },
        end: {
          line: 397,
          column: 58
        }
      },
      "26": {
        start: {
          line: 400,
          column: 21
        },
        end: {
          line: 400,
          column: 79
        }
      },
      "27": {
        start: {
          line: 403,
          column: 25
        },
        end: {
          line: 403,
          column: 70
        }
      },
      "28": {
        start: {
          line: 406,
          column: 31
        },
        end: {
          line: 406,
          column: 89
        }
      },
      "29": {
        start: {
          line: 409,
          column: 21
        },
        end: {
          line: 419,
          column: 7
        }
      },
      "30": {
        start: {
          line: 421,
          column: 6
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "31": {
        start: {
          line: 427,
          column: 6
        },
        end: {
          line: 427,
          column: 94
        }
      },
      "32": {
        start: {
          line: 430,
          column: 6
        },
        end: {
          line: 430,
          column: 86
        }
      },
      "33": {
        start: {
          line: 432,
          column: 6
        },
        end: {
          line: 434,
          column: 7
        }
      },
      "34": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 91
        }
      },
      "35": {
        start: {
          line: 436,
          column: 6
        },
        end: {
          line: 440,
          column: 8
        }
      },
      "36": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 450,
          column: 5
        }
      },
      "37": {
        start: {
          line: 449,
          column: 6
        },
        end: {
          line: 449,
          column: 53
        }
      },
      "38": {
        start: {
          line: 452,
          column: 4
        },
        end: {
          line: 454,
          column: 5
        }
      },
      "39": {
        start: {
          line: 453,
          column: 6
        },
        end: {
          line: 453,
          column: 60
        }
      },
      "40": {
        start: {
          line: 456,
          column: 4
        },
        end: {
          line: 458,
          column: 5
        }
      },
      "41": {
        start: {
          line: 457,
          column: 6
        },
        end: {
          line: 457,
          column: 100
        }
      },
      "42": {
        start: {
          line: 465,
          column: 21
        },
        end: {
          line: 472,
          column: 5
        }
      },
      "43": {
        start: {
          line: 474,
          column: 4
        },
        end: {
          line: 474,
          column: 59
        }
      },
      "44": {
        start: {
          line: 475,
          column: 4
        },
        end: {
          line: 475,
          column: 20
        }
      },
      "45": {
        start: {
          line: 483,
          column: 4
        },
        end: {
          line: 483,
          column: 75
        }
      },
      "46": {
        start: {
          line: 483,
          column: 59
        },
        end: {
          line: 483,
          column: 75
        }
      },
      "47": {
        start: {
          line: 484,
          column: 4
        },
        end: {
          line: 484,
          column: 108
        }
      },
      "48": {
        start: {
          line: 484,
          column: 88
        },
        end: {
          line: 484,
          column: 108
        }
      },
      "49": {
        start: {
          line: 485,
          column: 4
        },
        end: {
          line: 485,
          column: 75
        }
      },
      "50": {
        start: {
          line: 485,
          column: 61
        },
        end: {
          line: 485,
          column: 75
        }
      },
      "51": {
        start: {
          line: 486,
          column: 4
        },
        end: {
          line: 486,
          column: 77
        }
      },
      "52": {
        start: {
          line: 486,
          column: 64
        },
        end: {
          line: 486,
          column: 77
        }
      },
      "53": {
        start: {
          line: 487,
          column: 4
        },
        end: {
          line: 487,
          column: 73
        }
      },
      "54": {
        start: {
          line: 487,
          column: 61
        },
        end: {
          line: 487,
          column: 73
        }
      },
      "55": {
        start: {
          line: 489,
          column: 4
        },
        end: {
          line: 489,
          column: 24
        }
      },
      "56": {
        start: {
          line: 496,
          column: 17
        },
        end: {
          line: 496,
          column: 39
        }
      },
      "57": {
        start: {
          line: 498,
          column: 4
        },
        end: {
          line: 503,
          column: 5
        }
      },
      "58": {
        start: {
          line: 499,
          column: 6
        },
        end: {
          line: 499,
          column: 81
        }
      },
      "59": {
        start: {
          line: 499,
          column: 67
        },
        end: {
          line: 499,
          column: 81
        }
      },
      "60": {
        start: {
          line: 500,
          column: 6
        },
        end: {
          line: 500,
          column: 74
        }
      },
      "61": {
        start: {
          line: 500,
          column: 59
        },
        end: {
          line: 500,
          column: 74
        }
      },
      "62": {
        start: {
          line: 501,
          column: 6
        },
        end: {
          line: 501,
          column: 51
        }
      },
      "63": {
        start: {
          line: 501,
          column: 35
        },
        end: {
          line: 501,
          column: 51
        }
      },
      "64": {
        start: {
          line: 502,
          column: 6
        },
        end: {
          line: 502,
          column: 20
        }
      },
      "65": {
        start: {
          line: 505,
          column: 4
        },
        end: {
          line: 509,
          column: 5
        }
      },
      "66": {
        start: {
          line: 506,
          column: 6
        },
        end: {
          line: 506,
          column: 51
        }
      },
      "67": {
        start: {
          line: 506,
          column: 35
        },
        end: {
          line: 506,
          column: 51
        }
      },
      "68": {
        start: {
          line: 507,
          column: 6
        },
        end: {
          line: 507,
          column: 55
        }
      },
      "69": {
        start: {
          line: 507,
          column: 37
        },
        end: {
          line: 507,
          column: 55
        }
      },
      "70": {
        start: {
          line: 508,
          column: 6
        },
        end: {
          line: 508,
          column: 22
        }
      },
      "71": {
        start: {
          line: 511,
          column: 4
        },
        end: {
          line: 511,
          column: 18
        }
      },
      "72": {
        start: {
          line: 518,
          column: 21
        },
        end: {
          line: 529,
          column: 5
        }
      },
      "73": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 531,
          column: 20
        }
      },
      "74": {
        start: {
          line: 538,
          column: 18
        },
        end: {
          line: 538,
          column: 73
        }
      },
      "75": {
        start: {
          line: 538,
          column: 50
        },
        end: {
          line: 538,
          column: 72
        }
      },
      "76": {
        start: {
          line: 539,
          column: 23
        },
        end: {
          line: 545,
          column: 5
        }
      },
      "77": {
        start: {
          line: 547,
          column: 4
        },
        end: {
          line: 549,
          column: 7
        }
      },
      "78": {
        start: {
          line: 551,
          column: 4
        },
        end: {
          line: 551,
          column: 22
        }
      },
      "79": {
        start: {
          line: 558,
          column: 26
        },
        end: {
          line: 558,
          column: 85
        }
      },
      "80": {
        start: {
          line: 559,
          column: 22
        },
        end: {
          line: 559,
          column: 24
        }
      },
      "81": {
        start: {
          line: 562,
          column: 4
        },
        end: {
          line: 568,
          column: 5
        }
      },
      "82": {
        start: {
          line: 563,
          column: 6
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "83": {
        start: {
          line: 570,
          column: 4
        },
        end: {
          line: 570,
          column: 21
        }
      },
      "84": {
        start: {
          line: 577,
          column: 23
        },
        end: {
          line: 577,
          column: 39
        }
      },
      "85": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 578,
          column: 22
        }
      },
      "86": {
        start: {
          line: 581,
          column: 4
        },
        end: {
          line: 586,
          column: 5
        }
      },
      "87": {
        start: {
          line: 582,
          column: 6
        },
        end: {
          line: 585,
          column: 9
        }
      },
      "88": {
        start: {
          line: 588,
          column: 4
        },
        end: {
          line: 588,
          column: 19
        }
      },
      "89": {
        start: {
          line: 595,
          column: 4
        },
        end: {
          line: 595,
          column: 55
        }
      },
      "90": {
        start: {
          line: 602,
          column: 27
        },
        end: {
          line: 602,
          column: 49
        }
      },
      "91": {
        start: {
          line: 605,
          column: 22
        },
        end: {
          line: 605,
          column: 72
        }
      },
      "92": {
        start: {
          line: 606,
          column: 4
        },
        end: {
          line: 606,
          column: 65
        }
      },
      "93": {
        start: {
          line: 607,
          column: 4
        },
        end: {
          line: 607,
          column: 76
        }
      },
      "94": {
        start: {
          line: 609,
          column: 4
        },
        end: {
          line: 611,
          column: 5
        }
      },
      "95": {
        start: {
          line: 610,
          column: 6
        },
        end: {
          line: 610,
          column: 96
        }
      },
      "96": {
        start: {
          line: 610,
          column: 73
        },
        end: {
          line: 610,
          column: 79
        }
      },
      "97": {
        start: {
          line: 613,
          column: 4
        },
        end: {
          line: 615,
          column: 5
        }
      },
      "98": {
        start: {
          line: 614,
          column: 6
        },
        end: {
          line: 614,
          column: 92
        }
      },
      "99": {
        start: {
          line: 614,
          column: 69
        },
        end: {
          line: 614,
          column: 75
        }
      },
      "100": {
        start: {
          line: 618,
          column: 29
        },
        end: {
          line: 620,
          column: 26
        }
      },
      "101": {
        start: {
          line: 619,
          column: 29
        },
        end: {
          line: 619,
          column: 34
        }
      },
      "102": {
        start: {
          line: 620,
          column: 22
        },
        end: {
          line: 620,
          column: 25
        }
      },
      "103": {
        start: {
          line: 622,
          column: 4
        },
        end: {
          line: 624,
          column: 5
        }
      },
      "104": {
        start: {
          line: 623,
          column: 6
        },
        end: {
          line: 623,
          column: 75
        }
      },
      "105": {
        start: {
          line: 626,
          column: 23
        },
        end: {
          line: 628,
          column: 51
        }
      },
      "106": {
        start: {
          line: 630,
          column: 4
        },
        end: {
          line: 639,
          column: 6
        }
      },
      "107": {
        start: {
          line: 648,
          column: 4
        },
        end: {
          line: 674,
          column: 5
        }
      },
      "108": {
        start: {
          line: 648,
          column: 23
        },
        end: {
          line: 648,
          column: 24
        }
      },
      "109": {
        start: {
          line: 649,
          column: 6
        },
        end: {
          line: 673,
          column: 7
        }
      },
      "110": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 650,
          column: 93
        }
      },
      "111": {
        start: {
          line: 652,
          column: 25
        },
        end: {
          line: 658,
          column: 10
        }
      },
      "112": {
        start: {
          line: 660,
          column: 8
        },
        end: {
          line: 662,
          column: 9
        }
      },
      "113": {
        start: {
          line: 661,
          column: 10
        },
        end: {
          line: 661,
          column: 60
        }
      },
      "114": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 664,
          column: 51
        }
      },
      "115": {
        start: {
          line: 667,
          column: 8
        },
        end: {
          line: 667,
          column: 26
        }
      },
      "116": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 668,
          column: 96
        }
      },
      "117": {
        start: {
          line: 670,
          column: 8
        },
        end: {
          line: 672,
          column: 9
        }
      },
      "118": {
        start: {
          line: 671,
          column: 10
        },
        end: {
          line: 671,
          column: 61
        }
      },
      "119": {
        start: {
          line: 676,
          column: 4
        },
        end: {
          line: 676,
          column: 20
        }
      },
      "120": {
        start: {
          line: 683,
          column: 4
        },
        end: {
          line: 695,
          column: 5
        }
      },
      "121": {
        start: {
          line: 684,
          column: 21
        },
        end: {
          line: 684,
          column: 41
        }
      },
      "122": {
        start: {
          line: 687,
          column: 6
        },
        end: {
          line: 687,
          column: 56
        }
      },
      "123": {
        start: {
          line: 690,
          column: 6
        },
        end: {
          line: 690,
          column: 62
        }
      },
      "124": {
        start: {
          line: 693,
          column: 6
        },
        end: {
          line: 693,
          column: 96
        }
      },
      "125": {
        start: {
          line: 694,
          column: 6
        },
        end: {
          line: 694,
          column: 70
        }
      },
      "126": {
        start: {
          line: 702,
          column: 27
        },
        end: {
          line: 708,
          column: 5
        }
      },
      "127": {
        start: {
          line: 710,
          column: 21
        },
        end: {
          line: 710,
          column: 73
        }
      },
      "128": {
        start: {
          line: 712,
          column: 4
        },
        end: {
          line: 716,
          column: 5
        }
      },
      "129": {
        start: {
          line: 713,
          column: 6
        },
        end: {
          line: 715,
          column: 7
        }
      },
      "130": {
        start: {
          line: 714,
          column: 8
        },
        end: {
          line: 714,
          column: 60
        }
      },
      "131": {
        start: {
          line: 724,
          column: 27
        },
        end: {
          line: 724,
          column: 59
        }
      },
      "132": {
        start: {
          line: 725,
          column: 4
        },
        end: {
          line: 730,
          column: 5
        }
      },
      "133": {
        start: {
          line: 726,
          column: 6
        },
        end: {
          line: 729,
          column: 10
        }
      },
      "134": {
        start: {
          line: 726,
          column: 80
        },
        end: {
          line: 729,
          column: 7
        }
      },
      "135": {
        start: {
          line: 733,
          column: 4
        },
        end: {
          line: 733,
          column: 75
        }
      },
      "136": {
        start: {
          line: 736,
          column: 4
        },
        end: {
          line: 736,
          column: 79
        }
      },
      "137": {
        start: {
          line: 738,
          column: 4
        },
        end: {
          line: 738,
          column: 20
        }
      },
      "138": {
        start: {
          line: 745,
          column: 21
        },
        end: {
          line: 751,
          column: 5
        }
      },
      "139": {
        start: {
          line: 753,
          column: 4
        },
        end: {
          line: 753,
          column: 45
        }
      },
      "140": {
        start: {
          line: 760,
          column: 27
        },
        end: {
          line: 760,
          column: 59
        }
      },
      "141": {
        start: {
          line: 761,
          column: 18
        },
        end: {
          line: 761,
          column: 48
        }
      },
      "142": {
        start: {
          line: 763,
          column: 18
        },
        end: {
          line: 767,
          column: 5
        }
      },
      "143": {
        start: {
          line: 769,
          column: 4
        },
        end: {
          line: 776,
          column: 7
        }
      },
      "144": {
        start: {
          line: 770,
          column: 6
        },
        end: {
          line: 772,
          column: 7
        }
      },
      "145": {
        start: {
          line: 771,
          column: 8
        },
        end: {
          line: 771,
          column: 69
        }
      },
      "146": {
        start: {
          line: 773,
          column: 6
        },
        end: {
          line: 775,
          column: 7
        }
      },
      "147": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 774,
          column: 85
        }
      },
      "148": {
        start: {
          line: 778,
          column: 4
        },
        end: {
          line: 778,
          column: 17
        }
      },
      "149": {
        start: {
          line: 785,
          column: 27
        },
        end: {
          line: 785,
          column: 59
        }
      },
      "150": {
        start: {
          line: 786,
          column: 18
        },
        end: {
          line: 786,
          column: 48
        }
      },
      "151": {
        start: {
          line: 788,
          column: 20
        },
        end: {
          line: 793,
          column: 5
        }
      },
      "152": {
        start: {
          line: 795,
          column: 4
        },
        end: {
          line: 795,
          column: 43
        }
      },
      "153": {
        start: {
          line: 795,
          column: 28
        },
        end: {
          line: 795,
          column: 43
        }
      },
      "154": {
        start: {
          line: 798,
          column: 22
        },
        end: {
          line: 798,
          column: 69
        }
      },
      "155": {
        start: {
          line: 798,
          column: 45
        },
        end: {
          line: 798,
          column: 51
        }
      },
      "156": {
        start: {
          line: 799,
          column: 4
        },
        end: {
          line: 799,
          column: 69
        }
      },
      "157": {
        start: {
          line: 802,
          column: 4
        },
        end: {
          line: 804,
          column: 5
        }
      },
      "158": {
        start: {
          line: 803,
          column: 6
        },
        end: {
          line: 803,
          column: 63
        }
      },
      "159": {
        start: {
          line: 807,
          column: 28
        },
        end: {
          line: 807,
          column: 67
        }
      },
      "160": {
        start: {
          line: 807,
          column: 46
        },
        end: {
          line: 807,
          column: 59
        }
      },
      "161": {
        start: {
          line: 808,
          column: 4
        },
        end: {
          line: 808,
          column: 81
        }
      },
      "162": {
        start: {
          line: 811,
          column: 26
        },
        end: {
          line: 811,
          column: 76
        }
      },
      "163": {
        start: {
          line: 811,
          column: 44
        },
        end: {
          line: 811,
          column: 68
        }
      },
      "164": {
        start: {
          line: 812,
          column: 4
        },
        end: {
          line: 812,
          column: 75
        }
      },
      "165": {
        start: {
          line: 814,
          column: 4
        },
        end: {
          line: 814,
          column: 19
        }
      },
      "166": {
        start: {
          line: 821,
          column: 4
        },
        end: {
          line: 821,
          column: 59
        }
      },
      "167": {
        start: {
          line: 821,
          column: 34
        },
        end: {
          line: 821,
          column: 57
        }
      },
      "168": {
        start: {
          line: 828,
          column: 20
        },
        end: {
          line: 828,
          column: 22
        }
      },
      "169": {
        start: {
          line: 829,
          column: 27
        },
        end: {
          line: 829,
          column: 37
        }
      },
      "170": {
        start: {
          line: 831,
          column: 4
        },
        end: {
          line: 831,
          column: 84
        }
      },
      "171": {
        start: {
          line: 833,
          column: 4
        },
        end: {
          line: 854,
          column: 5
        }
      },
      "172": {
        start: {
          line: 834,
          column: 6
        },
        end: {
          line: 853,
          column: 7
        }
      },
      "173": {
        start: {
          line: 835,
          column: 8
        },
        end: {
          line: 835,
          column: 99
        }
      },
      "174": {
        start: {
          line: 837,
          column: 23
        },
        end: {
          line: 840,
          column: 10
        }
      },
      "175": {
        start: {
          line: 842,
          column: 8
        },
        end: {
          line: 845,
          column: 11
        }
      },
      "176": {
        start: {
          line: 848,
          column: 8
        },
        end: {
          line: 848,
          column: 84
        }
      },
      "177": {
        start: {
          line: 849,
          column: 8
        },
        end: {
          line: 852,
          column: 11
        }
      },
      "178": {
        start: {
          line: 856,
          column: 24
        },
        end: {
          line: 864,
          column: 5
        }
      },
      "179": {
        start: {
          line: 860,
          column: 51
        },
        end: {
          line: 860,
          column: 59
        }
      },
      "180": {
        start: {
          line: 861,
          column: 47
        },
        end: {
          line: 861,
          column: 54
        }
      },
      "181": {
        start: {
          line: 866,
          column: 4
        },
        end: {
          line: 866,
          column: 77
        }
      },
      "182": {
        start: {
          line: 868,
          column: 4
        },
        end: {
          line: 868,
          column: 90
        }
      },
      "183": {
        start: {
          line: 875,
          column: 4
        },
        end: {
          line: 875,
          column: 89
        }
      },
      "184": {
        start: {
          line: 882,
          column: 23
        },
        end: {
          line: 882,
          column: 60
        }
      },
      "185": {
        start: {
          line: 883,
          column: 4
        },
        end: {
          line: 883,
          column: 75
        }
      },
      "186": {
        start: {
          line: 887,
          column: 0
        },
        end: {
          line: 887,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 13,
            column: 3
          }
        },
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 95,
            column: 3
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 100,
            column: 2
          },
          end: {
            line: 100,
            column: 3
          }
        },
        loc: {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 115,
            column: 3
          }
        },
        line: 100
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 3
          }
        },
        loc: {
          start: {
            line: 120,
            column: 22
          },
          end: {
            line: 377,
            column: 3
          }
        },
        line: 120
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 382,
            column: 2
          },
          end: {
            line: 382,
            column: 3
          }
        },
        loc: {
          start: {
            line: 382,
            column: 37
          },
          end: {
            line: 442,
            column: 3
          }
        },
        line: 382
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 447,
            column: 2
          },
          end: {
            line: 447,
            column: 3
          }
        },
        loc: {
          start: {
            line: 447,
            column: 51
          },
          end: {
            line: 459,
            column: 3
          }
        },
        line: 447
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 464,
            column: 2
          },
          end: {
            line: 464,
            column: 3
          }
        },
        loc: {
          start: {
            line: 464,
            column: 29
          },
          end: {
            line: 476,
            column: 3
          }
        },
        line: 464
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 481,
            column: 2
          },
          end: {
            line: 481,
            column: 3
          }
        },
        loc: {
          start: {
            line: 481,
            column: 23
          },
          end: {
            line: 490,
            column: 3
          }
        },
        line: 481
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 495,
            column: 2
          },
          end: {
            line: 495,
            column: 3
          }
        },
        loc: {
          start: {
            line: 495,
            column: 53
          },
          end: {
            line: 512,
            column: 3
          }
        },
        line: 495
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 517,
            column: 2
          },
          end: {
            line: 517,
            column: 3
          }
        },
        loc: {
          start: {
            line: 517,
            column: 27
          },
          end: {
            line: 532,
            column: 3
          }
        },
        line: 517
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 537,
            column: 2
          },
          end: {
            line: 537,
            column: 3
          }
        },
        loc: {
          start: {
            line: 537,
            column: 28
          },
          end: {
            line: 552,
            column: 3
          }
        },
        line: 537
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 538,
            column: 42
          },
          end: {
            line: 538,
            column: 43
          }
        },
        loc: {
          start: {
            line: 538,
            column: 50
          },
          end: {
            line: 538,
            column: 72
          }
        },
        line: 538
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 557,
            column: 2
          },
          end: {
            line: 557,
            column: 3
          }
        },
        loc: {
          start: {
            line: 557,
            column: 25
          },
          end: {
            line: 571,
            column: 3
          }
        },
        line: 557
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 576,
            column: 2
          },
          end: {
            line: 576,
            column: 3
          }
        },
        loc: {
          start: {
            line: 576,
            column: 23
          },
          end: {
            line: 589,
            column: 3
          }
        },
        line: 576
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 594,
            column: 2
          },
          end: {
            line: 594,
            column: 3
          }
        },
        loc: {
          start: {
            line: 594,
            column: 29
          },
          end: {
            line: 596,
            column: 3
          }
        },
        line: 594
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 601,
            column: 2
          },
          end: {
            line: 601,
            column: 3
          }
        },
        loc: {
          start: {
            line: 601,
            column: 56
          },
          end: {
            line: 640,
            column: 3
          }
        },
        line: 601
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 610,
            column: 68
          },
          end: {
            line: 610,
            column: 69
          }
        },
        loc: {
          start: {
            line: 610,
            column: 73
          },
          end: {
            line: 610,
            column: 79
          }
        },
        line: 610
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 614,
            column: 64
          },
          end: {
            line: 614,
            column: 65
          }
        },
        loc: {
          start: {
            line: 614,
            column: 69
          },
          end: {
            line: 614,
            column: 75
          }
        },
        line: 614
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 619,
            column: 14
          },
          end: {
            line: 619,
            column: 15
          }
        },
        loc: {
          start: {
            line: 619,
            column: 29
          },
          end: {
            line: 619,
            column: 34
          }
        },
        line: 619
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 620,
            column: 11
          },
          end: {
            line: 620,
            column: 12
          }
        },
        loc: {
          start: {
            line: 620,
            column: 22
          },
          end: {
            line: 620,
            column: 25
          }
        },
        line: 620
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 645,
            column: 2
          },
          end: {
            line: 645,
            column: 3
          }
        },
        loc: {
          start: {
            line: 645,
            column: 45
          },
          end: {
            line: 677,
            column: 3
          }
        },
        line: 645
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 682,
            column: 2
          },
          end: {
            line: 682,
            column: 3
          }
        },
        loc: {
          start: {
            line: 682,
            column: 54
          },
          end: {
            line: 696,
            column: 3
          }
        },
        line: 682
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 701,
            column: 2
          },
          end: {
            line: 701,
            column: 3
          }
        },
        loc: {
          start: {
            line: 701,
            column: 49
          },
          end: {
            line: 717,
            column: 3
          }
        },
        line: 701
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 722,
            column: 2
          },
          end: {
            line: 722,
            column: 3
          }
        },
        loc: {
          start: {
            line: 722,
            column: 48
          },
          end: {
            line: 739,
            column: 3
          }
        },
        line: 722
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 726,
            column: 62
          },
          end: {
            line: 726,
            column: 63
          }
        },
        loc: {
          start: {
            line: 726,
            column: 80
          },
          end: {
            line: 729,
            column: 7
          }
        },
        line: 726
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 744,
            column: 2
          },
          end: {
            line: 744,
            column: 3
          }
        },
        loc: {
          start: {
            line: 744,
            column: 30
          },
          end: {
            line: 754,
            column: 3
          }
        },
        line: 744
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 759,
            column: 2
          },
          end: {
            line: 759,
            column: 3
          }
        },
        loc: {
          start: {
            line: 759,
            column: 46
          },
          end: {
            line: 779,
            column: 3
          }
        },
        line: 759
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 769,
            column: 18
          },
          end: {
            line: 769,
            column: 19
          }
        },
        loc: {
          start: {
            line: 769,
            column: 26
          },
          end: {
            line: 776,
            column: 5
          }
        },
        line: 769
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 784,
            column: 2
          },
          end: {
            line: 784,
            column: 3
          }
        },
        loc: {
          start: {
            line: 784,
            column: 46
          },
          end: {
            line: 815,
            column: 3
          }
        },
        line: 784
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 798,
            column: 40
          },
          end: {
            line: 798,
            column: 41
          }
        },
        loc: {
          start: {
            line: 798,
            column: 45
          },
          end: {
            line: 798,
            column: 51
          }
        },
        line: 798
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 807,
            column: 41
          },
          end: {
            line: 807,
            column: 42
          }
        },
        loc: {
          start: {
            line: 807,
            column: 46
          },
          end: {
            line: 807,
            column: 59
          }
        },
        line: 807
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 811,
            column: 39
          },
          end: {
            line: 811,
            column: 40
          }
        },
        loc: {
          start: {
            line: 811,
            column: 44
          },
          end: {
            line: 811,
            column: 68
          }
        },
        line: 811
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 820,
            column: 2
          },
          end: {
            line: 820,
            column: 3
          }
        },
        loc: {
          start: {
            line: 820,
            column: 12
          },
          end: {
            line: 822,
            column: 3
          }
        },
        line: 820
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 821,
            column: 23
          },
          end: {
            line: 821,
            column: 24
          }
        },
        loc: {
          start: {
            line: 821,
            column: 34
          },
          end: {
            line: 821,
            column: 57
          }
        },
        line: 821
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 827,
            column: 2
          },
          end: {
            line: 827,
            column: 3
          }
        },
        loc: {
          start: {
            line: 827,
            column: 43
          },
          end: {
            line: 869,
            column: 3
          }
        },
        line: 827
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 860,
            column: 46
          },
          end: {
            line: 860,
            column: 47
          }
        },
        loc: {
          start: {
            line: 860,
            column: 51
          },
          end: {
            line: 860,
            column: 59
          }
        },
        line: 860
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 861,
            column: 42
          },
          end: {
            line: 861,
            column: 43
          }
        },
        loc: {
          start: {
            line: 861,
            column: 47
          },
          end: {
            line: 861,
            column: 54
          }
        },
        line: 861
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 874,
            column: 2
          },
          end: {
            line: 874,
            column: 3
          }
        },
        loc: {
          start: {
            line: 874,
            column: 50
          },
          end: {
            line: 876,
            column: 3
          }
        },
        line: 874
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 881,
            column: 2
          },
          end: {
            line: 881,
            column: 3
          }
        },
        loc: {
          start: {
            line: 881,
            column: 42
          },
          end: {
            line: 884,
            column: 3
          }
        },
        line: 881
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 102,
            column: 6
          },
          end: {
            line: 104,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 6
          },
          end: {
            line: 104,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "1": {
        loc: {
          start: {
            line: 382,
            column: 23
          },
          end: {
            line: 382,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 382,
            column: 33
          },
          end: {
            line: 382,
            column: 35
          }
        }],
        line: 382
      },
      "2": {
        loc: {
          start: {
            line: 383,
            column: 21
          },
          end: {
            line: 383,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 21
          },
          end: {
            line: 383,
            column: 33
          }
        }, {
          start: {
            line: 383,
            column: 37
          },
          end: {
            line: 383,
            column: 48
          }
        }],
        line: 383
      },
      "3": {
        loc: {
          start: {
            line: 424,
            column: 24
          },
          end: {
            line: 424,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 24
          },
          end: {
            line: 424,
            column: 48
          }
        }, {
          start: {
            line: 424,
            column: 52
          },
          end: {
            line: 424,
            column: 80
          }
        }, {
          start: {
            line: 424,
            column: 84
          },
          end: {
            line: 424,
            column: 85
          }
        }],
        line: 424
      },
      "4": {
        loc: {
          start: {
            line: 432,
            column: 6
          },
          end: {
            line: 434,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 6
          },
          end: {
            line: 434,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "5": {
        loc: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "6": {
        loc: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "7": {
        loc: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 458,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 458,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "8": {
        loc: {
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 466,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 466,
            column: 32
          }
        }, {
          start: {
            line: 466,
            column: 36
          },
          end: {
            line: 466,
            column: 61
          }
        }],
        line: 466
      },
      "9": {
        loc: {
          start: {
            line: 467,
            column: 17
          },
          end: {
            line: 467,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 17
          },
          end: {
            line: 467,
            column: 34
          }
        }, {
          start: {
            line: 467,
            column: 38
          },
          end: {
            line: 467,
            column: 86
          }
        }],
        line: 467
      },
      "10": {
        loc: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "11": {
        loc: {
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 483,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 483,
            column: 29
          }
        }, {
          start: {
            line: 483,
            column: 33
          },
          end: {
            line: 483,
            column: 57
          }
        }],
        line: 483
      },
      "12": {
        loc: {
          start: {
            line: 484,
            column: 4
          },
          end: {
            line: 484,
            column: 108
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 4
          },
          end: {
            line: 484,
            column: 108
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "13": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 484,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 484,
            column: 34
          }
        }, {
          start: {
            line: 484,
            column: 38
          },
          end: {
            line: 484,
            column: 61
          }
        }, {
          start: {
            line: 484,
            column: 65
          },
          end: {
            line: 484,
            column: 86
          }
        }],
        line: 484
      },
      "14": {
        loc: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "15": {
        loc: {
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 485,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 485,
            column: 8
          },
          end: {
            line: 485,
            column: 31
          }
        }, {
          start: {
            line: 485,
            column: 35
          },
          end: {
            line: 485,
            column: 59
          }
        }],
        line: 485
      },
      "16": {
        loc: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "17": {
        loc: {
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 486,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 486,
            column: 33
          }
        }, {
          start: {
            line: 486,
            column: 37
          },
          end: {
            line: 486,
            column: 62
          }
        }],
        line: 486
      },
      "18": {
        loc: {
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "19": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 487,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 487,
            column: 30
          }
        }, {
          start: {
            line: 487,
            column: 34
          },
          end: {
            line: 487,
            column: 59
          }
        }],
        line: 487
      },
      "20": {
        loc: {
          start: {
            line: 495,
            column: 28
          },
          end: {
            line: 495,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 495,
            column: 39
          },
          end: {
            line: 495,
            column: 51
          }
        }],
        line: 495
      },
      "21": {
        loc: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "22": {
        loc: {
          start: {
            line: 499,
            column: 6
          },
          end: {
            line: 499,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 6
          },
          end: {
            line: 499,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 499
      },
      "23": {
        loc: {
          start: {
            line: 499,
            column: 10
          },
          end: {
            line: 499,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 499,
            column: 10
          },
          end: {
            line: 499,
            column: 31
          }
        }, {
          start: {
            line: 499,
            column: 35
          },
          end: {
            line: 499,
            column: 65
          }
        }],
        line: 499
      },
      "24": {
        loc: {
          start: {
            line: 500,
            column: 6
          },
          end: {
            line: 500,
            column: 74
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 6
          },
          end: {
            line: 500,
            column: 74
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "25": {
        loc: {
          start: {
            line: 500,
            column: 10
          },
          end: {
            line: 500,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 500,
            column: 10
          },
          end: {
            line: 500,
            column: 32
          }
        }, {
          start: {
            line: 500,
            column: 36
          },
          end: {
            line: 500,
            column: 57
          }
        }],
        line: 500
      },
      "26": {
        loc: {
          start: {
            line: 501,
            column: 6
          },
          end: {
            line: 501,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 6
          },
          end: {
            line: 501,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "27": {
        loc: {
          start: {
            line: 505,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      },
      "28": {
        loc: {
          start: {
            line: 506,
            column: 6
          },
          end: {
            line: 506,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 6
          },
          end: {
            line: 506,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "29": {
        loc: {
          start: {
            line: 507,
            column: 6
          },
          end: {
            line: 507,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 507,
            column: 6
          },
          end: {
            line: 507,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 507
      },
      "30": {
        loc: {
          start: {
            line: 541,
            column: 18
          },
          end: {
            line: 541,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 541,
            column: 18
          },
          end: {
            line: 541,
            column: 68
          }
        }, {
          start: {
            line: 541,
            column: 72
          },
          end: {
            line: 541,
            column: 74
          }
        }],
        line: 541
      },
      "31": {
        loc: {
          start: {
            line: 542,
            column: 21
          },
          end: {
            line: 542,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 542,
            column: 21
          },
          end: {
            line: 542,
            column: 63
          }
        }, {
          start: {
            line: 542,
            column: 67
          },
          end: {
            line: 542,
            column: 69
          }
        }],
        line: 542
      },
      "32": {
        loc: {
          start: {
            line: 543,
            column: 14
          },
          end: {
            line: 543,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 543,
            column: 14
          },
          end: {
            line: 543,
            column: 56
          }
        }, {
          start: {
            line: 543,
            column: 60
          },
          end: {
            line: 543,
            column: 62
          }
        }],
        line: 543
      },
      "33": {
        loc: {
          start: {
            line: 544,
            column: 24
          },
          end: {
            line: 544,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 544,
            column: 24
          },
          end: {
            line: 544,
            column: 67
          }
        }, {
          start: {
            line: 544,
            column: 71
          },
          end: {
            line: 544,
            column: 73
          }
        }],
        line: 544
      },
      "34": {
        loc: {
          start: {
            line: 564,
            column: 14
          },
          end: {
            line: 564,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 564,
            column: 14
          },
          end: {
            line: 564,
            column: 22
          }
        }, {
          start: {
            line: 564,
            column: 26
          },
          end: {
            line: 564,
            column: 34
          }
        }],
        line: 564
      },
      "35": {
        loc: {
          start: {
            line: 609,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 609,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 609
      },
      "36": {
        loc: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 613
      },
      "37": {
        loc: {
          start: {
            line: 622,
            column: 4
          },
          end: {
            line: 624,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 622,
            column: 4
          },
          end: {
            line: 624,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 622
      },
      "38": {
        loc: {
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 662,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 662,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 660
      },
      "39": {
        loc: {
          start: {
            line: 670,
            column: 8
          },
          end: {
            line: 672,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 670,
            column: 8
          },
          end: {
            line: 672,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 670
      },
      "40": {
        loc: {
          start: {
            line: 710,
            column: 21
          },
          end: {
            line: 710,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 710,
            column: 21
          },
          end: {
            line: 710,
            column: 45
          }
        }, {
          start: {
            line: 710,
            column: 49
          },
          end: {
            line: 710,
            column: 73
          }
        }],
        line: 710
      },
      "41": {
        loc: {
          start: {
            line: 713,
            column: 6
          },
          end: {
            line: 715,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 713,
            column: 6
          },
          end: {
            line: 715,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 713
      },
      "42": {
        loc: {
          start: {
            line: 725,
            column: 4
          },
          end: {
            line: 730,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 725,
            column: 4
          },
          end: {
            line: 730,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 725
      },
      "43": {
        loc: {
          start: {
            line: 727,
            column: 12
          },
          end: {
            line: 727,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 727,
            column: 12
          },
          end: {
            line: 727,
            column: 19
          }
        }, {
          start: {
            line: 727,
            column: 23
          },
          end: {
            line: 727,
            column: 52
          }
        }],
        line: 727
      },
      "44": {
        loc: {
          start: {
            line: 753,
            column: 11
          },
          end: {
            line: 753,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 753,
            column: 11
          },
          end: {
            line: 753,
            column: 29
          }
        }, {
          start: {
            line: 753,
            column: 33
          },
          end: {
            line: 753,
            column: 44
          }
        }],
        line: 753
      },
      "45": {
        loc: {
          start: {
            line: 761,
            column: 18
          },
          end: {
            line: 761,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 761,
            column: 18
          },
          end: {
            line: 761,
            column: 42
          }
        }, {
          start: {
            line: 761,
            column: 46
          },
          end: {
            line: 761,
            column: 48
          }
        }],
        line: 761
      },
      "46": {
        loc: {
          start: {
            line: 770,
            column: 6
          },
          end: {
            line: 772,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 770,
            column: 6
          },
          end: {
            line: 772,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 770
      },
      "47": {
        loc: {
          start: {
            line: 771,
            column: 35
          },
          end: {
            line: 771,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 771,
            column: 35
          },
          end: {
            line: 771,
            column: 58
          }
        }, {
          start: {
            line: 771,
            column: 62
          },
          end: {
            line: 771,
            column: 63
          }
        }],
        line: 771
      },
      "48": {
        loc: {
          start: {
            line: 773,
            column: 6
          },
          end: {
            line: 775,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 773,
            column: 6
          },
          end: {
            line: 775,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 773
      },
      "49": {
        loc: {
          start: {
            line: 774,
            column: 43
          },
          end: {
            line: 774,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 774,
            column: 43
          },
          end: {
            line: 774,
            column: 74
          }
        }, {
          start: {
            line: 774,
            column: 78
          },
          end: {
            line: 774,
            column: 79
          }
        }],
        line: 774
      },
      "50": {
        loc: {
          start: {
            line: 786,
            column: 18
          },
          end: {
            line: 786,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 786,
            column: 18
          },
          end: {
            line: 786,
            column: 42
          }
        }, {
          start: {
            line: 786,
            column: 46
          },
          end: {
            line: 786,
            column: 48
          }
        }],
        line: 786
      },
      "51": {
        loc: {
          start: {
            line: 795,
            column: 4
          },
          end: {
            line: 795,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 795,
            column: 4
          },
          end: {
            line: 795,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 795
      },
      "52": {
        loc: {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 804,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 804,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 802
      },
      "53": {
        loc: {
          start: {
            line: 827,
            column: 29
          },
          end: {
            line: 827,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 827,
            column: 39
          },
          end: {
            line: 827,
            column: 41
          }
        }],
        line: 827
      },
      "54": {
        loc: {
          start: {
            line: 874,
            column: 25
          },
          end: {
            line: 874,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 874,
            column: 36
          },
          end: {
            line: 874,
            column: 48
          }
        }],
        line: 874
      },
      "55": {
        loc: {
          start: {
            line: 875,
            column: 11
          },
          end: {
            line: 875,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 875,
            column: 11
          },
          end: {
            line: 875,
            column: 54
          }
        }, {
          start: {
            line: 875,
            column: 58
          },
          end: {
            line: 875,
            column: 88
          }
        }],
        line: 875
      },
      "56": {
        loc: {
          start: {
            line: 883,
            column: 11
          },
          end: {
            line: 883,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 883,
            column: 11
          },
          end: {
            line: 883,
            column: 32
          }
        }, {
          start: {
            line: 883,
            column: 36
          },
          end: {
            line: 883,
            column: 74
          }
        }],
        line: 883
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0],
      "54": [0],
      "55": [0, 0],
      "56": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "af4ee8346c649035c56e470aa9e817ac416ed215"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f0x49w9iw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f0x49w9iw();
/**
 * Enhanced Test Generator Service
 * Uses AI to generate comprehensive test cases with improved architecture
 */

const OpenAI =
/* istanbul ignore next */
(cov_f0x49w9iw().s[0]++, require('openai'));
const ResponseFormatter =
/* istanbul ignore next */
(cov_f0x49w9iw().s[1]++, require('../utils/responseFormatter'));
const ValidationUtils =
/* istanbul ignore next */
(cov_f0x49w9iw().s[2]++, require('../utils/validationUtils'));
const Logger =
/* istanbul ignore next */
(cov_f0x49w9iw().s[3]++, require('../utils/logger'));
const ErrorHandler =
/* istanbul ignore next */
(cov_f0x49w9iw().s[4]++, require('../utils/errorHandler'));
class TestGenerator {
  constructor() {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[0]++;
    cov_f0x49w9iw().s[5]++;
    this.logger = Logger;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[6]++;
    this.validationUtils = ValidationUtils;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[7]++;
    this.responseFormatter = ResponseFormatter;

    // Initialize OpenAI with proper error handling
    /* istanbul ignore next */
    cov_f0x49w9iw().s[8]++;
    this.initializeOpenAI();

    // Enhanced prompts for different test types
    /* istanbul ignore next */
    cov_f0x49w9iw().s[9]++;
    this.prompts = this.initializePrompts();

    // Test generation configuration
    /* istanbul ignore next */
    cov_f0x49w9iw().s[10]++;
    this.config = {
      maxTokens: 6000,
      temperature: 0.2,
      model: 'gpt-4',
      retryAttempts: 3,
      retryDelay: 1000
    };

    // Supported test frameworks and their patterns
    /* istanbul ignore next */
    cov_f0x49w9iw().s[11]++;
    this.testFrameworks = {
      javascript: {
        jest: {
          extension: '.test.js',
          imports: "const { describe, test, expect, beforeEach, afterEach } = require('@jest/globals');",
          patterns: {
            describe: 'describe',
            test: 'test',
            expect: 'expect',
            beforeEach: 'beforeEach',
            afterEach: 'afterEach'
          }
        },
        mocha: {
          extension: '.test.js',
          imports: "const { describe, it, beforeEach, afterEach } = require('mocha'); const { expect } = require('chai');",
          patterns: {
            describe: 'describe',
            test: 'it',
            expect: 'expect',
            beforeEach: 'beforeEach',
            afterEach: 'afterEach'
          }
        },
        vitest: {
          extension: '.test.js',
          imports: "import { describe, test, expect, beforeEach, afterEach } from 'vitest';",
          patterns: {
            describe: 'describe',
            test: 'test',
            expect: 'expect',
            beforeEach: 'beforeEach',
            afterEach: 'afterEach'
          }
        }
      },
      python: {
        pytest: {
          extension: '_test.py',
          imports: "import pytest\nimport unittest.mock as mock",
          patterns: {
            describe: 'class Test',
            test: 'def test_',
            expect: 'assert',
            beforeEach: 'def setup_method',
            afterEach: 'def teardown_method'
          }
        },
        unittest: {
          extension: '_test.py',
          imports: "import unittest\nimport unittest.mock as mock",
          patterns: {
            describe: 'class Test',
            test: 'def test_',
            expect: 'self.assert',
            beforeEach: 'def setUp',
            afterEach: 'def tearDown'
          }
        }
      }
    };
  }

  /**
   * Initialize OpenAI client with proper validation
   */
  initializeOpenAI() {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[1]++;
    cov_f0x49w9iw().s[12]++;
    try {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[13]++;
      if (!process.env.OPENAI_API_KEY) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[0][0]++;
        cov_f0x49w9iw().s[14]++;
        throw new Error('OPENAI_API_KEY environment variable is required');
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[0][1]++;
      }
      cov_f0x49w9iw().s[15]++;
      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });
      /* istanbul ignore next */
      cov_f0x49w9iw().s[16]++;
      this.logger.info('OpenAI client initialized for test generation');
    } catch (error) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[17]++;
      this.logger.error('Failed to initialize OpenAI client for test generation', error);
      /* istanbul ignore next */
      cov_f0x49w9iw().s[18]++;
      throw ErrorHandler.createError('OPENAI_INIT_FAILED', 'Failed to initialize OpenAI client', 500);
    }
  }

  /**
   * Initialize enhanced prompts for different test types
   */
  initializePrompts() {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[2]++;
    cov_f0x49w9iw().s[19]++;
    return {
      unitTests: {
        system: `You are an expert test engineer specializing in writing comprehensive, maintainable unit tests.
Your tests should be thorough, readable, and follow testing best practices.`,
        user: `Generate comprehensive unit tests for the provided code.

**Requirements:**
1. **Complete Coverage:** Generate tests for all public functions, methods, and classes
2. **Edge Cases:** Include boundary conditions, null/undefined values, empty inputs
3. **Error Scenarios:** Test exception handling and error conditions
4. **Data Validation:** Test input validation and data transformation
5. **State Testing:** Test object state changes and side effects
6. **Performance:** Include tests for performance-critical functions
7. **Mocking:** Use appropriate mocking for external dependencies

**Test Framework:** {framework}
**Programming Language:** {language}

**Test Structure Guidelines:**
- Use descriptive test names that explain what is being tested
- Group related tests using describe/context blocks
- Include setup and cleanup when necessary
- Use meaningful assertions with clear error messages
- Follow AAA pattern: Arrange, Act, Assert

**Response Format (JSON):**
{
  "testSuite": {
    "fileName": "generated_test_file_name",
    "content": "complete test file content with proper imports and structure",
    "framework": "test framework used",
    "language": "programming language"
  },
  "testCases": [
    {
      "id": "unique_test_id",
      "functionName": "function being tested",
      "testName": "descriptive test name",
      "description": "what this test validates",
      "type": "unit|integration|edge-case|error|performance",
      "scenario": "detailed test scenario",
      "inputData": "example input data",
      "expectedOutput": "expected result",
      "assertions": ["list of assertions being made"],
      "mocks": ["external dependencies being mocked"]
    }
  ],
  "coverage": {
    "estimatedPercentage": "estimated test coverage percentage",
    "coveredFunctions": ["list of functions with tests"],
    "uncoveredAreas": ["areas that might need additional testing"],
    "recommendations": ["suggestions for improving test coverage"]
  },
  "dependencies": {
    "testFramework": "primary test framework",
    "additionalLibraries": ["additional testing libraries needed"],
    "mockingFramework": "mocking library if used"
  },
  "metrics": {
    "totalTests": "number of test cases",
    "complexityScore": "1-10 based on test complexity",
    "maintainabilityScore": "1-10 based on test maintainability"
  }
}`
      },
      integrationTests: {
        system: `You are an expert in integration testing, focusing on testing component interactions,
API endpoints, database operations, and system workflows.`,
        user: `Generate comprehensive integration tests for the provided code.

**Focus Areas:**
1. **API Endpoints:** Test HTTP methods, status codes, request/response handling
2. **Database Operations:** Test CRUD operations, transactions, data integrity
3. **Service Interactions:** Test communication between different services/modules
4. **Workflow Testing:** Test complete business processes and user journeys
5. **External Dependencies:** Test integration with third-party APIs and services
6. **Configuration Testing:** Test different environment configurations

**Framework:** {framework}
**Language:** {language}

**Integration Test Guidelines:**
- Test realistic scenarios with actual dependencies
- Use test databases and controlled test environments
- Validate data flow between components
- Test error propagation and handling
- Include performance and load considerations

**Response Format (JSON):**
{
  "integrationSuite": {
    "fileName": "integration_test_file_name",
    "content": "complete integration test file",
    "setupInstructions": "test environment setup instructions",
    "teardownInstructions": "cleanup instructions"
  },
  "testScenarios": [
    {
      "id": "scenario_id",
      "name": "scenario name",
      "description": "what is being tested",
      "type": "api|database|service|workflow|external",
      "components": ["components involved in test"],
      "preconditions": "test setup requirements",
      "steps": ["test execution steps"],
      "assertions": ["expected outcomes"],
      "cleanup": "post-test cleanup"
    }
  ],
  "environment": {
    "requirements": ["environment setup requirements"],
    "testData": ["test data needed"],
    "configurations": ["configuration settings"],
    "dependencies": ["external service dependencies"]
  },
  "validation": {
    "coverageAreas": ["integration points covered"],
    "riskAreas": ["high-risk areas tested"],
    "performanceChecks": ["performance validations included"]
  }
}`
      },
      e2eTests: {
        system: `You are an expert in end-to-end testing, creating tests that validate complete user workflows
and system functionality from a user's perspective.`,
        user: `Generate comprehensive end-to-end tests for the provided application code.

**E2E Test Requirements:**
1. **User Journeys:** Test complete user workflows and use cases
2. **UI Interactions:** Test user interface elements and interactions
3. **Data Persistence:** Validate data is properly saved and retrieved
4. **Cross-Browser Testing:** Consider browser compatibility
5. **Mobile Responsiveness:** Include mobile device testing
6. **Error Handling:** Test error scenarios and user feedback

**Testing Framework:** {framework}
**Application Type:** {appType}

**Response Format (JSON):**
{
  "e2eSuite": {
    "fileName": "e2e_test_file_name",
    "content": "complete e2e test file",
    "framework": "testing framework used",
    "browser": "target browser configuration"
  },
  "userJourneys": [
    {
      "id": "journey_id",
      "name": "user journey name",
      "description": "journey description",
      "persona": "user type/role",
      "steps": [
        {
          "step": "step number",
          "action": "user action",
          "element": "UI element",
          "input": "input data if any",
          "expected": "expected result"
        }
      ],
      "assertions": ["end-to-end validations"],
      "testData": "test data requirements"
    }
  ],
  "configuration": {
    "browserSettings": "browser configuration",
    "deviceSettings": "device/viewport settings",
    "timeouts": "timeout configurations",
    "retryPolicy": "retry settings"
  }
}`
      },
      performanceTests: {
        system: `You are a performance testing expert who creates tests to validate system performance,
load handling, and resource usage under various conditions.`,
        user: `Generate performance tests for the provided code.

**Performance Test Areas:**
1. **Load Testing:** Test system behavior under expected load
2. **Stress Testing:** Test system limits and breaking points
3. **Volume Testing:** Test with large amounts of data
4. **Memory Testing:** Test memory usage and leaks
5. **Concurrency Testing:** Test concurrent user scenarios

**Response Format (JSON):**
{
  "performanceSuite": {
    "fileName": "performance_test_file_name",
    "content": "performance test implementation",
    "tooling": "performance testing tools used"
  },
  "performanceTests": [
    {
      "id": "perf_test_id",
      "name": "performance test name",
      "type": "load|stress|volume|memory|concurrency",
      "description": "what is being tested",
      "metrics": ["metrics to measure"],
      "thresholds": ["performance thresholds"],
      "scenario": "test scenario description"
    }
  ],
  "benchmarks": {
    "responseTime": "acceptable response time",
    "throughput": "expected throughput",
    "resourceUsage": "resource usage limits"
  }
}`
      },
      securityTests: {
        system: `You are a security testing expert who creates tests to validate application security,
identify vulnerabilities, and ensure security controls are working properly.`,
        user: `Generate security tests for the provided code.

**Security Test Areas:**
1. **Input Validation:** Test injection attacks and input sanitization
2. **Authentication:** Test login mechanisms and session management
3. **Authorization:** Test access controls and permission enforcement
4. **Data Protection:** Test data encryption and secure storage
5. **API Security:** Test API endpoints for security vulnerabilities

**Response Format (JSON):**
{
  "securitySuite": {
    "fileName": "security_test_file_name",
    "content": "security test implementation",
    "framework": "security testing framework"
  },
  "securityTests": [
    {
      "id": "security_test_id",
      "name": "security test name",
      "vulnerability": "vulnerability being tested",
      "description": "test description",
      "attackVector": "attack method being tested",
      "expectedBehavior": "expected secure behavior",
      "severity": "vulnerability severity level"
    }
  ],
  "compliance": {
    "standards": ["security standards addressed"],
    "checklist": ["security checklist items"]
  }
}`
      }
    };
  }

  /**
   * Enhanced generate method with multiple test types support
   */
  async generate(code, options =
  /* istanbul ignore next */
  (cov_f0x49w9iw().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[3]++;
    const testType =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[20]++,
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[2][0]++, options.type) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[2][1]++, 'unitTests'));
    const startTime =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[21]++, Date.now());
    /* istanbul ignore next */
    cov_f0x49w9iw().s[22]++;
    try {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[23]++;
      this.logger.info('Starting test generation', {
        testType,
        codeLength: code.length,
        options
      });

      // Validate inputs
      /* istanbul ignore next */
      cov_f0x49w9iw().s[24]++;
      this.validateGenerationInput(code, testType, options);

      // Detect code language and framework if not provided
      const codeAnalysis =
      /* istanbul ignore next */
      (cov_f0x49w9iw().s[25]++, this.analyzeCode(code, options));

      // Prepare the generation request
      const prompt =
      /* istanbul ignore next */
      (cov_f0x49w9iw().s[26]++, this.prepareGenerationPrompt(code, testType, codeAnalysis));

      // Execute generation with retry logic
      const aiResponse =
      /* istanbul ignore next */
      (cov_f0x49w9iw().s[27]++, await this.executeGenerationWithRetry(prompt));

      // Process and validate the response
      const generationResult =
      /* istanbul ignore next */
      (cov_f0x49w9iw().s[28]++, await this.processGenerationResponse(aiResponse, testType));

      // Add metadata and enhancements
      const result =
      /* istanbul ignore next */
      (cov_f0x49w9iw().s[29]++, {
        ...generationResult,
        metadata: {
          testType,
          timestamp: new Date().toISOString(),
          processingTime: Date.now() - startTime,
          modelUsed: this.config.model,
          codeAnalysis,
          generationOptions: options
        }
      });
      /* istanbul ignore next */
      cov_f0x49w9iw().s[30]++;
      this.logger.info('Test generation completed', {
        testType,
        processingTime: result.metadata.processingTime,
        testsGenerated:
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[3][0]++, result.testCases?.length) ||
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[3][1]++, result.testScenarios?.length) ||
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[3][2]++, 0)
      });
      /* istanbul ignore next */
      cov_f0x49w9iw().s[31]++;
      return this.responseFormatter.success(result, 'Test generation completed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[32]++;
      this.logger.error('Test generation failed', {
        error: error.message,
        testType
      });
      /* istanbul ignore next */
      cov_f0x49w9iw().s[33]++;
      if (error.code === 'insufficient_quota') {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[4][0]++;
        cov_f0x49w9iw().s[34]++;
        throw ErrorHandler.createError('QUOTA_EXCEEDED', 'AI service quota exceeded', 429);
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[4][1]++;
      }
      cov_f0x49w9iw().s[35]++;
      throw ErrorHandler.createError('GENERATION_FAILED', `Test generation failed: ${error.message}`, 500);
    }
  }

  /**
   * Validate generation input parameters
   */
  validateGenerationInput(code, testType, options) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[4]++;
    cov_f0x49w9iw().s[36]++;
    if (!this.validationUtils.validateCodeInput(code)) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[5][0]++;
      cov_f0x49w9iw().s[37]++;
      throw new Error('Invalid code input provided');
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[5][1]++;
    }
    cov_f0x49w9iw().s[38]++;
    if (!this.prompts[testType]) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[6][0]++;
      cov_f0x49w9iw().s[39]++;
      throw new Error(`Unsupported test type: ${testType}`);
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[6][1]++;
    }
    cov_f0x49w9iw().s[40]++;
    if (code.length > 100000) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[7][0]++;
      cov_f0x49w9iw().s[41]++;
      this.logger.warn('Large code file detected for test generation', {
        codeLength: code.length
      });
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[7][1]++;
    }
  }

  /**
   * Analyze code to detect language, framework, and patterns
   */
  analyzeCode(code, options) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[5]++;
    const analysis =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[42]++, {
      language:
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[8][0]++, options.language) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[8][1]++, this.detectLanguage(code)),
      framework:
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[9][0]++, options.framework) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[9][1]++, this.detectTestFramework(code, options.language)),
      patterns: this.detectCodePatterns(code),
      complexity: this.calculateComplexity(code),
      functions: this.extractFunctions(code),
      classes: this.extractClasses(code)
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[43]++;
    this.logger.debug('Code analysis completed', analysis);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[44]++;
    return analysis;
  }

  /**
   * Detect programming language from code
   */
  detectLanguage(code) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[6]++;
    cov_f0x49w9iw().s[45]++;
    // Simple language detection based on syntax patterns
    if (
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[11][0]++, code.includes('def ')) &&
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[11][1]++, code.includes('import '))) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[10][0]++;
      cov_f0x49w9iw().s[46]++;
      return 'python';
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[10][1]++;
    }
    cov_f0x49w9iw().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[13][0]++, code.includes('function ')) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[13][1]++, code.includes('const ')) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[13][2]++, code.includes('let '))) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[12][0]++;
      cov_f0x49w9iw().s[48]++;
      return 'javascript';
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[12][1]++;
    }
    cov_f0x49w9iw().s[49]++;
    if (
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[15][0]++, code.includes('class ')) &&
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[15][1]++, code.includes('public '))) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[14][0]++;
      cov_f0x49w9iw().s[50]++;
      return 'java';
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[14][1]++;
    }
    cov_f0x49w9iw().s[51]++;
    if (
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[17][0]++, code.includes('#include')) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[17][1]++, code.includes('int main'))) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[16][0]++;
      cov_f0x49w9iw().s[52]++;
      return 'cpp';
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[16][1]++;
    }
    cov_f0x49w9iw().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[19][0]++, code.includes('func ')) &&
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[19][1]++, code.includes('package '))) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[18][0]++;
      cov_f0x49w9iw().s[54]++;
      return 'go';
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[18][1]++;
    }
    cov_f0x49w9iw().s[55]++;
    return 'javascript'; // Default fallback
  }

  /**
   * Detect appropriate test framework
   */
  detectTestFramework(code, language =
  /* istanbul ignore next */
  (cov_f0x49w9iw().b[20][0]++, 'javascript')) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[7]++;
    const lang =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[56]++, language.toLowerCase());
    /* istanbul ignore next */
    cov_f0x49w9iw().s[57]++;
    if (lang === 'javascript') {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[21][0]++;
      cov_f0x49w9iw().s[58]++;
      if (
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[23][0]++, code.includes('jest')) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[23][1]++, code.includes('@jest/globals'))) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[22][0]++;
        cov_f0x49w9iw().s[59]++;
        return 'jest';
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[22][1]++;
      }
      cov_f0x49w9iw().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[25][0]++, code.includes('mocha')) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[25][1]++, code.includes('chai'))) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[24][0]++;
        cov_f0x49w9iw().s[61]++;
        return 'mocha';
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[24][1]++;
      }
      cov_f0x49w9iw().s[62]++;
      if (code.includes('vitest')) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[26][0]++;
        cov_f0x49w9iw().s[63]++;
        return 'vitest';
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[26][1]++;
      }
      cov_f0x49w9iw().s[64]++;
      return 'jest'; // Default for JavaScript
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[21][1]++;
    }
    cov_f0x49w9iw().s[65]++;
    if (lang === 'python') {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[27][0]++;
      cov_f0x49w9iw().s[66]++;
      if (code.includes('pytest')) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[28][0]++;
        cov_f0x49w9iw().s[67]++;
        return 'pytest';
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[28][1]++;
      }
      cov_f0x49w9iw().s[68]++;
      if (code.includes('unittest')) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[29][0]++;
        cov_f0x49w9iw().s[69]++;
        return 'unittest';
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[29][1]++;
      }
      cov_f0x49w9iw().s[70]++;
      return 'pytest'; // Default for Python
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[27][1]++;
    }
    cov_f0x49w9iw().s[71]++;
    return 'jest'; // Global default
  }

  /**
   * Detect code patterns for better test generation
   */
  detectCodePatterns(code) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[8]++;
    const patterns =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[72]++, {
      hasAsync: /async\s+function|await\s+/.test(code),
      hasClasses: /class\s+\w+/.test(code),
      hasFunctions: /function\s+\w+|const\s+\w+\s*=\s*\(/.test(code),
      hasExports: /module\.exports|export\s+/.test(code),
      hasImports: /require\(|import\s+/.test(code),
      hasAPI: /app\.(get|post|put|delete)|router\.|express/.test(code),
      hasDatabase: /mongoose|sequelize|prisma|knex|sql/.test(code),
      hasValidation: /validate|joi|yup|zod/.test(code),
      hasAuth: /auth|jwt|passport|session/.test(code),
      hasMiddleware: /middleware|next\(\)/.test(code)
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[73]++;
    return patterns;
  }

  /**
   * Calculate code complexity for test planning
   */
  calculateComplexity(code) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[9]++;
    const lines =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[74]++, code.split('\n').filter(line => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[10]++;
      cov_f0x49w9iw().s[75]++;
      return line.trim().length > 0;
    }));
    const complexity =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[76]++, {
      lines: lines.length,
      functions: (
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[30][0]++, code.match(/function\s+\w+|const\s+\w+\s*=\s*\(/g)) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[30][1]++, [])).length,
      conditionals: (
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[31][0]++, code.match(/if\s*\(|switch\s*\(|case\s+/g)) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[31][1]++, [])).length,
      loops: (
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[32][0]++, code.match(/for\s*\(|while\s*\(|forEach/g)) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[32][1]++, [])).length,
      asyncOperations: (
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[33][0]++, code.match(/async|await|Promise|callback/g)) ||
      /* istanbul ignore next */
      (cov_f0x49w9iw().b[33][1]++, [])).length
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[77]++;
    complexity.score = Math.min(10, Math.round((complexity.conditionals + complexity.loops + complexity.asyncOperations) / complexity.functions * 2));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[78]++;
    return complexity;
  }

  /**
   * Extract function information for targeted testing
   */
  extractFunctions(code) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[11]++;
    const functionRegex =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[79]++, /(?:function\s+(\w+)|const\s+(\w+)\s*=\s*(?:async\s+)?\()/g);
    const functions =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[80]++, []);
    let match;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[81]++;
    while ((match = functionRegex.exec(code)) !== null) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[82]++;
      functions.push({
        name:
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[34][0]++, match[1]) ||
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[34][1]++, match[2]),
        isAsync: code.includes('async'),
        line: this.getLineNumber(code, match.index)
      });
    }
    /* istanbul ignore next */
    cov_f0x49w9iw().s[83]++;
    return functions;
  }

  /**
   * Extract class information for OOP testing
   */
  extractClasses(code) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[12]++;
    const classRegex =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[84]++, /class\s+(\w+)/g);
    const classes =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[85]++, []);
    let match;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[86]++;
    while ((match = classRegex.exec(code)) !== null) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[87]++;
      classes.push({
        name: match[1],
        line: this.getLineNumber(code, match.index)
      });
    }
    /* istanbul ignore next */
    cov_f0x49w9iw().s[88]++;
    return classes;
  }

  /**
   * Get line number from character index
   */
  getLineNumber(code, index) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[13]++;
    cov_f0x49w9iw().s[89]++;
    return code.substring(0, index).split('\n').length;
  }

  /**
   * Prepare generation prompt
   */
  prepareGenerationPrompt(code, testType, codeAnalysis) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[14]++;
    const promptTemplate =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[90]++, this.prompts[testType]);

    // Build context information
    let contextInfo =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[91]++, `Programming Language: ${codeAnalysis.language}\n`);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[92]++;
    contextInfo += `Test Framework: ${codeAnalysis.framework}\n`;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[93]++;
    contextInfo += `Code Complexity: ${codeAnalysis.complexity.score}/10\n`;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[94]++;
    if (codeAnalysis.functions.length > 0) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[35][0]++;
      cov_f0x49w9iw().s[95]++;
      contextInfo += `Functions Found: ${codeAnalysis.functions.map(f => {
        /* istanbul ignore next */
        cov_f0x49w9iw().f[15]++;
        cov_f0x49w9iw().s[96]++;
        return f.name;
      }).join(', ')}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[35][1]++;
    }
    cov_f0x49w9iw().s[97]++;
    if (codeAnalysis.classes.length > 0) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[36][0]++;
      cov_f0x49w9iw().s[98]++;
      contextInfo += `Classes Found: ${codeAnalysis.classes.map(c => {
        /* istanbul ignore next */
        cov_f0x49w9iw().f[16]++;
        cov_f0x49w9iw().s[99]++;
        return c.name;
      }).join(', ')}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[36][1]++;
    }

    // Add detected patterns
    const detectedPatterns =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[100]++, Object.entries(codeAnalysis.patterns).filter(([, value]) => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[17]++;
      cov_f0x49w9iw().s[101]++;
      return value;
    }).map(([key]) => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[18]++;
      cov_f0x49w9iw().s[102]++;
      return key;
    }));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[103]++;
    if (detectedPatterns.length > 0) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[37][0]++;
      cov_f0x49w9iw().s[104]++;
      contextInfo += `Detected Patterns: ${detectedPatterns.join(', ')}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[37][1]++;
    }
    const userPrompt =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[105]++, promptTemplate.user.replace('{framework}', codeAnalysis.framework).replace('{language}', codeAnalysis.language));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[106]++;
    return [{
      role: 'system',
      content: promptTemplate.system
    }, {
      role: 'user',
      content: `${contextInfo}\n\nCode to generate tests for:\n\`\`\`${codeAnalysis.language}\n${code}\n\`\`\`\n\n${userPrompt}`
    }];
  }

  /**
   * Execute generation with retry logic
   */
  async executeGenerationWithRetry(messages) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[19]++;
    let lastError;
    /* istanbul ignore next */
    cov_f0x49w9iw().s[107]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[108]++, 1); attempt <= this.config.retryAttempts; attempt++) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[109]++;
      try {
        /* istanbul ignore next */
        cov_f0x49w9iw().s[110]++;
        this.logger.debug(`Test generation attempt ${attempt}/${this.config.retryAttempts}`);
        const response =
        /* istanbul ignore next */
        (cov_f0x49w9iw().s[111]++, await this.openai.chat.completions.create({
          model: this.config.model,
          messages,
          max_tokens: this.config.maxTokens,
          temperature: this.config.temperature,
          response_format: {
            type: 'json_object'
          }
        }));
        /* istanbul ignore next */
        cov_f0x49w9iw().s[112]++;
        if (!response.choices?.[0]?.message?.content) {
          /* istanbul ignore next */
          cov_f0x49w9iw().b[38][0]++;
          cov_f0x49w9iw().s[113]++;
          throw new Error('Empty response from AI service');
        } else
        /* istanbul ignore next */
        {
          cov_f0x49w9iw().b[38][1]++;
        }
        cov_f0x49w9iw().s[114]++;
        return response.choices[0].message.content;
      } catch (error) {
        /* istanbul ignore next */
        cov_f0x49w9iw().s[115]++;
        lastError = error;
        /* istanbul ignore next */
        cov_f0x49w9iw().s[116]++;
        this.logger.warn(`Test generation attempt ${attempt} failed`, {
          error: error.message
        });
        /* istanbul ignore next */
        cov_f0x49w9iw().s[117]++;
        if (attempt < this.config.retryAttempts) {
          /* istanbul ignore next */
          cov_f0x49w9iw().b[39][0]++;
          cov_f0x49w9iw().s[118]++;
          await this.delay(this.config.retryDelay * attempt);
        } else
        /* istanbul ignore next */
        {
          cov_f0x49w9iw().b[39][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_f0x49w9iw().s[119]++;
    throw lastError;
  }

  /**
   * Process and validate generation response
   */
  async processGenerationResponse(response, testType) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[20]++;
    cov_f0x49w9iw().s[120]++;
    try {
      const parsed =
      /* istanbul ignore next */
      (cov_f0x49w9iw().s[121]++, JSON.parse(response));

      // Validate response structure
      /* istanbul ignore next */
      cov_f0x49w9iw().s[122]++;
      this.validateGenerationResponse(parsed, testType);

      // Enhance the response
      /* istanbul ignore next */
      cov_f0x49w9iw().s[123]++;
      return this.enhanceGenerationResponse(parsed, testType);
    } catch (error) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[124]++;
      this.logger.error('Failed to process test generation response', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_f0x49w9iw().s[125]++;
      throw new Error(`Invalid AI response format: ${error.message}`);
    }
  }

  /**
   * Validate generation response structure
   */
  validateGenerationResponse(response, testType) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[21]++;
    const requiredFields =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[126]++, {
      unitTests: ['testSuite', 'testCases', 'coverage'],
      integrationTests: ['integrationSuite', 'testScenarios'],
      e2eTests: ['e2eSuite', 'userJourneys'],
      performanceTests: ['performanceSuite', 'performanceTests'],
      securityTests: ['securitySuite', 'securityTests']
    });
    const required =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[127]++,
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[40][0]++, requiredFields[testType]) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[40][1]++, requiredFields.unitTests));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[128]++;
    for (const field of required) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[129]++;
      if (!response[field]) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[41][0]++;
        cov_f0x49w9iw().s[130]++;
        throw new Error(`Missing required field: ${field}`);
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[41][1]++;
      }
    }
  }

  /**
   * Enhance generation response with additional data
   */
  enhanceGenerationResponse(response, testType) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[22]++;
    // Add unique IDs if missing
    const testArrayField =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[131]++, this.getTestArrayField(testType));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[132]++;
    if (response[testArrayField]) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[42][0]++;
      cov_f0x49w9iw().s[133]++;
      response[testArrayField] = response[testArrayField].map((test, index) => {
        /* istanbul ignore next */
        cov_f0x49w9iw().f[23]++;
        cov_f0x49w9iw().s[134]++;
        return {
          id:
          /* istanbul ignore next */
          (cov_f0x49w9iw().b[43][0]++, test.id) ||
          /* istanbul ignore next */
          (cov_f0x49w9iw().b[43][1]++, `test_${Date.now()}_${index}`),
          ...test
        };
      });
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[42][1]++;
    }

    // Add test statistics
    cov_f0x49w9iw().s[135]++;
    response.statistics = this.calculateTestStatistics(response, testType);

    // Add quality metrics
    /* istanbul ignore next */
    cov_f0x49w9iw().s[136]++;
    response.qualityMetrics = this.calculateQualityMetrics(response, testType);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[137]++;
    return response;
  }

  /**
   * Get test array field name based on test type
   */
  getTestArrayField(testType) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[24]++;
    const fieldMap =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[138]++, {
      unitTests: 'testCases',
      integrationTests: 'testScenarios',
      e2eTests: 'userJourneys',
      performanceTests: 'performanceTests',
      securityTests: 'securityTests'
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[139]++;
    return /* istanbul ignore next */(cov_f0x49w9iw().b[44][0]++, fieldMap[testType]) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[44][1]++, 'testCases');
  }

  /**
   * Calculate test statistics
   */
  calculateTestStatistics(response, testType) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[25]++;
    const testArrayField =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[140]++, this.getTestArrayField(testType));
    const tests =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[141]++,
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[45][0]++, response[testArrayField]) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[45][1]++, []));
    const stats =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[142]++, {
      total: tests.length,
      byType: {},
      bySeverity: {}
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[143]++;
    tests.forEach(test => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[26]++;
      cov_f0x49w9iw().s[144]++;
      if (test.type) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[46][0]++;
        cov_f0x49w9iw().s[145]++;
        stats.byType[test.type] = (
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[47][0]++, stats.byType[test.type]) ||
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[47][1]++, 0)) + 1;
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[46][1]++;
      }
      cov_f0x49w9iw().s[146]++;
      if (test.severity) {
        /* istanbul ignore next */
        cov_f0x49w9iw().b[48][0]++;
        cov_f0x49w9iw().s[147]++;
        stats.bySeverity[test.severity] = (
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[49][0]++, stats.bySeverity[test.severity]) ||
        /* istanbul ignore next */
        (cov_f0x49w9iw().b[49][1]++, 0)) + 1;
      } else
      /* istanbul ignore next */
      {
        cov_f0x49w9iw().b[48][1]++;
      }
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[148]++;
    return stats;
  }

  /**
   * Calculate quality metrics for generated tests
   */
  calculateQualityMetrics(response, testType) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[27]++;
    const testArrayField =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[149]++, this.getTestArrayField(testType));
    const tests =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[150]++,
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[50][0]++, response[testArrayField]) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[50][1]++, []));
    const metrics =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[151]++, {
      completeness: 0,
      coverage: 0,
      maintainability: 0,
      reliability: 0
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[152]++;
    if (tests.length === 0) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[51][0]++;
      cov_f0x49w9iw().s[153]++;
      return metrics;
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[51][1]++;
    }

    // Calculate completeness based on test variety
    const testTypes =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[154]++, new Set(tests.map(t => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[28]++;
      cov_f0x49w9iw().s[155]++;
      return t.type;
    }).filter(Boolean)));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[156]++;
    metrics.completeness = Math.min(100, testTypes.size / 5 * 100);

    // Extract coverage from response
    /* istanbul ignore next */
    cov_f0x49w9iw().s[157]++;
    if (response.coverage?.estimatedPercentage) {
      /* istanbul ignore next */
      cov_f0x49w9iw().b[52][0]++;
      cov_f0x49w9iw().s[158]++;
      metrics.coverage = response.coverage.estimatedPercentage;
    } else
    /* istanbul ignore next */
    {
      cov_f0x49w9iw().b[52][1]++;
    }

    // Calculate maintainability based on test structure
    const hasDescriptions =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[159]++, tests.filter(t => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[29]++;
      cov_f0x49w9iw().s[160]++;
      return t.description;
    }).length);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[161]++;
    metrics.maintainability = Math.round(hasDescriptions / tests.length * 100);

    // Calculate reliability based on assertion quality
    const hasAssertions =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[162]++, tests.filter(t => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[30]++;
      cov_f0x49w9iw().s[163]++;
      return t.assertions?.length > 0;
    }).length);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[164]++;
    metrics.reliability = Math.round(hasAssertions / tests.length * 100);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[165]++;
    return metrics;
  }

  /**
   * Utility delay function
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[31]++;
    cov_f0x49w9iw().s[166]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_f0x49w9iw().f[32]++;
      cov_f0x49w9iw().s[167]++;
      return setTimeout(resolve, ms);
    });
  }

  /**
   * Generate tests for multiple files
   */
  async generateBatch(files, options =
  /* istanbul ignore next */
  (cov_f0x49w9iw().b[53][0]++, {})) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[33]++;
    const results =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[168]++, []);
    const batchStartTime =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[169]++, Date.now());
    /* istanbul ignore next */
    cov_f0x49w9iw().s[170]++;
    this.logger.info('Starting batch test generation', {
      fileCount: files.length
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[171]++;
    for (const [index, file] of files.entries()) {
      /* istanbul ignore next */
      cov_f0x49w9iw().s[172]++;
      try {
        /* istanbul ignore next */
        cov_f0x49w9iw().s[173]++;
        this.logger.debug(`Processing file ${index + 1}/${files.length}`, {
          fileName: file.name
        });
        const result =
        /* istanbul ignore next */
        (cov_f0x49w9iw().s[174]++, await this.generate(file.content, {
          ...options,
          fileName: file.name
        }));
        /* istanbul ignore next */
        cov_f0x49w9iw().s[175]++;
        results.push({
          fileName: file.name,
          ...result
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_f0x49w9iw().s[176]++;
        this.logger.error(`Failed to generate tests for file: ${file.name}`, error);
        /* istanbul ignore next */
        cov_f0x49w9iw().s[177]++;
        results.push({
          fileName: file.name,
          error: error.message
        });
      }
    }
    const batchResult =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[178]++, {
      results,
      summary: {
        totalFiles: files.length,
        successfulGenerations: results.filter(r => {
          /* istanbul ignore next */
          cov_f0x49w9iw().f[34]++;
          cov_f0x49w9iw().s[179]++;
          return !r.error;
        }).length,
        failedGenerations: results.filter(r => {
          /* istanbul ignore next */
          cov_f0x49w9iw().f[35]++;
          cov_f0x49w9iw().s[180]++;
          return r.error;
        }).length,
        processingTime: Date.now() - batchStartTime
      }
    });
    /* istanbul ignore next */
    cov_f0x49w9iw().s[181]++;
    this.logger.info('Batch test generation completed', batchResult.summary);
    /* istanbul ignore next */
    cov_f0x49w9iw().s[182]++;
    return this.responseFormatter.success(batchResult, 'Batch test generation completed');
  }

  /**
   * Get supported test frameworks for a language
   */
  getSupportedFrameworks(language =
  /* istanbul ignore next */
  (cov_f0x49w9iw().b[54][0]++, 'javascript')) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[36]++;
    cov_f0x49w9iw().s[183]++;
    return /* istanbul ignore next */(cov_f0x49w9iw().b[55][0]++, this.testFrameworks[language.toLowerCase()]) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[55][1]++, this.testFrameworks.javascript);
  }

  /**
   * Get framework configuration
   */
  getFrameworkConfig(language, framework) {
    /* istanbul ignore next */
    cov_f0x49w9iw().f[37]++;
    const frameworks =
    /* istanbul ignore next */
    (cov_f0x49w9iw().s[184]++, this.getSupportedFrameworks(language));
    /* istanbul ignore next */
    cov_f0x49w9iw().s[185]++;
    return /* istanbul ignore next */(cov_f0x49w9iw().b[56][0]++, frameworks[framework]) ||
    /* istanbul ignore next */
    (cov_f0x49w9iw().b[56][1]++, frameworks[Object.keys(frameworks)[0]]);
  }
}
/* istanbul ignore next */
cov_f0x49w9iw().s[186]++;
module.exports = new TestGenerator();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,