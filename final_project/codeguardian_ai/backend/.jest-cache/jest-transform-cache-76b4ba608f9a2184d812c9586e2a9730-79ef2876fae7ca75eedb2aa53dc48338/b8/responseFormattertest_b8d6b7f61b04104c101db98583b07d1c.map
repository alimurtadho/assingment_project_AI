{"version":3,"names":["ResponseFormatter","require","describe","test","message","data","id","name","result","success","expect","toEqual","timestamp","any","String","Date","toBeInstanceOf","toBe","toBeNull","statusCode","errorCode","details","field","issue","error","testCases","expectedCode","forEach","pagination","page","limit","total","totalPages","paginated","hasNext","hasPrev","metadata","count","length","hasData","firstPage","middlePage","lastPage","errors","validation","errorCount","resource","location","created","toBeUndefined","version","updated","deleted","customMessage","toMatch","promises","Array","fill","map","Promise","resolve","results","all","timestamps","r","uniqueTimestamps","Set","size","toBeGreaterThan","circular","self","not","toThrow","largeObject","_","i","value","toHaveLength","input","undefined","expected"],"sources":["responseFormatter.test.js"],"sourcesContent":["/**\n * Unit Tests for ResponseFormatter Utility\n * Tests all methods and edge cases for API response formatting\n */\n\nconst ResponseFormatter = require('../../../utils/responseFormatter');\n\ndescribe('ResponseFormatter Utility', () => {\n    describe('success method', () => {\n        test('should create success response with data', () => {\n            const message = 'Operation successful';\n            const data = { id: 1, name: 'test' };\n            \n            const result = ResponseFormatter.success(message, data);\n            \n            expect(result).toEqual({\n                success: true,\n                message,\n                data,\n                timestamp: expect.any(String)\n            });\n            \n            // Verify timestamp is a valid ISO string\n            expect(new Date(result.timestamp)).toBeInstanceOf(Date);\n        });\n\n        test('should create success response without data', () => {\n            const message = 'Operation successful';\n            \n            const result = ResponseFormatter.success(message);\n            \n            expect(result).toEqual({\n                success: true,\n                message,\n                data: null,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle null message', () => {\n            const result = ResponseFormatter.success(null, { test: 'data' });\n            \n            expect(result.success).toBe(true);\n            expect(result.message).toBeNull();\n            expect(result.data).toEqual({ test: 'data' });\n        });\n\n        test('should handle empty object data', () => {\n            const result = ResponseFormatter.success('Success', {});\n            \n            expect(result.success).toBe(true);\n            expect(result.data).toEqual({});\n        });\n    });\n\n    describe('error method', () => {\n        test('should create error response with all parameters', () => {\n            const message = 'Validation failed';\n            const statusCode = 400;\n            const errorCode = 'VALIDATION_ERROR';\n            const details = { field: 'email', issue: 'invalid format' };\n            \n            const result = ResponseFormatter.error(message, statusCode, errorCode, details);\n            \n            expect(result).toEqual({\n                success: false,\n                message,\n                statusCode,\n                errorCode,\n                details,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should create error response with minimal parameters', () => {\n            const message = 'Something went wrong';\n            \n            const result = ResponseFormatter.error(message);\n            \n            expect(result).toEqual({\n                success: false,\n                message,\n                statusCode: 500,\n                errorCode: 'INTERNAL_ERROR',\n                details: null,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle custom status codes', () => {\n            const testCases = [\n                { statusCode: 400, expectedCode: 'VALIDATION_ERROR' },\n                { statusCode: 401, expectedCode: 'UNAUTHORIZED' },\n                { statusCode: 403, expectedCode: 'FORBIDDEN' },\n                { statusCode: 404, expectedCode: 'NOT_FOUND' },\n                { statusCode: 409, expectedCode: 'CONFLICT' },\n                { statusCode: 429, expectedCode: 'RATE_LIMIT_EXCEEDED' },\n                { statusCode: 500, expectedCode: 'INTERNAL_ERROR' }\n            ];\n\n            testCases.forEach(({ statusCode, expectedCode }) => {\n                const result = ResponseFormatter.error('Test error', statusCode);\n                expect(result.statusCode).toBe(statusCode);\n                expect(result.errorCode).toBe(expectedCode);\n            });\n        });\n\n        test('should handle unknown status codes', () => {\n            const result = ResponseFormatter.error('Unknown error', 418);\n            \n            expect(result.statusCode).toBe(418);\n            expect(result.errorCode).toBe('UNKNOWN_ERROR');\n        });\n    });\n\n    describe('paginated method', () => {\n        test('should create paginated response with full pagination info', () => {\n            const data = [{ id: 1 }, { id: 2 }, { id: 3 }];\n            const pagination = {\n                page: 1,\n                limit: 10,\n                total: 25,\n                totalPages: 3\n            };\n            const message = 'Data retrieved successfully';\n            \n            const result = ResponseFormatter.paginated(data, pagination, message);\n            \n            expect(result).toEqual({\n                success: true,\n                message,\n                data,\n                pagination: {\n                    ...pagination,\n                    hasNext: true,\n                    hasPrev: false\n                },\n                metadata: {\n                    count: data.length,\n                    hasData: true\n                },\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should calculate hasNext and hasPrev correctly', () => {\n            const data = [{ id: 1 }];\n            \n            // First page\n            const firstPage = ResponseFormatter.paginated(data, {\n                page: 1, limit: 10, total: 25, totalPages: 3\n            });\n            expect(firstPage.pagination.hasNext).toBe(true);\n            expect(firstPage.pagination.hasPrev).toBe(false);\n            \n            // Middle page\n            const middlePage = ResponseFormatter.paginated(data, {\n                page: 2, limit: 10, total: 25, totalPages: 3\n            });\n            expect(middlePage.pagination.hasNext).toBe(true);\n            expect(middlePage.pagination.hasPrev).toBe(true);\n            \n            // Last page\n            const lastPage = ResponseFormatter.paginated(data, {\n                page: 3, limit: 10, total: 25, totalPages: 3\n            });\n            expect(lastPage.pagination.hasNext).toBe(false);\n            expect(lastPage.pagination.hasPrev).toBe(true);\n        });\n\n        test('should handle empty data array', () => {\n            const data = [];\n            const pagination = { page: 1, limit: 10, total: 0, totalPages: 0 };\n            \n            const result = ResponseFormatter.paginated(data, pagination);\n            \n            expect(result.data).toEqual([]);\n            expect(result.metadata.hasData).toBe(false);\n            expect(result.metadata.count).toBe(0);\n        });\n\n        test('should use default message when not provided', () => {\n            const data = [{ id: 1 }];\n            const pagination = { page: 1, limit: 10, total: 1, totalPages: 1 };\n            \n            const result = ResponseFormatter.paginated(data, pagination);\n            \n            expect(result.message).toBe('Data retrieved successfully');\n        });\n    });\n\n    describe('validation method', () => {\n        test('should create validation error response', () => {\n            const errors = [\n                { field: 'email', message: 'Email is required' },\n                { field: 'password', message: 'Password too short' }\n            ];\n            \n            const result = ResponseFormatter.validation(errors);\n            \n            expect(result).toEqual({\n                success: false,\n                message: 'Validation failed',\n                statusCode: 400,\n                errorCode: 'VALIDATION_ERROR',\n                details: {\n                    errors,\n                    errorCount: 2\n                },\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle single error object', () => {\n            const error = { field: 'name', message: 'Name is required' };\n            \n            const result = ResponseFormatter.validation(error);\n            \n            expect(result.details.errors).toEqual([error]);\n            expect(result.details.errorCount).toBe(1);\n        });\n\n        test('should handle empty errors array', () => {\n            const result = ResponseFormatter.validation([]);\n            \n            expect(result.details.errors).toEqual([]);\n            expect(result.details.errorCount).toBe(0);\n        });\n    });\n\n    describe('created method', () => {\n        test('should create resource created response', () => {\n            const resource = { id: 123, name: 'New Resource' };\n            const location = '/api/resources/123';\n            \n            const result = ResponseFormatter.created(resource, location);\n            \n            expect(result).toEqual({\n                success: true,\n                message: 'Resource created successfully',\n                data: resource,\n                statusCode: 201,\n                location,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should work without location', () => {\n            const resource = { id: 123 };\n            \n            const result = ResponseFormatter.created(resource);\n            \n            expect(result.statusCode).toBe(201);\n            expect(result.location).toBeUndefined();\n        });\n    });\n\n    describe('updated method', () => {\n        test('should create resource updated response', () => {\n            const resource = { id: 123, name: 'Updated Resource', version: 2 };\n            \n            const result = ResponseFormatter.updated(resource);\n            \n            expect(result).toEqual({\n                success: true,\n                message: 'Resource updated successfully',\n                data: resource,\n                statusCode: 200,\n                timestamp: expect.any(String)\n            });\n        });\n    });\n\n    describe('deleted method', () => {\n        test('should create resource deleted response', () => {\n            const result = ResponseFormatter.deleted();\n            \n            expect(result).toEqual({\n                success: true,\n                message: 'Resource deleted successfully',\n                data: null,\n                statusCode: 204,\n                timestamp: expect.any(String)\n            });\n        });\n\n        test('should handle custom message', () => {\n            const customMessage = 'User account has been permanently deleted';\n            \n            const result = ResponseFormatter.deleted(customMessage);\n            \n            expect(result.message).toBe(customMessage);\n        });\n    });\n\n    describe('timestamp handling', () => {\n        test('should generate ISO timestamp', () => {\n            const result = ResponseFormatter.success('Test');\n            \n            expect(result.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\n        });\n\n        test('should generate unique timestamps for concurrent calls', async () => {\n            const promises = Array(10).fill().map(() => \n                Promise.resolve(ResponseFormatter.success('Test'))\n            );\n            \n            const results = await Promise.all(promises);\n            const timestamps = results.map(r => r.timestamp);\n            \n            // All timestamps should be unique or very close\n            const uniqueTimestamps = new Set(timestamps);\n            expect(uniqueTimestamps.size).toBeGreaterThan(1);\n        });\n    });\n\n    describe('edge cases and error conditions', () => {\n        test('should handle circular reference in data', () => {\n            const circular = { name: 'test' };\n            circular.self = circular;\n            \n            // Should not throw an error\n            expect(() => {\n                ResponseFormatter.success('Test', circular);\n            }).not.toThrow();\n        });\n\n        test('should handle very large objects', () => {\n            const largeObject = {\n                data: Array(1000).fill().map((_, i) => ({ id: i, value: `item_${i}` }))\n            };\n            \n            const result = ResponseFormatter.success('Large data', largeObject);\n            \n            expect(result.success).toBe(true);\n            expect(result.data.data).toHaveLength(1000);\n        });\n\n        test('should handle special characters in messages', () => {\n            const message = 'Message with émojis 🚀 and spëcial chars: @#$%^&*()';\n            \n            const result = ResponseFormatter.success(message);\n            \n            expect(result.message).toBe(message);\n        });\n\n        test('should handle undefined and null values properly', () => {\n            const testCases = [\n                { input: undefined, expected: null },\n                { input: null, expected: null },\n                { input: '', expected: '' },\n                { input: 0, expected: 0 },\n                { input: false, expected: false }\n            ];\n\n            testCases.forEach(({ input, expected }) => {\n                const result = ResponseFormatter.success('Test', input);\n                expect(result.data).toBe(expected);\n            });\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}