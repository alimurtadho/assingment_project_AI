{"version":3,"names":["cov_1w1jsij0n3","actualCoverage","OpenAI","s","require","ResponseFormatter","ValidationUtils","Logger","ErrorHandler","AIReviewer","constructor","f","logger","validationUtils","responseFormatter","initializeOpenAI","prompts","initializePrompts","config","maxTokens","temperature","model","retryAttempts","retryDelay","process","env","OPENAI_API_KEY","b","Error","openai","apiKey","info","error","createError","codeReview","system","user","refactoring","security","performance","review","code","options","reviewType","type","startTime","Date","now","codeLength","length","validateReviewInput","prompt","preparePrompt","aiResponse","executeReviewWithRetry","reviewResult","processReviewResponse","result","metadata","timestamp","toISOString","processingTime","modelUsed","codeMetrics","analyzeCodeMetrics","issuesFound","issues","success","message","validateCodeInput","warn","promptTemplate","contextInfo","language","framework","focus","join","role","content","messages","lastError","attempt","debug","response","chat","completions","create","max_tokens","response_format","choices","delay","parsed","JSON","parse","validateResponseStructure","enhanceReviewResponse","requiredFields","required","field","map","issue","index","id","priorityScore","calculatePriorityScore","actionableItems","extractActionableItems","weights","CRITICAL","HIGH","MEDIUM","LOW","totalWeight","reduce","sum","severity","Math","min","round","items","filter","forEach","push","priority","description","recommendation","location","suggestions","suggestion","lines","split","nonEmptyLines","line","trim","commentLines","startsWith","totalLines","linesOfCode","commentRatio","averageLineLength","ms","Promise","resolve","setTimeout","batchReview","files","results","batchStartTime","fileCount","file","entries","fileName","name","batchResult","summary","totalFiles","successfulReviews","r","failedReviews","module","exports"],"sources":["aiReviewer.js"],"sourcesContent":["/**\n * Enhanced AI Code Reviewer Service\n * Uses OpenAI GPT-4 to perform intelligent code review with improved architecture\n */\n\nconst OpenAI = require('openai');\nconst ResponseFormatter = require('../utils/responseFormatter');\nconst ValidationUtils = require('../utils/validationUtils');\nconst Logger = require('../utils/logger');\nconst ErrorHandler = require('../utils/errorHandler');\n\nclass AIReviewer {\n  constructor() {\n    this.logger = Logger;\n    this.validationUtils = ValidationUtils;\n    this.responseFormatter = ResponseFormatter;\n    \n    // Initialize OpenAI with proper error handling\n    this.initializeOpenAI();\n    \n    // Enhanced prompts for different review types\n    this.prompts = this.initializePrompts();\n    \n    // Review configuration\n    this.config = {\n      maxTokens: 4000,\n      temperature: 0.1,\n      model: 'gpt-4',\n      retryAttempts: 3,\n      retryDelay: 1000\n    };\n  }\n\n  /**\n   * Initialize OpenAI client with proper validation\n   */\n  initializeOpenAI() {\n    try {\n      if (!process.env.OPENAI_API_KEY) {\n        throw new Error('OPENAI_API_KEY environment variable is required');\n      }\n\n      this.openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY\n      });\n\n      this.logger.info('OpenAI client initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize OpenAI client', error);\n      throw ErrorHandler.createError('OPENAI_INIT_FAILED', 'Failed to initialize OpenAI client', 500);\n    }\n  }\n\n  /**\n   * Initialize enhanced prompts for different review types\n   */\n  initializePrompts() {\n    return {\n      codeReview: {\n        system: `You are an expert software engineer conducting a comprehensive code review. \nYour analysis should be thorough, constructive, and actionable.`,\n        \n        user: `Analyze the provided code and identify:\n\n1. **Code Quality Issues:**\n   - Readability and maintainability concerns\n   - Best practice violations\n   - Code organization and structure\n   - Naming conventions and clarity\n\n2. **Performance Concerns:**\n   - Algorithmic efficiency\n   - Memory usage patterns\n   - Database query optimization\n   - Resource management\n\n3. **Security Vulnerabilities:**\n   - Input validation issues\n   - Authentication/authorization gaps\n   - Data exposure risks\n   - Injection vulnerabilities\n\n4. **Bug Potential:**\n   - Logic errors and edge cases\n   - Error handling gaps\n   - Race conditions\n   - Null pointer risks\n\n5. **Design Pattern Violations:**\n   - SOLID principles adherence\n   - Appropriate pattern usage\n   - Coupling and cohesion\n   - Separation of concerns\n\n6. **Testing Gaps:**\n   - Test coverage assessment\n   - Test quality evaluation\n   - Missing test scenarios\n\nFor each issue, provide:\n- Issue category and severity (CRITICAL/HIGH/MEDIUM/LOW)\n- Specific line numbers or code blocks\n- Clear problem description\n- Actionable recommendations\n- Code examples when helpful\n- Estimated effort to fix\n\nRespond in valid JSON format:\n{\n  \"reviewSummary\": {\n    \"overallScore\": 1-10,\n    \"codeQuality\": 1-10,\n    \"security\": 1-10,\n    \"performance\": 1-10,\n    \"maintainability\": 1-10,\n    \"summary\": \"Brief overall assessment\"\n  },\n  \"issues\": [\n    {\n      \"id\": \"unique_id\",\n      \"category\": \"Code Quality|Performance|Security|Bug Risk|Design|Testing\",\n      \"severity\": \"CRITICAL|HIGH|MEDIUM|LOW\",\n      \"title\": \"Brief issue title\",\n      \"description\": \"Detailed description\",\n      \"location\": {\n        \"line\": number,\n        \"function\": \"function_name\",\n        \"file\": \"file_context\"\n      },\n      \"impact\": \"Description of potential impact\",\n      \"recommendation\": \"Specific fix recommendation\",\n      \"example\": \"Code example if applicable\",\n      \"effort\": \"LOW|MEDIUM|HIGH\",\n      \"tags\": [\"relevant\", \"tags\"]\n    }\n  ],\n  \"strengths\": [\n    {\n      \"aspect\": \"What is done well\",\n      \"description\": \"Why it's good\"\n    }\n  ],\n  \"suggestions\": [\n    {\n      \"category\": \"General improvement area\",\n      \"priority\": \"HIGH|MEDIUM|LOW\",\n      \"description\": \"Improvement suggestion\",\n      \"benefits\": \"Expected benefits\"\n    }\n  ],\n  \"metrics\": {\n    \"linesOfCode\": number,\n    \"complexityScore\": 1-10,\n    \"duplicatedCode\": \"percentage\",\n    \"testCoverage\": \"estimated_percentage\"\n  }\n}`\n      },\n\n      refactoring: {\n        system: `You are an expert software architect providing refactoring recommendations.\nFocus on improving code structure, maintainability, and adherence to best practices.`,\n        \n        user: `Analyze the code and provide specific refactoring suggestions:\n\n1. **Structural Improvements:**\n   - Code organization and modularity\n   - Function and class decomposition\n   - Dependency management\n\n2. **Design Pattern Applications:**\n   - Appropriate pattern recommendations\n   - Anti-pattern elimination\n   - Architecture improvements\n\n3. **Code Optimization:**\n   - Performance optimizations\n   - Memory usage improvements\n   - Algorithm enhancements\n\n4. **Maintainability Enhancements:**\n   - Code readability improvements\n   - Documentation suggestions\n   - Error handling enhancements\n\nProvide specific refactoring steps with code examples.\n\nRespond in JSON format:\n{\n  \"refactoringPlan\": {\n    \"priority\": \"HIGH|MEDIUM|LOW\",\n    \"estimatedEffort\": \"hours_estimate\",\n    \"overview\": \"High-level refactoring strategy\"\n  },\n  \"refactorings\": [\n    {\n      \"id\": \"unique_id\",\n      \"type\": \"Extract Method|Extract Class|Rename|Move|Inline|etc\",\n      \"priority\": \"HIGH|MEDIUM|LOW\",\n      \"title\": \"Refactoring title\",\n      \"description\": \"What to refactor and why\",\n      \"currentCode\": \"Code before refactoring\",\n      \"refactoredCode\": \"Code after refactoring\",\n      \"benefits\": [\"List of benefits\"],\n      \"effort\": \"hours_estimate\",\n      \"dependencies\": [\"Other refactorings this depends on\"]\n    }\n  ],\n  \"architecturalSuggestions\": [\n    {\n      \"area\": \"Architecture component\",\n      \"suggestion\": \"Improvement recommendation\",\n      \"reasoning\": \"Why this improvement is needed\"\n    }\n  ]\n}`\n      },\n\n      security: {\n        system: `You are a cybersecurity expert conducting a security-focused code review.\nIdentify potential vulnerabilities and security best practice violations.`,\n        \n        user: `Perform a comprehensive security analysis:\n\n1. **Vulnerability Assessment:**\n   - Input validation issues\n   - Authentication/authorization flaws\n   - Data exposure risks\n   - Injection vulnerabilities\n\n2. **Security Best Practices:**\n   - Secure coding practices\n   - Error handling security\n   - Logging security\n   - Configuration security\n\n3. **Compliance Considerations:**\n   - OWASP Top 10 compliance\n   - Industry standard adherence\n   - Privacy requirements\n\nRespond with specific security recommendations and remediation steps.\n\nJSON format:\n{\n  \"securityAssessment\": {\n    \"overallRiskLevel\": \"CRITICAL|HIGH|MEDIUM|LOW\",\n    \"vulnerabilityCount\": number,\n    \"complianceScore\": 1-10,\n    \"summary\": \"Security assessment summary\"\n  },\n  \"vulnerabilities\": [\n    {\n      \"id\": \"vuln_id\",\n      \"type\": \"OWASP category\",\n      \"severity\": \"CRITICAL|HIGH|MEDIUM|LOW\",\n      \"title\": \"Vulnerability title\",\n      \"description\": \"Detailed vulnerability description\",\n      \"location\": \"Code location\",\n      \"impact\": \"Potential impact description\",\n      \"remediation\": \"Step-by-step fix\",\n      \"references\": [\"CWE-XXX\", \"OWASP links\"]\n    }\n  ],\n  \"recommendations\": [\n    {\n      \"category\": \"Security area\",\n      \"priority\": \"HIGH|MEDIUM|LOW\",\n      \"recommendation\": \"Security improvement\",\n      \"implementation\": \"How to implement\"\n    }\n  ]\n}`\n      },\n\n      performance: {\n        system: `You are a performance optimization expert analyzing code for efficiency improvements.`,\n        \n        user: `Analyze the code for performance optimization opportunities:\n\n1. **Algorithm Efficiency:**\n   - Time complexity analysis\n   - Space complexity concerns\n   - Algorithm choice validation\n\n2. **Resource Management:**\n   - Memory usage patterns\n   - Database query efficiency\n   - I/O optimization\n\n3. **Scalability Concerns:**\n   - Bottleneck identification\n   - Concurrency issues\n   - Load handling capacity\n\nProvide actionable performance improvement recommendations.\n\nJSON format:\n{\n  \"performanceAssessment\": {\n    \"overallScore\": 1-10,\n    \"bottlenecks\": number,\n    \"scalabilityScore\": 1-10,\n    \"summary\": \"Performance assessment summary\"\n  },\n  \"optimizations\": [\n    {\n      \"id\": \"opt_id\",\n      \"type\": \"Algorithm|Database|Memory|I/O|Concurrency\",\n      \"priority\": \"HIGH|MEDIUM|LOW\",\n      \"title\": \"Optimization title\",\n      \"description\": \"Performance issue description\",\n      \"currentComplexity\": \"Big O notation\",\n      \"proposedComplexity\": \"Improved Big O\",\n      \"expectedImprovement\": \"Performance gain description\",\n      \"implementation\": \"How to implement the optimization\",\n      \"tradeoffs\": \"Any trade-offs to consider\"\n    }\n  ],\n  \"metrics\": {\n    \"estimatedSpeedImprovement\": \"percentage\",\n    \"memoryReduction\": \"percentage\",\n    \"scalabilityImprovement\": \"description\"\n  }\n}`\n      }\n    };\n  }\n\n  /**\n   * Enhanced review method with retry logic and better error handling\n   */\n  async review(code, options = {}) {\n    const reviewType = options.type || 'codeReview';\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('Starting AI code review', { \n        reviewType, \n        codeLength: code.length,\n        options \n      });\n\n      // Validate inputs\n      this.validateReviewInput(code, reviewType);\n\n      // Prepare the review request\n      const prompt = this.preparePrompt(code, reviewType, options);\n      \n      // Execute review with retry logic\n      const aiResponse = await this.executeReviewWithRetry(prompt);\n      \n      // Process and validate the response\n      const reviewResult = await this.processReviewResponse(aiResponse, reviewType);\n      \n      // Add metadata\n      const result = {\n        ...reviewResult,\n        metadata: {\n          reviewType,\n          timestamp: new Date().toISOString(),\n          processingTime: Date.now() - startTime,\n          modelUsed: this.config.model,\n          codeMetrics: this.analyzeCodeMetrics(code)\n        }\n      };\n\n      this.logger.info('AI code review completed', {\n        reviewType,\n        processingTime: result.metadata.processingTime,\n        issuesFound: reviewResult.issues?.length || 0\n      });\n\n      return this.responseFormatter.success(result, 'Code review completed successfully');\n\n    } catch (error) {\n      this.logger.error('AI code review failed', { error: error.message, reviewType });\n      \n      if (error.code === 'insufficient_quota') {\n        throw ErrorHandler.createError('QUOTA_EXCEEDED', 'AI service quota exceeded', 429);\n      }\n      \n      throw ErrorHandler.createError(\n        'REVIEW_FAILED', \n        `AI code review failed: ${error.message}`, \n        500\n      );\n    }\n  }\n\n  /**\n   * Validate review input parameters\n   */\n  validateReviewInput(code, reviewType) {\n    if (!this.validationUtils.validateCodeInput(code)) {\n      throw new Error('Invalid code input provided');\n    }\n\n    if (!this.prompts[reviewType]) {\n      throw new Error(`Unsupported review type: ${reviewType}`);\n    }\n\n    if (code.length > 50000) {\n      this.logger.warn('Large code file detected', { codeLength: code.length });\n    }\n  }\n\n  /**\n   * Prepare prompt for AI review\n   */\n  preparePrompt(code, reviewType, options) {\n    const promptTemplate = this.prompts[reviewType];\n    \n    // Add context if provided\n    let contextInfo = '';\n    if (options.language) {\n      contextInfo += `Programming Language: ${options.language}\\n`;\n    }\n    if (options.framework) {\n      contextInfo += `Framework: ${options.framework}\\n`;\n    }\n    if (options.focus) {\n      contextInfo += `Focus Areas: ${options.focus.join(', ')}\\n`;\n    }\n\n    return [\n      {\n        role: 'system',\n        content: promptTemplate.system\n      },\n      {\n        role: 'user',\n        content: `${contextInfo}\\n\\nCode to review:\\n\\`\\`\\`\\n${code}\\n\\`\\`\\`\\n\\n${promptTemplate.user}`\n      }\n    ];\n  }\n\n  /**\n   * Execute review with retry logic\n   */\n  async executeReviewWithRetry(messages) {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {\n      try {\n        this.logger.debug(`AI review attempt ${attempt}/${this.config.retryAttempts}`);\n        \n        const response = await this.openai.chat.completions.create({\n          model: this.config.model,\n          messages,\n          max_tokens: this.config.maxTokens,\n          temperature: this.config.temperature,\n          response_format: { type: 'json_object' }\n        });\n\n        if (!response.choices?.[0]?.message?.content) {\n          throw new Error('Empty response from AI service');\n        }\n\n        return response.choices[0].message.content;\n\n      } catch (error) {\n        lastError = error;\n        this.logger.warn(`AI review attempt ${attempt} failed`, { error: error.message });\n        \n        if (attempt < this.config.retryAttempts) {\n          await this.delay(this.config.retryDelay * attempt);\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Process and validate AI response\n   */\n  async processReviewResponse(response, reviewType) {\n    try {\n      const parsed = JSON.parse(response);\n      \n      // Validate response structure based on review type\n      this.validateResponseStructure(parsed, reviewType);\n      \n      // Enhance the response with additional processing\n      return this.enhanceReviewResponse(parsed, reviewType);\n      \n    } catch (error) {\n      this.logger.error('Failed to process AI response', { error: error.message });\n      throw new Error(`Invalid AI response format: ${error.message}`);\n    }\n  }\n\n  /**\n   * Validate response structure\n   */\n  validateResponseStructure(response, reviewType) {\n    const requiredFields = {\n      codeReview: ['reviewSummary', 'issues'],\n      refactoring: ['refactoringPlan', 'refactorings'],\n      security: ['securityAssessment', 'vulnerabilities'],\n      performance: ['performanceAssessment', 'optimizations']\n    };\n\n    const required = requiredFields[reviewType] || requiredFields.codeReview;\n    \n    for (const field of required) {\n      if (!response[field]) {\n        throw new Error(`Missing required field: ${field}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance review response with additional data\n   */\n  enhanceReviewResponse(response, reviewType) {\n    // Add unique IDs if missing\n    if (response.issues) {\n      response.issues = response.issues.map((issue, index) => ({\n        id: issue.id || `issue_${Date.now()}_${index}`,\n        ...issue\n      }));\n    }\n\n    // Add priority scoring\n    if (response.issues) {\n      response.priorityScore = this.calculatePriorityScore(response.issues);\n    }\n\n    // Add actionable items summary\n    response.actionableItems = this.extractActionableItems(response);\n\n    return response;\n  }\n\n  /**\n   * Calculate priority score based on issues\n   */\n  calculatePriorityScore(issues) {\n    const weights = { CRITICAL: 10, HIGH: 7, MEDIUM: 4, LOW: 1 };\n    const totalWeight = issues.reduce((sum, issue) => {\n      return sum + (weights[issue.severity] || 1);\n    }, 0);\n    \n    return Math.min(100, Math.round(totalWeight / issues.length * 10));\n  }\n\n  /**\n   * Extract actionable items from review\n   */\n  extractActionableItems(response) {\n    const items = [];\n    \n    // Extract from issues\n    if (response.issues) {\n      response.issues\n        .filter(issue => issue.severity === 'HIGH' || issue.severity === 'CRITICAL')\n        .forEach(issue => {\n          items.push({\n            type: 'fix',\n            priority: issue.severity,\n            description: issue.recommendation || issue.description,\n            location: issue.location\n          });\n        });\n    }\n\n    // Extract from suggestions\n    if (response.suggestions) {\n      response.suggestions\n        .filter(suggestion => suggestion.priority === 'HIGH')\n        .forEach(suggestion => {\n          items.push({\n            type: 'improvement',\n            priority: suggestion.priority,\n            description: suggestion.description\n          });\n        });\n    }\n\n    return items;\n  }\n\n  /**\n   * Analyze basic code metrics\n   */\n  analyzeCodeMetrics(code) {\n    const lines = code.split('\\n');\n    const nonEmptyLines = lines.filter(line => line.trim().length > 0);\n    const commentLines = lines.filter(line => \n      line.trim().startsWith('//') || \n      line.trim().startsWith('#') || \n      line.trim().startsWith('/*')\n    );\n\n    return {\n      totalLines: lines.length,\n      linesOfCode: nonEmptyLines.length,\n      commentLines: commentLines.length,\n      commentRatio: Math.round((commentLines.length / nonEmptyLines.length) * 100),\n      averageLineLength: Math.round(\n        nonEmptyLines.reduce((sum, line) => sum + line.length, 0) / nonEmptyLines.length\n      )\n    };\n  }\n\n  /**\n   * Utility delay function\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Batch review multiple files\n   */\n  async batchReview(files, options = {}) {\n    const results = [];\n    const batchStartTime = Date.now();\n\n    this.logger.info('Starting batch code review', { fileCount: files.length });\n\n    for (const [index, file] of files.entries()) {\n      try {\n        this.logger.debug(`Processing file ${index + 1}/${files.length}`, { fileName: file.name });\n        \n        const result = await this.review(file.content, {\n          ...options,\n          fileName: file.name\n        });\n        \n        results.push({\n          fileName: file.name,\n          ...result\n        });\n\n      } catch (error) {\n        this.logger.error(`Failed to review file: ${file.name}`, error);\n        results.push({\n          fileName: file.name,\n          error: error.message\n        });\n      }\n    }\n\n    const batchResult = {\n      results,\n      summary: {\n        totalFiles: files.length,\n        successfulReviews: results.filter(r => !r.error).length,\n        failedReviews: results.filter(r => r.error).length,\n        processingTime: Date.now() - batchStartTime\n      }\n    };\n\n    this.logger.info('Batch code review completed', batchResult.summary);\n\n    return this.responseFormatter.success(batchResult, 'Batch code review completed');\n  }\n}\n\nmodule.exports = new AIReviewer();\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA;AACA;AACA;;AAEA,MAAME,MAAM;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,iBAAiB;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC/D,MAAME,eAAe;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AAC3D,MAAMG,MAAM;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,iBAAiB,CAAC;AACzC,MAAMI,YAAY;AAAA;AAAA,CAAAR,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,uBAAuB,CAAC;AAErD,MAAMK,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IAAA;IAAAV,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IACZ,IAAI,CAACS,MAAM,GAAGL,MAAM;IAAC;IAAAP,cAAA,GAAAG,CAAA;IACrB,IAAI,CAACU,eAAe,GAAGP,eAAe;IAAC;IAAAN,cAAA,GAAAG,CAAA;IACvC,IAAI,CAACW,iBAAiB,GAAGT,iBAAiB;;IAE1C;IAAA;IAAAL,cAAA,GAAAG,CAAA;IACA,IAAI,CAACY,gBAAgB,CAAC,CAAC;;IAEvB;IAAA;IAAAf,cAAA,GAAAG,CAAA;IACA,IAAI,CAACa,OAAO,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;;IAEvC;IAAA;IAAAjB,cAAA,GAAAG,CAAA;IACA,IAAI,CAACe,MAAM,GAAG;MACZC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,GAAG;MAChBC,KAAK,EAAE,OAAO;MACdC,aAAa,EAAE,CAAC;MAChBC,UAAU,EAAE;IACd,CAAC;EACH;;EAEA;AACF;AACA;EACER,gBAAgBA,CAAA,EAAG;IAAA;IAAAf,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IACjB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAACqB,OAAO,CAACC,GAAG,CAACC,cAAc,EAAE;QAAA;QAAA1B,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QAC/B,MAAM,IAAIyB,KAAK,CAAC,iDAAiD,CAAC;MACpE,CAAC;MAAA;MAAA;QAAA5B,cAAA,GAAA2B,CAAA;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAED,IAAI,CAAC0B,MAAM,GAAG,IAAI3B,MAAM,CAAC;QACvB4B,MAAM,EAAEN,OAAO,CAACC,GAAG,CAACC;MACtB,CAAC,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAEH,IAAI,CAACS,MAAM,CAACmB,IAAI,CAAC,wCAAwC,CAAC;IAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAhC,cAAA,GAAAG,CAAA;MACd,IAAI,CAACS,MAAM,CAACoB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MAC/D,MAAMK,YAAY,CAACyB,WAAW,CAAC,oBAAoB,EAAE,oCAAoC,EAAE,GAAG,CAAC;IACjG;EACF;;EAEA;AACF;AACA;EACEhB,iBAAiBA,CAAA,EAAG;IAAA;IAAAjB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IAClB,OAAO;MACL+B,UAAU,EAAE;QACVC,MAAM,EAAE;AAChB,gEAAgE;QAExDC,IAAI,EAAE;AACdhB,qFAAqF;QAE7EC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;MAEDE,QAAQ,EAAE;QACRH,MAAM,EAAE;AAChB,0EAA0E;QAElEC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;MAEDG,WAAW,EAAE;QACXJ,MAAM,EAAE,uFAAuF;QAE/FC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMI,MAAMA,CAACC,IAAI,EAAEC,OAAO;EAAA;EAAA,CAAA1C,cAAA,GAAA2B,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAA3B,cAAA,GAAAW,CAAA;IAC/B,MAAMgC,UAAU;IAAA;IAAA,CAAA3C,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAA2B,CAAA,UAAAe,OAAO,CAACE,IAAI;IAAA;IAAA,CAAA5C,cAAA,GAAA2B,CAAA,UAAI,YAAY;IAC/C,MAAMkB,SAAS;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,QAAG2C,IAAI,CAACC,GAAG,CAAC,CAAC;IAAC;IAAA/C,cAAA,GAAAG,CAAA;IAE7B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAACS,MAAM,CAACmB,IAAI,CAAC,yBAAyB,EAAE;QAC1CY,UAAU;QACVK,UAAU,EAAEP,IAAI,CAACQ,MAAM;QACvBP;MACF,CAAC,CAAC;;MAEF;MAAA;MAAA1C,cAAA,GAAAG,CAAA;MACA,IAAI,CAAC+C,mBAAmB,CAACT,IAAI,EAAEE,UAAU,CAAC;;MAE1C;MACA,MAAMQ,MAAM;MAAA;MAAA,CAAAnD,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACiD,aAAa,CAACX,IAAI,EAAEE,UAAU,EAAED,OAAO,CAAC;;MAE5D;MACA,MAAMW,UAAU;MAAA;MAAA,CAAArD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACmD,sBAAsB,CAACH,MAAM,CAAC;;MAE5D;MACA,MAAMI,YAAY;MAAA;MAAA,CAAAvD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACqD,qBAAqB,CAACH,UAAU,EAAEV,UAAU,CAAC;;MAE7E;MACA,MAAMc,MAAM;MAAA;MAAA,CAAAzD,cAAA,GAAAG,CAAA,QAAG;QACb,GAAGoD,YAAY;QACfG,QAAQ,EAAE;UACRf,UAAU;UACVgB,SAAS,EAAE,IAAIb,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;UACnCC,cAAc,EAAEf,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;UACtCiB,SAAS,EAAE,IAAI,CAAC5C,MAAM,CAACG,KAAK;UAC5B0C,WAAW,EAAE,IAAI,CAACC,kBAAkB,CAACvB,IAAI;QAC3C;MACF,CAAC;MAAC;MAAAzC,cAAA,GAAAG,CAAA;MAEF,IAAI,CAACS,MAAM,CAACmB,IAAI,CAAC,0BAA0B,EAAE;QAC3CY,UAAU;QACVkB,cAAc,EAAEJ,MAAM,CAACC,QAAQ,CAACG,cAAc;QAC9CI,WAAW;QAAE;QAAA,CAAAjE,cAAA,GAAA2B,CAAA,UAAA4B,YAAY,CAACW,MAAM,EAAEjB,MAAM;QAAA;QAAA,CAAAjD,cAAA,GAAA2B,CAAA,UAAI,CAAC;MAC/C,CAAC,CAAC;MAAC;MAAA3B,cAAA,GAAAG,CAAA;MAEH,OAAO,IAAI,CAACW,iBAAiB,CAACqD,OAAO,CAACV,MAAM,EAAE,oCAAoC,CAAC;IAErF,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAAhC,cAAA,GAAAG,CAAA;MACd,IAAI,CAACS,MAAM,CAACoB,KAAK,CAAC,uBAAuB,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACoC,OAAO;QAAEzB;MAAW,CAAC,CAAC;MAAC;MAAA3C,cAAA,GAAAG,CAAA;MAEjF,IAAI6B,KAAK,CAACS,IAAI,KAAK,oBAAoB,EAAE;QAAA;QAAAzC,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QACvC,MAAMK,YAAY,CAACyB,WAAW,CAAC,gBAAgB,EAAE,2BAA2B,EAAE,GAAG,CAAC;MACpF,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAA2B,CAAA;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAED,MAAMK,YAAY,CAACyB,WAAW,CAC5B,eAAe,EACf,0BAA0BD,KAAK,CAACoC,OAAO,EAAE,EACzC,GACF,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACElB,mBAAmBA,CAACT,IAAI,EAAEE,UAAU,EAAE;IAAA;IAAA3C,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IACpC,IAAI,CAAC,IAAI,CAACU,eAAe,CAACwD,iBAAiB,CAAC5B,IAAI,CAAC,EAAE;MAAA;MAAAzC,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACjD,MAAM,IAAIyB,KAAK,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI,CAAC,IAAI,CAACa,OAAO,CAAC2B,UAAU,CAAC,EAAE;MAAA;MAAA3C,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC7B,MAAM,IAAIyB,KAAK,CAAC,4BAA4Be,UAAU,EAAE,CAAC;IAC3D,CAAC;IAAA;IAAA;MAAA3C,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAIsC,IAAI,CAACQ,MAAM,GAAG,KAAK,EAAE;MAAA;MAAAjD,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACvB,IAAI,CAACS,MAAM,CAAC0D,IAAI,CAAC,0BAA0B,EAAE;QAAEtB,UAAU,EAAEP,IAAI,CAACQ;MAAO,CAAC,CAAC;IAC3E,CAAC;IAAA;IAAA;MAAAjD,cAAA,GAAA2B,CAAA;IAAA;EACH;;EAEA;AACF;AACA;EACEyB,aAAaA,CAACX,IAAI,EAAEE,UAAU,EAAED,OAAO,EAAE;IAAA;IAAA1C,cAAA,GAAAW,CAAA;IACvC,MAAM4D,cAAc;IAAA;IAAA,CAAAvE,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACa,OAAO,CAAC2B,UAAU,CAAC;;IAE/C;IACA,IAAI6B,WAAW;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACrB,IAAIuC,OAAO,CAAC+B,QAAQ,EAAE;MAAA;MAAAzE,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACpBqE,WAAW,IAAI,yBAAyB9B,OAAO,CAAC+B,QAAQ,IAAI;IAC9D,CAAC;IAAA;IAAA;MAAAzE,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IACD,IAAIuC,OAAO,CAACgC,SAAS,EAAE;MAAA;MAAA1E,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACrBqE,WAAW,IAAI,cAAc9B,OAAO,CAACgC,SAAS,IAAI;IACpD,CAAC;IAAA;IAAA;MAAA1E,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IACD,IAAIuC,OAAO,CAACiC,KAAK,EAAE;MAAA;MAAA3E,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACjBqE,WAAW,IAAI,gBAAgB9B,OAAO,CAACiC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,IAAI;IAC7D,CAAC;IAAA;IAAA;MAAA5E,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,OAAO,CACL;MACE0E,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAEP,cAAc,CAACpC;IAC1B,CAAC,EACD;MACE0C,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,GAAGN,WAAW,gCAAgC/B,IAAI,eAAe8B,cAAc,CAACnC,IAAI;IAC/F,CAAC,CACF;EACH;;EAEA;AACF;AACA;EACE,MAAMkB,sBAAsBA,CAACyB,QAAQ,EAAE;IAAA;IAAA/E,cAAA,GAAAW,CAAA;IACrC,IAAIqE,SAAS;IAAC;IAAAhF,cAAA,GAAAG,CAAA;IAEd,KAAK,IAAI8E,OAAO;IAAA;IAAA,CAAAjF,cAAA,GAAAG,CAAA,QAAG,CAAC,GAAE8E,OAAO,IAAI,IAAI,CAAC/D,MAAM,CAACI,aAAa,EAAE2D,OAAO,EAAE,EAAE;MAAA;MAAAjF,cAAA,GAAAG,CAAA;MACrE,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACF,IAAI,CAACS,MAAM,CAACsE,KAAK,CAAC,qBAAqBD,OAAO,IAAI,IAAI,CAAC/D,MAAM,CAACI,aAAa,EAAE,CAAC;QAE9E,MAAM6D,QAAQ;QAAA;QAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC0B,MAAM,CAACuD,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;UACzDjE,KAAK,EAAE,IAAI,CAACH,MAAM,CAACG,KAAK;UACxB0D,QAAQ;UACRQ,UAAU,EAAE,IAAI,CAACrE,MAAM,CAACC,SAAS;UACjCC,WAAW,EAAE,IAAI,CAACF,MAAM,CAACE,WAAW;UACpCoE,eAAe,EAAE;YAAE5C,IAAI,EAAE;UAAc;QACzC,CAAC,CAAC;QAAC;QAAA5C,cAAA,GAAAG,CAAA;QAEH,IAAI,CAACgF,QAAQ,CAACM,OAAO,GAAG,CAAC,CAAC,EAAErB,OAAO,EAAEU,OAAO,EAAE;UAAA;UAAA9E,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAG,CAAA;UAC5C,MAAM,IAAIyB,KAAK,CAAC,gCAAgC,CAAC;QACnD,CAAC;QAAA;QAAA;UAAA5B,cAAA,GAAA2B,CAAA;QAAA;QAAA3B,cAAA,GAAAG,CAAA;QAED,OAAOgF,QAAQ,CAACM,OAAO,CAAC,CAAC,CAAC,CAACrB,OAAO,CAACU,OAAO;MAE5C,CAAC,CAAC,OAAO9C,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACd6E,SAAS,GAAGhD,KAAK;QAAC;QAAAhC,cAAA,GAAAG,CAAA;QAClB,IAAI,CAACS,MAAM,CAAC0D,IAAI,CAAC,qBAAqBW,OAAO,SAAS,EAAE;UAAEjD,KAAK,EAAEA,KAAK,CAACoC;QAAQ,CAAC,CAAC;QAAC;QAAApE,cAAA,GAAAG,CAAA;QAElF,IAAI8E,OAAO,GAAG,IAAI,CAAC/D,MAAM,CAACI,aAAa,EAAE;UAAA;UAAAtB,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAG,CAAA;UACvC,MAAM,IAAI,CAACuF,KAAK,CAAC,IAAI,CAACxE,MAAM,CAACK,UAAU,GAAG0D,OAAO,CAAC;QACpD,CAAC;QAAA;QAAA;UAAAjF,cAAA,GAAA2B,CAAA;QAAA;MACH;IACF;IAAC;IAAA3B,cAAA,GAAAG,CAAA;IAED,MAAM6E,SAAS;EACjB;;EAEA;AACF;AACA;EACE,MAAMxB,qBAAqBA,CAAC2B,QAAQ,EAAExC,UAAU,EAAE;IAAA;IAAA3C,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IAChD,IAAI;MACF,MAAMwF,MAAM;MAAA;MAAA,CAAA3F,cAAA,GAAAG,CAAA,QAAGyF,IAAI,CAACC,KAAK,CAACV,QAAQ,CAAC;;MAEnC;MAAA;MAAAnF,cAAA,GAAAG,CAAA;MACA,IAAI,CAAC2F,yBAAyB,CAACH,MAAM,EAAEhD,UAAU,CAAC;;MAElD;MAAA;MAAA3C,cAAA,GAAAG,CAAA;MACA,OAAO,IAAI,CAAC4F,qBAAqB,CAACJ,MAAM,EAAEhD,UAAU,CAAC;IAEvD,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAAhC,cAAA,GAAAG,CAAA;MACd,IAAI,CAACS,MAAM,CAACoB,KAAK,CAAC,+BAA+B,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACoC;MAAQ,CAAC,CAAC;MAAC;MAAApE,cAAA,GAAAG,CAAA;MAC7E,MAAM,IAAIyB,KAAK,CAAC,+BAA+BI,KAAK,CAACoC,OAAO,EAAE,CAAC;IACjE;EACF;;EAEA;AACF;AACA;EACE0B,yBAAyBA,CAACX,QAAQ,EAAExC,UAAU,EAAE;IAAA;IAAA3C,cAAA,GAAAW,CAAA;IAC9C,MAAMqF,cAAc;IAAA;IAAA,CAAAhG,cAAA,GAAAG,CAAA,QAAG;MACrB+B,UAAU,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC;MACvCG,WAAW,EAAE,CAAC,iBAAiB,EAAE,cAAc,CAAC;MAChDC,QAAQ,EAAE,CAAC,oBAAoB,EAAE,iBAAiB,CAAC;MACnDC,WAAW,EAAE,CAAC,uBAAuB,EAAE,eAAe;IACxD,CAAC;IAED,MAAM0D,QAAQ;IAAA;IAAA,CAAAjG,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAA2B,CAAA,WAAAqE,cAAc,CAACrD,UAAU,CAAC;IAAA;IAAA,CAAA3C,cAAA,GAAA2B,CAAA,WAAIqE,cAAc,CAAC9D,UAAU;IAAC;IAAAlC,cAAA,GAAAG,CAAA;IAEzE,KAAK,MAAM+F,KAAK,IAAID,QAAQ,EAAE;MAAA;MAAAjG,cAAA,GAAAG,CAAA;MAC5B,IAAI,CAACgF,QAAQ,CAACe,KAAK,CAAC,EAAE;QAAA;QAAAlG,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QACpB,MAAM,IAAIyB,KAAK,CAAC,2BAA2BsE,KAAK,EAAE,CAAC;MACrD,CAAC;MAAA;MAAA;QAAAlG,cAAA,GAAA2B,CAAA;MAAA;IACH;EACF;;EAEA;AACF;AACA;EACEoE,qBAAqBA,CAACZ,QAAQ,EAAExC,UAAU,EAAE;IAAA;IAAA3C,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IAC1C;IACA,IAAIgF,QAAQ,CAACjB,MAAM,EAAE;MAAA;MAAAlE,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACnBgF,QAAQ,CAACjB,MAAM,GAAGiB,QAAQ,CAACjB,MAAM,CAACiC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAM;QAAA;QAAArG,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAAA;UACvDmG,EAAE;UAAE;UAAA,CAAAtG,cAAA,GAAA2B,CAAA,WAAAyE,KAAK,CAACE,EAAE;UAAA;UAAA,CAAAtG,cAAA,GAAA2B,CAAA,WAAI,SAASmB,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIsD,KAAK,EAAE;UAC9C,GAAGD;QACL,CAAC;MAAD,CAAE,CAAC;IACL,CAAC;IAAA;IAAA;MAAApG,cAAA,GAAA2B,CAAA;IAAA;;IAED;IAAA3B,cAAA,GAAAG,CAAA;IACA,IAAIgF,QAAQ,CAACjB,MAAM,EAAE;MAAA;MAAAlE,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACnBgF,QAAQ,CAACoB,aAAa,GAAG,IAAI,CAACC,sBAAsB,CAACrB,QAAQ,CAACjB,MAAM,CAAC;IACvE,CAAC;IAAA;IAAA;MAAAlE,cAAA,GAAA2B,CAAA;IAAA;;IAED;IAAA3B,cAAA,GAAAG,CAAA;IACAgF,QAAQ,CAACsB,eAAe,GAAG,IAAI,CAACC,sBAAsB,CAACvB,QAAQ,CAAC;IAAC;IAAAnF,cAAA,GAAAG,CAAA;IAEjE,OAAOgF,QAAQ;EACjB;;EAEA;AACF;AACA;EACEqB,sBAAsBA,CAACtC,MAAM,EAAE;IAAA;IAAAlE,cAAA,GAAAW,CAAA;IAC7B,MAAMgG,OAAO;IAAA;IAAA,CAAA3G,cAAA,GAAAG,CAAA,QAAG;MAAEyG,QAAQ,EAAE,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAE,CAAC;IAC5D,MAAMC,WAAW;IAAA;IAAA,CAAAhH,cAAA,GAAAG,CAAA,QAAG+D,MAAM,CAAC+C,MAAM,CAAC,CAACC,GAAG,EAAEd,KAAK,KAAK;MAAA;MAAApG,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAChD,OAAO+G,GAAG;MAAI;MAAA,CAAAlH,cAAA,GAAA2B,CAAA,WAAAgF,OAAO,CAACP,KAAK,CAACe,QAAQ,CAAC;MAAA;MAAA,CAAAnH,cAAA,GAAA2B,CAAA,WAAI,CAAC,EAAC;IAC7C,CAAC,EAAE,CAAC,CAAC;IAAC;IAAA3B,cAAA,GAAAG,CAAA;IAEN,OAAOiH,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,KAAK,CAACN,WAAW,GAAG9C,MAAM,CAACjB,MAAM,GAAG,EAAE,CAAC,CAAC;EACpE;;EAEA;AACF;AACA;EACEyD,sBAAsBA,CAACvB,QAAQ,EAAE;IAAA;IAAAnF,cAAA,GAAAW,CAAA;IAC/B,MAAM4G,KAAK;IAAA;IAAA,CAAAvH,cAAA,GAAAG,CAAA,QAAG,EAAE;;IAEhB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA,IAAIgF,QAAQ,CAACjB,MAAM,EAAE;MAAA;MAAAlE,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACnBgF,QAAQ,CAACjB,MAAM,CACZsD,MAAM,CAACpB,KAAK,IAAI;QAAA;QAAApG,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA2B,CAAA,WAAAyE,KAAK,CAACe,QAAQ,KAAK,MAAM;QAAA;QAAA,CAAAnH,cAAA,GAAA2B,CAAA,WAAIyE,KAAK,CAACe,QAAQ,KAAK,UAAU;MAAD,CAAC,CAAC,CAC3EM,OAAO,CAACrB,KAAK,IAAI;QAAA;QAAApG,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAChBoH,KAAK,CAACG,IAAI,CAAC;UACT9E,IAAI,EAAE,KAAK;UACX+E,QAAQ,EAAEvB,KAAK,CAACe,QAAQ;UACxBS,WAAW;UAAE;UAAA,CAAA5H,cAAA,GAAA2B,CAAA,WAAAyE,KAAK,CAACyB,cAAc;UAAA;UAAA,CAAA7H,cAAA,GAAA2B,CAAA,WAAIyE,KAAK,CAACwB,WAAW;UACtDE,QAAQ,EAAE1B,KAAK,CAAC0B;QAClB,CAAC,CAAC;MACJ,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAA9H,cAAA,GAAA2B,CAAA;IAAA;;IAED;IAAA3B,cAAA,GAAAG,CAAA;IACA,IAAIgF,QAAQ,CAAC4C,WAAW,EAAE;MAAA;MAAA/H,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACxBgF,QAAQ,CAAC4C,WAAW,CACjBP,MAAM,CAACQ,UAAU,IAAI;QAAA;QAAAhI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAAA,OAAA6H,UAAU,CAACL,QAAQ,KAAK,MAAM;MAAD,CAAC,CAAC,CACpDF,OAAO,CAACO,UAAU,IAAI;QAAA;QAAAhI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QACrBoH,KAAK,CAACG,IAAI,CAAC;UACT9E,IAAI,EAAE,aAAa;UACnB+E,QAAQ,EAAEK,UAAU,CAACL,QAAQ;UAC7BC,WAAW,EAAEI,UAAU,CAACJ;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAA5H,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,OAAOoH,KAAK;EACd;;EAEA;AACF;AACA;EACEvD,kBAAkBA,CAACvB,IAAI,EAAE;IAAA;IAAAzC,cAAA,GAAAW,CAAA;IACvB,MAAMsH,KAAK;IAAA;IAAA,CAAAjI,cAAA,GAAAG,CAAA,QAAGsC,IAAI,CAACyF,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMC,aAAa;IAAA;IAAA,CAAAnI,cAAA,GAAAG,CAAA,QAAG8H,KAAK,CAACT,MAAM,CAACY,IAAI,IAAI;MAAA;MAAApI,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAAA,OAAAiI,IAAI,CAACC,IAAI,CAAC,CAAC,CAACpF,MAAM,GAAG,CAAC;IAAD,CAAC,CAAC;IAClE,MAAMqF,YAAY;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,QAAG8H,KAAK,CAACT,MAAM,CAACY,IAAI,IACpC;MAAA;MAAApI,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAA2B,CAAA,WAAAyG,IAAI,CAACC,IAAI,CAAC,CAAC,CAACE,UAAU,CAAC,IAAI,CAAC;MAAA;MAAA,CAAAvI,cAAA,GAAA2B,CAAA,WAC5ByG,IAAI,CAACC,IAAI,CAAC,CAAC,CAACE,UAAU,CAAC,GAAG,CAAC;MAAA;MAAA,CAAAvI,cAAA,GAAA2B,CAAA,WAC3ByG,IAAI,CAACC,IAAI,CAAC,CAAC,CAACE,UAAU,CAAC,IAAI,CAAC;IAAD,CAC7B,CAAC;IAAC;IAAAvI,cAAA,GAAAG,CAAA;IAEF,OAAO;MACLqI,UAAU,EAAEP,KAAK,CAAChF,MAAM;MACxBwF,WAAW,EAAEN,aAAa,CAAClF,MAAM;MACjCqF,YAAY,EAAEA,YAAY,CAACrF,MAAM;MACjCyF,YAAY,EAAEtB,IAAI,CAACE,KAAK,CAAEgB,YAAY,CAACrF,MAAM,GAAGkF,aAAa,CAAClF,MAAM,GAAI,GAAG,CAAC;MAC5E0F,iBAAiB,EAAEvB,IAAI,CAACE,KAAK,CAC3Ba,aAAa,CAAClB,MAAM,CAAC,CAACC,GAAG,EAAEkB,IAAI,KAAK;QAAA;QAAApI,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAG,CAAA;QAAA,OAAA+G,GAAG,GAAGkB,IAAI,CAACnF,MAAM;MAAD,CAAC,EAAE,CAAC,CAAC,GAAGkF,aAAa,CAAClF,MAC5E;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACEyC,KAAKA,CAACkD,EAAE,EAAE;IAAA;IAAA5I,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAG,CAAA;IACR,OAAO,IAAI0I,OAAO,CAACC,OAAO,IAAI;MAAA;MAAA9I,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAG,CAAA;MAAA,OAAA4I,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC;IAAD,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;EACE,MAAMI,WAAWA,CAACC,KAAK,EAAEvG,OAAO;EAAA;EAAA,CAAA1C,cAAA,GAAA2B,CAAA,WAAG,CAAC,CAAC,GAAE;IAAA;IAAA3B,cAAA,GAAAW,CAAA;IACrC,MAAMuI,OAAO;IAAA;IAAA,CAAAlJ,cAAA,GAAAG,CAAA,SAAG,EAAE;IAClB,MAAMgJ,cAAc;IAAA;IAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAG2C,IAAI,CAACC,GAAG,CAAC,CAAC;IAAC;IAAA/C,cAAA,GAAAG,CAAA;IAElC,IAAI,CAACS,MAAM,CAACmB,IAAI,CAAC,4BAA4B,EAAE;MAAEqH,SAAS,EAAEH,KAAK,CAAChG;IAAO,CAAC,CAAC;IAAC;IAAAjD,cAAA,GAAAG,CAAA;IAE5E,KAAK,MAAM,CAACkG,KAAK,EAAEgD,IAAI,CAAC,IAAIJ,KAAK,CAACK,OAAO,CAAC,CAAC,EAAE;MAAA;MAAAtJ,cAAA,GAAAG,CAAA;MAC3C,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACF,IAAI,CAACS,MAAM,CAACsE,KAAK,CAAC,mBAAmBmB,KAAK,GAAG,CAAC,IAAI4C,KAAK,CAAChG,MAAM,EAAE,EAAE;UAAEsG,QAAQ,EAAEF,IAAI,CAACG;QAAK,CAAC,CAAC;QAE1F,MAAM/F,MAAM;QAAA;QAAA,CAAAzD,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACqC,MAAM,CAAC6G,IAAI,CAACvE,OAAO,EAAE;UAC7C,GAAGpC,OAAO;UACV6G,QAAQ,EAAEF,IAAI,CAACG;QACjB,CAAC,CAAC;QAAC;QAAAxJ,cAAA,GAAAG,CAAA;QAEH+I,OAAO,CAACxB,IAAI,CAAC;UACX6B,QAAQ,EAAEF,IAAI,CAACG,IAAI;UACnB,GAAG/F;QACL,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOzB,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACd,IAAI,CAACS,MAAM,CAACoB,KAAK,CAAC,0BAA0BqH,IAAI,CAACG,IAAI,EAAE,EAAExH,KAAK,CAAC;QAAC;QAAAhC,cAAA,GAAAG,CAAA;QAChE+I,OAAO,CAACxB,IAAI,CAAC;UACX6B,QAAQ,EAAEF,IAAI,CAACG,IAAI;UACnBxH,KAAK,EAAEA,KAAK,CAACoC;QACf,CAAC,CAAC;MACJ;IACF;IAEA,MAAMqF,WAAW;IAAA;IAAA,CAAAzJ,cAAA,GAAAG,CAAA,SAAG;MAClB+I,OAAO;MACPQ,OAAO,EAAE;QACPC,UAAU,EAAEV,KAAK,CAAChG,MAAM;QACxB2G,iBAAiB,EAAEV,OAAO,CAAC1B,MAAM,CAACqC,CAAC,IAAI;UAAA;UAAA7J,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAG,CAAA;UAAA,QAAC0J,CAAC,CAAC7H,KAAK;QAAD,CAAC,CAAC,CAACiB,MAAM;QACvD6G,aAAa,EAAEZ,OAAO,CAAC1B,MAAM,CAACqC,CAAC,IAAI;UAAA;UAAA7J,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAG,CAAA;UAAA,OAAA0J,CAAC,CAAC7H,KAAK;QAAD,CAAC,CAAC,CAACiB,MAAM;QAClDY,cAAc,EAAEf,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGoG;MAC/B;IACF,CAAC;IAAC;IAAAnJ,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACS,MAAM,CAACmB,IAAI,CAAC,6BAA6B,EAAE0H,WAAW,CAACC,OAAO,CAAC;IAAC;IAAA1J,cAAA,GAAAG,CAAA;IAErE,OAAO,IAAI,CAACW,iBAAiB,CAACqD,OAAO,CAACsF,WAAW,EAAE,6BAA6B,CAAC;EACnF;AACF;AAAC;AAAAzJ,cAAA,GAAAG,CAAA;AAED4J,MAAM,CAACC,OAAO,GAAG,IAAIvJ,UAAU,CAAC,CAAC","ignoreList":[]}