{"version":3,"names":["cov_1arydyzzjq","actualCoverage","ResponseFormatter","s","require","ValidationUtils","Logger","ErrorHandler","SecurityScanner","constructor","f","logger","validationUtils","responseFormatter","vulnerabilityPatterns","initializePatterns","severityWeights","HIGH","MEDIUM","LOW","hardcodedSecrets","category","patterns","name","regex","severity","description","cwe","sqlInjection","xss","weakCrypto","insecureStorage","authenticationIssues","scan","code","options","b","info","codeLength","length","validateCodeInput","Error","vulnerabilities","scanMetrics","startTime","Date","now","linesScanned","split","patternsChecked","categoryData","Object","entries","categoryVulns","scanCategory","push","endTime","duration","summary","generateEnhancedSummary","recommendations","generateDetailedRecommendations","riskScore","calculateRiskScore","result","timestamp","toISOString","totalVulnerabilities","success","error","createError","message","scanCode","filename","data","totalIssues","high","medium","low","generateSummary","severityCounts","reduce","acc","vuln","pattern","match","exec","lineNumber","getLineNumber","index","contextLines","getContextLines","id","generateVulnerabilityId","type","line","column","lastIndexOf","matchedText","context","recommendation","getSpecificRecommendation","confidence","calculateConfidence","Math","random","toString","substr","substring","contextRange","lines","start","max","end","min","before","slice","current","after","source","vulnerabilityType","totalWeight","sum","maxPossible","round","categoryCounts","cweCounts","severityBreakdown","categoryBreakdown","cweBreakdown","topIssues","getTopIssues","limit","issueFreq","key","sort","a","map","issue","count","categoryGroups","groupBy","vulns","highSeverityCount","filter","v","priority","issueCount","title","getCategoryRecommendationTitle","getCategoryRecommendationDescription","actionItems","getCategoryActionItems","priorityOrder","array","groups","item","group","titles","descriptions","toLowerCase","uniqueTypes","Set","action","affectedLines","find","module","exports"],"sources":["securityScanner.js"],"sourcesContent":["/**\n * Enhanced Security Scanner Service\n * Detects various security vulnerabilities in code with improved architecture\n */\n\nconst ResponseFormatter = require('../utils/responseFormatter');\nconst ValidationUtils = require('../utils/validationUtils');\nconst Logger = require('../utils/logger');\nconst ErrorHandler = require('../utils/errorHandler');\n\nclass SecurityScanner {\n  constructor() {\n    this.logger = Logger;\n    this.validationUtils = ValidationUtils;\n    this.responseFormatter = ResponseFormatter;\n    \n    // Enhanced vulnerability patterns with better categorization\n    this.vulnerabilityPatterns = this.initializePatterns();\n    this.severityWeights = { HIGH: 10, MEDIUM: 5, LOW: 1 };\n  }\n\n  initializePatterns() {\n    return {\n      hardcodedSecrets: {\n        category: 'Secrets Management',\n        patterns: [\n          {\n            name: 'API Key',\n            regex: /(?:api[_-]?key|apikey)\\s*[:=]\\s*[\"']([a-zA-Z0-9_-]{20,})[\"']/gi,\n            severity: 'HIGH',\n            description: 'Hardcoded API key detected - Move to environment variables',\n            cwe: 'CWE-798'\n          },\n          {\n            name: 'Password',\n            regex: /(?:password|pwd|pass)\\s*[:=]\\s*[\"']([^\"']{6,})[\"']/gi,\n            severity: 'HIGH',\n            description: 'Hardcoded password detected - Use secure credential storage',\n            cwe: 'CWE-798'\n          },\n          {\n            name: 'Secret Key',\n            regex: /(?:secret[_-]?key|secretkey)\\s*[:=]\\s*[\"']([a-zA-Z0-9_-]{16,})[\"']/gi,\n            severity: 'HIGH',\n            description: 'Hardcoded secret key detected - Implement secrets management',\n            cwe: 'CWE-798'\n          },\n          {\n            name: 'Database URL',\n            regex: /(?:database[_-]?url|db[_-]?url)\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi,\n            severity: 'MEDIUM',\n            description: 'Hardcoded database URL detected - Use environment configuration',\n            cwe: 'CWE-798'\n          },\n          {\n            name: 'JWT Secret',\n            regex: /(?:jwt[_-]?secret)\\s*[:=]\\s*[\"']([a-zA-Z0-9_-]{16,})[\"']/gi,\n            severity: 'HIGH',\n            description: 'Hardcoded JWT secret detected - Use secure key management',\n            cwe: 'CWE-798'\n          },\n          {\n            name: 'Private Key',\n            regex: /-----BEGIN\\s+(RSA\\s+)?PRIVATE KEY-----/gi,\n            severity: 'HIGH',\n            description: 'Private key embedded in code - Move to secure storage',\n            cwe: 'CWE-798'\n          }\n        ]\n      },\n      \n      sqlInjection: {\n        category: 'Injection Attacks',\n        patterns: [\n          {\n            name: 'SQL Injection - String Concatenation',\n            regex: /(?:SELECT|INSERT|UPDATE|DELETE)\\s+.*\\+.*(?:WHERE|VALUES)/gi,\n            severity: 'HIGH',\n            description: 'Potential SQL injection via string concatenation - Use parameterized queries',\n            cwe: 'CWE-89'\n          },\n          {\n            name: 'SQL Injection - Template Literals',\n            regex: /(?:SELECT|INSERT|UPDATE|DELETE)\\s+.*\\$\\{.*\\}/gi,\n            severity: 'HIGH',\n            description: 'Potential SQL injection via template literals - Use parameterized queries',\n            cwe: 'CWE-89'\n          },\n          {\n            name: 'Dynamic Query Construction',\n            regex: /query\\s*\\+=?\\s*[\"'`][^\"'`]*\\$\\{/gi,\n            severity: 'MEDIUM',\n            description: 'Dynamic query construction detected - Consider using ORM or query builders',\n            cwe: 'CWE-89'\n          }\n        ]\n      },\n      \n      xss: {\n        category: 'Cross-Site Scripting',\n        patterns: [\n          {\n            name: 'innerHTML Assignment',\n            regex: /\\.innerHTML\\s*=\\s*(?!['\"]).+/gi,\n            severity: 'MEDIUM',\n            description: 'Direct innerHTML assignment - Use textContent or sanitize input',\n            cwe: 'CWE-79'\n          },\n          {\n            name: 'document.write Usage',\n            regex: /document\\.write\\s*\\(/gi,\n            severity: 'MEDIUM',\n            description: 'document.write usage detected - Consider safer alternatives',\n            cwe: 'CWE-79'\n          },\n          {\n            name: 'eval() Usage',\n            regex: /\\beval\\s*\\(/gi,\n            severity: 'HIGH',\n            description: 'eval() usage detected - Avoid dynamic code execution',\n            cwe: 'CWE-95'\n          },\n          {\n            name: 'Unsanitized User Input',\n            regex: /(?:req\\.body|req\\.query|req\\.params)\\.[a-zA-Z_][a-zA-Z0-9_]*(?!\\s*=\\s*sanitize)/gi,\n            severity: 'MEDIUM',\n            description: 'Potentially unsanitized user input - Implement input validation',\n            cwe: 'CWE-20'\n          }\n        ]\n      },\n      \n      weakCrypto: {\n        category: 'Cryptographic Issues',\n        patterns: [\n          {\n            name: 'MD5 Usage',\n            regex: /\\bmd5\\b/gi,\n            severity: 'HIGH',\n            description: 'MD5 cryptographic hash detected - Use SHA-256 or stronger',\n            cwe: 'CWE-327'\n          },\n          {\n            name: 'SHA1 Usage',\n            regex: /\\bsha1\\b/gi,\n            severity: 'MEDIUM',\n            description: 'SHA1 cryptographic hash detected - Consider SHA-256 or stronger',\n            cwe: 'CWE-327'\n          },\n          {\n            name: 'Weak Random Generation',\n            regex: /Math\\.random\\(\\)/gi,\n            severity: 'MEDIUM',\n            description: 'Math.random() used - Use crypto.randomBytes() for security-sensitive operations',\n            cwe: 'CWE-338'\n          },\n          {\n            name: 'DES/3DES Usage',\n            regex: /\\b(?:des|3des|tripledes)\\b/gi,\n            severity: 'HIGH',\n            description: 'Weak encryption algorithm detected - Use AES-256 or stronger',\n            cwe: 'CWE-327'\n          }\n        ]\n      },\n      \n      insecureStorage: {\n        category: 'Insecure Storage',\n        patterns: [\n          {\n            name: 'localStorage Sensitive Data',\n            regex: /localStorage\\.setItem\\s*\\(\\s*[\"'][^\"']*(?:token|password|secret|key)[\"']/gi,\n            severity: 'MEDIUM',\n            description: 'Sensitive data stored in localStorage - Consider secure storage alternatives',\n            cwe: 'CWE-922'\n          },\n          {\n            name: 'sessionStorage Sensitive Data',\n            regex: /sessionStorage\\.setItem\\s*\\(\\s*[\"'][^\"']*(?:token|password|secret|key)[\"']/gi,\n            severity: 'MEDIUM',\n            description: 'Sensitive data stored in sessionStorage - Consider secure storage alternatives',\n            cwe: 'CWE-922'\n          },\n          {\n            name: 'Cookie without Secure Flag',\n            regex: /document\\.cookie\\s*=\\s*[^;]*(?!.*secure)/gi,\n            severity: 'MEDIUM',\n            description: 'Cookie set without secure flag - Add secure flag for HTTPS',\n            cwe: 'CWE-614'\n          }\n        ]\n      },\n      \n      authenticationIssues: {\n        category: 'Authentication & Authorization',\n        patterns: [\n          {\n            name: 'Missing Authentication Check',\n            regex: /app\\.(get|post|put|delete)\\s*\\(\\s*[\"'][^\"']*[\"']\\s*,\\s*(?!.*auth)/gi,\n            severity: 'MEDIUM',\n            description: 'Route without authentication middleware - Add authentication checks',\n            cwe: 'CWE-306'\n          },\n          {\n            name: 'Hardcoded JWT',\n            regex: /jwt\\.sign\\s*\\([^,]*,\\s*[\"'][^\"']+[\"']/gi,\n            severity: 'HIGH',\n            description: 'Hardcoded JWT secret - Use environment variables',\n            cwe: 'CWE-798'\n          },\n          {\n            name: 'Weak JWT Algorithm',\n            regex: /algorithm\\s*:\\s*[\"'](?:HS256|none)[\"']/gi,\n            severity: 'MEDIUM',\n            description: 'Weak JWT algorithm - Consider RS256 or ES256',\n            cwe: 'CWE-327'\n          }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Enhanced scan method with better error handling and logging\n   */\n  async scan(code, options = {}) {\n    try {\n      this.logger.info('Starting security scan', { \n        codeLength: code.length,\n        options \n      });\n\n      // Validate input\n      if (!this.validationUtils.validateCodeInput(code)) {\n        throw new Error('Invalid code input provided');\n      }\n\n      const vulnerabilities = [];\n      const scanMetrics = {\n        startTime: Date.now(),\n        linesScanned: code.split('\\n').length,\n        patternsChecked: 0\n      };\n\n      // Scan for each vulnerability category\n      for (const [category, categoryData] of Object.entries(this.vulnerabilityPatterns)) {\n        const categoryVulns = await this.scanCategory(code, category, categoryData);\n        vulnerabilities.push(...categoryVulns);\n        scanMetrics.patternsChecked += categoryData.patterns.length;\n      }\n\n      scanMetrics.endTime = Date.now();\n      scanMetrics.duration = scanMetrics.endTime - scanMetrics.startTime;\n\n      // Generate enhanced results\n      const summary = this.generateEnhancedSummary(vulnerabilities);\n      const recommendations = this.generateDetailedRecommendations(vulnerabilities);\n      const riskScore = this.calculateRiskScore(vulnerabilities);\n\n      const result = {\n        vulnerabilities,\n        summary,\n        recommendations,\n        riskScore,\n        scanMetrics,\n        timestamp: new Date().toISOString()\n      };\n\n      this.logger.info('Security scan completed', {\n        totalVulnerabilities: vulnerabilities.length,\n        riskScore,\n        duration: scanMetrics.duration\n      });\n\n      return this.responseFormatter.success(result, 'Security scan completed successfully');\n\n    } catch (error) {\n      this.logger.error('Security scan failed', error);\n      throw ErrorHandler.createError('SCAN_FAILED', `Security scan failed: ${error.message}`, 500);\n    }\n  }\n\n  /**\n   * Simplified scanCode method for backward compatibility\n   */\n  async scanCode(code, filename = 'unknown') {\n    try {\n      const result = await this.scan(code, { filename });\n      return {\n        vulnerabilities: result.data.vulnerabilities,\n        riskScore: result.data.riskScore,\n        summary: result.data.summary\n      };\n    } catch (error) {\n      this.logger.error('scanCode method failed', error);\n      return {\n        vulnerabilities: [],\n        riskScore: 0,\n        summary: { totalIssues: 0, high: 0, medium: 0, low: 0 }\n      };\n    }\n  }\n\n  /**\n   * Generate summary from vulnerabilities array\n   */\n  generateSummary(vulnerabilities) {\n    const severityCounts = vulnerabilities.reduce((acc, vuln) => {\n      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;\n      return acc;\n    }, {});\n\n    return {\n      totalIssues: vulnerabilities.length,\n      high: severityCounts.HIGH || 0,\n      medium: severityCounts.MEDIUM || 0,\n      low: severityCounts.LOW || 0\n    };\n  }\n\n  /**\n   * Scan specific category with enhanced detection\n   */\n  async scanCategory(code, category, categoryData) {\n    const vulnerabilities = [];\n\n    for (const pattern of categoryData.patterns) {\n      let match;\n      while ((match = pattern.regex.exec(code)) !== null) {\n        const lineNumber = this.getLineNumber(code, match.index);\n        const contextLines = this.getContextLines(code, lineNumber);\n        \n        vulnerabilities.push({\n          id: this.generateVulnerabilityId(),\n          category,\n          type: pattern.name,\n          severity: pattern.severity,\n          description: pattern.description,\n          cwe: pattern.cwe,\n          line: lineNumber,\n          column: match.index - code.lastIndexOf('\\n', match.index) - 1,\n          matchedText: match[0],\n          context: contextLines,\n          recommendation: this.getSpecificRecommendation(pattern.name),\n          confidence: this.calculateConfidence(pattern, match)\n        });\n      }\n    }\n\n    return vulnerabilities;\n  }\n\n  /**\n   * Generate unique vulnerability ID\n   */\n  generateVulnerabilityId() {\n    return `vuln_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get line number from character index\n   */\n  getLineNumber(code, index) {\n    return code.substring(0, index).split('\\n').length;\n  }\n\n  /**\n   * Get context lines around vulnerability\n   */\n  getContextLines(code, lineNumber, contextRange = 2) {\n    const lines = code.split('\\n');\n    const start = Math.max(0, lineNumber - contextRange - 1);\n    const end = Math.min(lines.length, lineNumber + contextRange);\n    \n    return {\n      before: lines.slice(start, lineNumber - 1),\n      current: lines[lineNumber - 1],\n      after: lines.slice(lineNumber, end)\n    };\n  }\n\n  /**\n   * Calculate confidence score for vulnerability detection\n   */\n  calculateConfidence(pattern, match) {\n    let confidence = 0.7; // Base confidence\n\n    // Increase confidence based on pattern specificity\n    if (pattern.regex.source.length > 50) confidence += 0.1;\n    if (pattern.cwe) confidence += 0.1;\n    if (match[0].length > 20) confidence += 0.1;\n\n    return Math.min(1, confidence);\n  }\n\n  /**\n   * Get specific recommendation for vulnerability type\n   */\n  getSpecificRecommendation(vulnerabilityType) {\n    const recommendations = {\n      'API Key': 'Move API keys to environment variables and use a secrets management system',\n      'Password': 'Never hardcode passwords. Use secure credential storage and hashing',\n      'SQL Injection - String Concatenation': 'Use parameterized queries or prepared statements',\n      'innerHTML Assignment': 'Use textContent or implement proper input sanitization',\n      'eval() Usage': 'Replace eval() with safer alternatives like JSON.parse()',\n      'MD5 Usage': 'Replace MD5 with SHA-256 or bcrypt for password hashing',\n      'Math.random()': 'Use crypto.randomBytes() for cryptographically secure random numbers'\n    };\n\n    return recommendations[vulnerabilityType] || 'Review and remediate this security issue';\n  }\n\n  /**\n   * Calculate overall risk score\n   */\n  calculateRiskScore(vulnerabilities) {\n    if (vulnerabilities.length === 0) return 0;\n\n    const totalWeight = vulnerabilities.reduce((sum, vuln) => {\n      return sum + (this.severityWeights[vuln.severity] || 1);\n    }, 0);\n\n    // Normalize to 0-100 scale\n    const maxPossible = vulnerabilities.length * this.severityWeights.HIGH;\n    return Math.round((totalWeight / maxPossible) * 100);\n  }\n\n  /**\n   * Generate enhanced summary with more details\n   */\n  generateEnhancedSummary(vulnerabilities) {\n    const severityCounts = vulnerabilities.reduce((acc, vuln) => {\n      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;\n      return acc;\n    }, {});\n\n    const categoryCounts = vulnerabilities.reduce((acc, vuln) => {\n      acc[vuln.category] = (acc[vuln.category] || 0) + 1;\n      return acc;\n    }, {});\n\n    const cweCounts = vulnerabilities.reduce((acc, vuln) => {\n      if (vuln.cwe) {\n        acc[vuln.cwe] = (acc[vuln.cwe] || 0) + 1;\n      }\n      return acc;\n    }, {});\n\n    return {\n      totalIssues: vulnerabilities.length,\n      severityBreakdown: {\n        high: severityCounts.HIGH || 0,\n        medium: severityCounts.MEDIUM || 0,\n        low: severityCounts.LOW || 0\n      },\n      categoryBreakdown: categoryCounts,\n      cweBreakdown: cweCounts,\n      topIssues: this.getTopIssues(vulnerabilities, 5)\n    };\n  }\n\n  /**\n   * Get top issues by severity and frequency\n   */\n  getTopIssues(vulnerabilities, limit = 5) {\n    const issueFreq = vulnerabilities.reduce((acc, vuln) => {\n      const key = `${vuln.type}-${vuln.severity}`;\n      acc[key] = (acc[key] || 0) + 1;\n      return acc;\n    }, {});\n\n    return Object.entries(issueFreq)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, limit)\n      .map(([issue, count]) => {\n        const [type, severity] = issue.split('-');\n        return { type, severity, count };\n      });\n  }\n\n  /**\n   * Generate detailed recommendations with prioritization\n   */\n  generateDetailedRecommendations(vulnerabilities) {\n    const recommendations = [];\n    const categoryGroups = this.groupBy(vulnerabilities, 'category');\n\n    for (const [category, vulns] of Object.entries(categoryGroups)) {\n      const highSeverityCount = vulns.filter(v => v.severity === 'HIGH').length;\n      const priority = highSeverityCount > 0 ? 'HIGH' : \n                     vulns.filter(v => v.severity === 'MEDIUM').length > 0 ? 'MEDIUM' : 'LOW';\n\n      recommendations.push({\n        category,\n        priority,\n        issueCount: vulns.length,\n        title: this.getCategoryRecommendationTitle(category),\n        description: this.getCategoryRecommendationDescription(category),\n        actionItems: this.getCategoryActionItems(category, vulns)\n      });\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { HIGH: 3, MEDIUM: 2, LOW: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  /**\n   * Group array by key\n   */\n  groupBy(array, key) {\n    return array.reduce((groups, item) => {\n      const group = item[key];\n      groups[group] = groups[group] || [];\n      groups[group].push(item);\n      return groups;\n    }, {});\n  }\n\n  /**\n   * Get category-specific recommendation title\n   */\n  getCategoryRecommendationTitle(category) {\n    const titles = {\n      'Secrets Management': 'Implement Proper Secrets Management',\n      'Injection Attacks': 'Prevent Injection Vulnerabilities',\n      'Cross-Site Scripting': 'Implement XSS Protection',\n      'Cryptographic Issues': 'Upgrade Cryptographic Implementation',\n      'Insecure Storage': 'Secure Data Storage Practices',\n      'Authentication & Authorization': 'Strengthen Authentication Mechanisms'\n    };\n    return titles[category] || `Address ${category} Issues`;\n  }\n\n  /**\n   * Get category-specific recommendation description\n   */\n  getCategoryRecommendationDescription(category) {\n    const descriptions = {\n      'Secrets Management': 'Move all hardcoded secrets to environment variables or dedicated secrets management systems',\n      'Injection Attacks': 'Implement parameterized queries and input validation to prevent injection attacks',\n      'Cross-Site Scripting': 'Sanitize all user inputs and implement proper output encoding',\n      'Cryptographic Issues': 'Replace weak cryptographic algorithms with modern, secure alternatives',\n      'Insecure Storage': 'Implement secure storage mechanisms for sensitive data',\n      'Authentication & Authorization': 'Add proper authentication and authorization checks to all endpoints'\n    };\n    return descriptions[category] || `Review and fix ${category.toLowerCase()} related issues`;\n  }\n\n  /**\n   * Get category-specific action items\n   */\n  getCategoryActionItems(category, vulnerabilities) {\n    const uniqueTypes = [...new Set(vulnerabilities.map(v => v.type))];\n    \n    return uniqueTypes.map(type => ({\n      action: this.getSpecificRecommendation(type),\n      affectedLines: vulnerabilities.filter(v => v.type === type).map(v => v.line),\n      severity: vulnerabilities.find(v => v.type === type).severity\n    }));\n  }\n}\n\nmodule.exports = new SecurityScanner();\n"],"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","ignoreList":[]}