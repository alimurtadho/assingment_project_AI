f8f1aeadf02df1e6f49899b6cca0484d
/* istanbul ignore next */
"use strict";

function cov_1epkh56tam() {
  var path = "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/security.refactored.js";
  var hash = "559cd12b0854d620e62b314f44ef5430f4c868ba";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/security.refactored.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "2": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 73
        }
      },
      "3": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "4": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 59
        }
      },
      "5": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "6": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "7": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "8": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "10": {
        start: {
          line: 25,
          column: 6
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "11": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "12": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 23
        }
      },
      "13": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 128,
          column: 3
        }
      },
      "14": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 82
        }
      },
      "15": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 127,
          column: 3
        }
      },
      "16": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "17": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "18": {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "19": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "20": {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "21": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "22": {
        start: {
          line: 64,
          column: 11
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "23": {
        start: {
          line: 65,
          column: 6
        },
        end: {
          line: 65,
          column: 27
        }
      },
      "24": {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 54
        }
      },
      "25": {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 72,
          column: 8
        }
      },
      "26": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 44
        }
      },
      "27": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 87,
          column: 5
        }
      },
      "28": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 94,
          column: 7
        }
      },
      "29": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 97,
          column: 68
        }
      },
      "30": {
        start: {
          line: 100,
          column: 21
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "31": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 115,
          column: 7
        }
      },
      "32": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 117,
          column: 90
        }
      },
      "33": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 124,
          column: 7
        }
      },
      "34": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 16
        }
      },
      "35": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "36": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 84
        }
      },
      "37": {
        start: {
          line: 137,
          column: 2
        },
        end: {
          line: 253,
          column: 3
        }
      },
      "38": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 142,
          column: 7
        }
      },
      "39": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 150,
          column: 5
        }
      },
      "40": {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 149,
          column: 8
        }
      },
      "41": {
        start: {
          line: 153,
          column: 18
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "42": {
        start: {
          line: 153,
          column: 41
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "43": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "44": {
        start: {
          line: 161,
          column: 6
        },
        end: {
          line: 167,
          column: 7
        }
      },
      "45": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 166,
          column: 10
        }
      },
      "46": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "47": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 183,
          column: 7
        }
      },
      "48": {
        start: {
          line: 181,
          column: 42
        },
        end: {
          line: 181,
          column: 54
        }
      },
      "49": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 22
        }
      },
      "50": {
        start: {
          line: 187,
          column: 27
        },
        end: {
          line: 187,
          column: 37
        }
      },
      "51": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 219,
          column: 5
        }
      },
      "52": {
        start: {
          line: 190,
          column: 6
        },
        end: {
          line: 218,
          column: 7
        }
      },
      "53": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "54": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 199,
          column: 10
        }
      },
      "55": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "56": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "57": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 217,
          column: 11
        }
      },
      "58": {
        start: {
          line: 221,
          column: 24
        },
        end: {
          line: 237,
          column: 5
        }
      },
      "59": {
        start: {
          line: 225,
          column: 45
        },
        end: {
          line: 225,
          column: 54
        }
      },
      "60": {
        start: {
          line: 226,
          column: 41
        },
        end: {
          line: 226,
          column: 51
        }
      },
      "61": {
        start: {
          line: 228,
          column: 23
        },
        end: {
          line: 228,
          column: 32
        }
      },
      "62": {
        start: {
          line: 229,
          column: 30
        },
        end: {
          line: 229,
          column: 68
        }
      },
      "63": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 242,
          column: 7
        }
      },
      "64": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 244,
          column: 86
        }
      },
      "65": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 250,
          column: 7
        }
      },
      "66": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 252,
          column: 16
        }
      },
      "67": {
        start: {
          line: 260,
          column: 0
        },
        end: {
          line: 292,
          column: 3
        }
      },
      "68": {
        start: {
          line: 261,
          column: 2
        },
        end: {
          line: 291,
          column: 3
        }
      },
      "69": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 262,
          column: 59
        }
      },
      "70": {
        start: {
          line: 264,
          column: 21
        },
        end: {
          line: 284,
          column: 5
        }
      },
      "71": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 99
        }
      },
      "72": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 289,
          column: 69
        }
      },
      "73": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 290,
          column: 16
        }
      },
      "74": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 325,
          column: 3
        }
      },
      "75": {
        start: {
          line: 299,
          column: 2
        },
        end: {
          line: 324,
          column: 3
        }
      },
      "76": {
        start: {
          line: 300,
          column: 19
        },
        end: {
          line: 317,
          column: 5
        }
      },
      "77": {
        start: {
          line: 307,
          column: 37
        },
        end: {
          line: 307,
          column: 67
        }
      },
      "78": {
        start: {
          line: 319,
          column: 4
        },
        end: {
          line: 319,
          column: 79
        }
      },
      "79": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 322,
          column: 64
        }
      },
      "80": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 323,
          column: 16
        }
      },
      "81": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 354,
          column: 3
        }
      },
      "82": {
        start: {
          line: 329,
          column: 2
        },
        end: {
          line: 350,
          column: 3
        }
      },
      "83": {
        start: {
          line: 330,
          column: 4
        },
        end: {
          line: 330,
          column: 82
        }
      },
      "84": {
        start: {
          line: 332,
          column: 4
        },
        end: {
          line: 349,
          column: 5
        }
      },
      "85": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 336,
          column: 10
        }
      },
      "86": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 10
        }
      },
      "87": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 344,
          column: 10
        }
      },
      "88": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 348,
          column: 10
        }
      },
      "89": {
        start: {
          line: 353,
          column: 2
        },
        end: {
          line: 353,
          column: 14
        }
      },
      "90": {
        start: {
          line: 356,
          column: 0
        },
        end: {
          line: 356,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 14
          },
          end: {
            line: 23,
            column: 15
          }
        },
        loc: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 44
          },
          end: {
            line: 37,
            column: 45
          }
        },
        loc: {
          start: {
            line: 37,
            column: 70
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 134,
            column: 54
          },
          end: {
            line: 134,
            column: 55
          }
        },
        loc: {
          start: {
            line: 134,
            column: 80
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 134
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 153,
            column: 32
          },
          end: {
            line: 153,
            column: 33
          }
        },
        loc: {
          start: {
            line: 153,
            column: 41
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 153
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 31
          }
        },
        loc: {
          start: {
            line: 181,
            column: 42
          },
          end: {
            line: 181,
            column: 54
          }
        },
        line: 181
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 225,
            column: 40
          },
          end: {
            line: 225,
            column: 41
          }
        },
        loc: {
          start: {
            line: 225,
            column: 45
          },
          end: {
            line: 225,
            column: 54
          }
        },
        line: 225
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 226,
            column: 36
          },
          end: {
            line: 226,
            column: 37
          }
        },
        loc: {
          start: {
            line: 226,
            column: 41
          },
          end: {
            line: 226,
            column: 51
          }
        },
        line: 226
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 228,
            column: 18
          },
          end: {
            line: 228,
            column: 19
          }
        },
        loc: {
          start: {
            line: 228,
            column: 23
          },
          end: {
            line: 228,
            column: 32
          }
        },
        line: 228
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 229,
            column: 18
          },
          end: {
            line: 229,
            column: 19
          }
        },
        loc: {
          start: {
            line: 229,
            column: 30
          },
          end: {
            line: 229,
            column: 68
          }
        },
        line: 229
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 260,
            column: 24
          },
          end: {
            line: 260,
            column: 25
          }
        },
        loc: {
          start: {
            line: 260,
            column: 50
          },
          end: {
            line: 292,
            column: 1
          }
        },
        line: 260
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 298,
            column: 22
          },
          end: {
            line: 298,
            column: 23
          }
        },
        loc: {
          start: {
            line: 298,
            column: 48
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 298
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 307,
            column: 18
          },
          end: {
            line: 307,
            column: 19
          }
        },
        loc: {
          start: {
            line: 307,
            column: 37
          },
          end: {
            line: 307,
            column: 67
          }
        },
        line: 307
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 328,
            column: 11
          },
          end: {
            line: 328,
            column: 12
          }
        },
        loc: {
          start: {
            line: 328,
            column: 38
          },
          end: {
            line: 354,
            column: 1
          }
        },
        line: 328
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: 64,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }],
        line: 52
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 63,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 63,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 64,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: 67,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }],
        line: 64
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 66,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 66,
            column: 34
          }
        }, {
          start: {
            line: 66,
            column: 38
          },
          end: {
            line: 66,
            column: 53
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 33
          }
        }, {
          start: {
            line: 81,
            column: 37
          },
          end: {
            line: 81,
            column: 42
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 40
          },
          end: {
            line: 82,
            column: 70
          }
        }, {
          start: {
            line: 82,
            column: 73
          },
          end: {
            line: 82,
            column: 82
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 60
          }
        }, {
          start: {
            line: 112,
            column: 64
          },
          end: {
            line: 112,
            column: 65
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 140,
            column: 17
          },
          end: {
            line: 140,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 17
          },
          end: {
            line: 140,
            column: 34
          }
        }, {
          start: {
            line: 140,
            column: 38
          },
          end: {
            line: 140,
            column: 39
          }
        }],
        line: 140
      },
      "8": {
        loc: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "9": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 18
          }
        }, {
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 44
          }
        }],
        line: 144
      },
      "10": {
        loc: {
          start: {
            line: 161,
            column: 6
          },
          end: {
            line: 167,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 6
          },
          end: {
            line: 167,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "11": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 33
          }
        }, {
          start: {
            line: 172,
            column: 37
          },
          end: {
            line: 172,
            column: 42
          }
        }],
        line: 172
      },
      "12": {
        loc: {
          start: {
            line: 229,
            column: 37
          },
          end: {
            line: 229,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 37
          },
          end: {
            line: 229,
            column: 62
          }
        }, {
          start: {
            line: 229,
            column: 66
          },
          end: {
            line: 229,
            column: 67
          }
        }],
        line: 229
      },
      "13": {
        loc: {
          start: {
            line: 329,
            column: 2
          },
          end: {
            line: 350,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 2
          },
          end: {
            line: 350,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "14": {
        loc: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 333,
            column: 6
          },
          end: {
            line: 336,
            column: 10
          }
        }, {
          start: {
            line: 337,
            column: 6
          },
          end: {
            line: 340,
            column: 10
          }
        }, {
          start: {
            line: 341,
            column: 6
          },
          end: {
            line: 344,
            column: 10
          }
        }, {
          start: {
            line: 345,
            column: 6
          },
          end: {
            line: 348,
            column: 10
          }
        }],
        line: 332
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "559cd12b0854d620e62b314f44ef5430f4c868ba"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1epkh56tam = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1epkh56tam();
/**
 * Enhanced Security Route Handler
 * Handles security scanning requests with improved error handling and validation
 */

const express =
/* istanbul ignore next */
(cov_1epkh56tam().s[0]++, require('express'));
const multer =
/* istanbul ignore next */
(cov_1epkh56tam().s[1]++, require('multer'));
const SecurityScanner =
/* istanbul ignore next */
(cov_1epkh56tam().s[2]++, require('../services/securityScanner.refactored'));
const ResponseFormatter =
/* istanbul ignore next */
(cov_1epkh56tam().s[3]++, require('../utils/responseFormatter'));
const ValidationUtils =
/* istanbul ignore next */
(cov_1epkh56tam().s[4]++, require('../utils/validationUtils'));
const Logger =
/* istanbul ignore next */
(cov_1epkh56tam().s[5]++, require('../utils/logger'));
const ErrorHandler =
/* istanbul ignore next */
(cov_1epkh56tam().s[6]++, require('../utils/errorHandler'));
const router =
/* istanbul ignore next */
(cov_1epkh56tam().s[7]++, express.Router());

// Configure multer for file uploads
const upload =
/* istanbul ignore next */
(cov_1epkh56tam().s[8]++, multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 50 * 1024 * 1024,
    // 50MB limit
    files: 10 // Maximum 10 files
  },
  fileFilter: (req, file, cb) => {
    /* istanbul ignore next */
    cov_1epkh56tam().f[0]++;
    cov_1epkh56tam().s[9]++;
    try {
      /* istanbul ignore next */
      cov_1epkh56tam().s[10]++;
      ValidationUtils.validateUploadedFile(file);
      /* istanbul ignore next */
      cov_1epkh56tam().s[11]++;
      cb(null, true);
    } catch (error) {
      /* istanbul ignore next */
      cov_1epkh56tam().s[12]++;
      cb(error, false);
    }
  }
}));

/**
 * POST /api/security/scan
 * Scan code for security vulnerabilities
 */
/* istanbul ignore next */
cov_1epkh56tam().s[13]++;
router.post('/scan', upload.single('file'), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1epkh56tam().f[1]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1epkh56tam().s[14]++, `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1epkh56tam().s[15]++;
  try {
    /* istanbul ignore next */
    cov_1epkh56tam().s[16]++;
    Logger.info('Security scan request received', {
      requestId,
      hasFile: !!req.file,
      hasCode: !!req.body.code,
      userAgent: req.headers['user-agent'],
      ip: req.ip
    });

    // Extract code from file or request body
    let code, fileName;
    /* istanbul ignore next */
    cov_1epkh56tam().s[17]++;
    if (req.file) {
      /* istanbul ignore next */
      cov_1epkh56tam().b[0][0]++;
      cov_1epkh56tam().s[18]++;
      code = req.file.buffer.toString('utf8');
      /* istanbul ignore next */
      cov_1epkh56tam().s[19]++;
      fileName = req.file.originalname;

      // Validate file content
      /* istanbul ignore next */
      cov_1epkh56tam().s[20]++;
      if (!ValidationUtils.validateCodeInput(code)) {
        /* istanbul ignore next */
        cov_1epkh56tam().b[1][0]++;
        cov_1epkh56tam().s[21]++;
        throw ErrorHandler.createError('INVALID_FILE_CONTENT', 'File contains invalid or empty code content', 400);
      } else
      /* istanbul ignore next */
      {
        cov_1epkh56tam().b[1][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_1epkh56tam().b[0][1]++;
      cov_1epkh56tam().s[22]++;
      if (req.body.code) {
        /* istanbul ignore next */
        cov_1epkh56tam().b[2][0]++;
        cov_1epkh56tam().s[23]++;
        code = req.body.code;
        /* istanbul ignore next */
        cov_1epkh56tam().s[24]++;
        fileName =
        /* istanbul ignore next */
        (cov_1epkh56tam().b[3][0]++, req.body.fileName) ||
        /* istanbul ignore next */
        (cov_1epkh56tam().b[3][1]++, 'uploaded_code');
      } else {
        /* istanbul ignore next */
        cov_1epkh56tam().b[2][1]++;
        cov_1epkh56tam().s[25]++;
        throw ErrorHandler.createError('MISSING_CODE_INPUT', 'No code provided for scanning. Include code in request body or upload a file.', 400);
      }
    }

    // Validate code input
    /* istanbul ignore next */
    cov_1epkh56tam().s[26]++;
    ValidationUtils.validateCodeInput(code);

    // Parse scan options
    const scanOptions =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[27]++, {
      includeContext: req.body.includeContext !== 'false',
      severity:
      /* istanbul ignore next */
      (cov_1epkh56tam().b[4][0]++, req.body.severity) ||
      /* istanbul ignore next */
      (cov_1epkh56tam().b[4][1]++, 'all'),
      categories: req.body.categories ?
      /* istanbul ignore next */
      (cov_1epkh56tam().b[5][0]++, req.body.categories.split(',')) :
      /* istanbul ignore next */
      (cov_1epkh56tam().b[5][1]++, undefined),
      language: req.body.language,
      framework: req.body.framework,
      requestId,
      fileName
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[28]++;
    Logger.debug('Starting security scan', {
      requestId,
      codeLength: code.length,
      fileName,
      scanOptions
    });

    // Perform security scan
    const scanResult =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[29]++, await SecurityScanner.scan(code, scanOptions));

    // Add request metadata to response
    const response =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[30]++, {
      ...scanResult.data,
      requestInfo: {
        requestId,
        fileName,
        timestamp: new Date().toISOString(),
        options: scanOptions
      }
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[31]++;
    Logger.info('Security scan completed successfully', {
      requestId,
      vulnerabilitiesFound:
      /* istanbul ignore next */
      (cov_1epkh56tam().b[6][0]++, response.vulnerabilities?.length) ||
      /* istanbul ignore next */
      (cov_1epkh56tam().b[6][1]++, 0),
      riskScore: response.riskScore,
      processingTime: response.scanMetrics?.duration
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[32]++;
    res.json(ResponseFormatter.success(response, 'Security scan completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1epkh56tam().s[33]++;
    Logger.error('Security scan failed', {
      requestId,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[34]++;
    next(error);
  }
});

/**
 * POST /api/security/batch-scan
 * Batch scan multiple files for security vulnerabilities
 */
/* istanbul ignore next */
cov_1epkh56tam().s[35]++;
router.post('/batch-scan', upload.array('files', 10), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1epkh56tam().f[2]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1epkh56tam().s[36]++, `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1epkh56tam().s[37]++;
  try {
    /* istanbul ignore next */
    cov_1epkh56tam().s[38]++;
    Logger.info('Batch security scan request received', {
      requestId,
      fileCount:
      /* istanbul ignore next */
      (cov_1epkh56tam().b[7][0]++, req.files?.length) ||
      /* istanbul ignore next */
      (cov_1epkh56tam().b[7][1]++, 0),
      ip: req.ip
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1epkh56tam().b[9][0]++, !req.files) ||
    /* istanbul ignore next */
    (cov_1epkh56tam().b[9][1]++, req.files.length === 0)) {
      /* istanbul ignore next */
      cov_1epkh56tam().b[8][0]++;
      cov_1epkh56tam().s[40]++;
      throw ErrorHandler.createError('NO_FILES_PROVIDED', 'No files provided for batch scanning', 400);
    } else
    /* istanbul ignore next */
    {
      cov_1epkh56tam().b[8][1]++;
    }

    // Process files
    const files =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[41]++, req.files.map(file => {
      /* istanbul ignore next */
      cov_1epkh56tam().f[3]++;
      cov_1epkh56tam().s[42]++;
      return {
        name: file.originalname,
        content: file.buffer.toString('utf8'),
        size: file.size
      };
    }));

    // Validate all files
    /* istanbul ignore next */
    cov_1epkh56tam().s[43]++;
    for (const file of files) {
      /* istanbul ignore next */
      cov_1epkh56tam().s[44]++;
      if (!ValidationUtils.validateCodeInput(file.content)) {
        /* istanbul ignore next */
        cov_1epkh56tam().b[10][0]++;
        cov_1epkh56tam().s[45]++;
        throw ErrorHandler.createError('INVALID_FILE_CONTENT', `File ${file.name} contains invalid or empty code content`, 400);
      } else
      /* istanbul ignore next */
      {
        cov_1epkh56tam().b[10][1]++;
      }
    }
    const scanOptions =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[46]++, {
      includeContext: req.body.includeContext !== 'false',
      severity:
      /* istanbul ignore next */
      (cov_1epkh56tam().b[11][0]++, req.body.severity) ||
      /* istanbul ignore next */
      (cov_1epkh56tam().b[11][1]++, 'all'),
      language: req.body.language,
      framework: req.body.framework,
      requestId
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[47]++;
    Logger.debug('Starting batch security scan', {
      requestId,
      fileCount: files.length,
      totalSize: files.reduce((sum, f) => {
        /* istanbul ignore next */
        cov_1epkh56tam().f[4]++;
        cov_1epkh56tam().s[48]++;
        return sum + f.size;
      }, 0),
      scanOptions
    });

    // Perform batch scanning
    const results =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[49]++, []);
    const batchStartTime =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[50]++, Date.now());
    /* istanbul ignore next */
    cov_1epkh56tam().s[51]++;
    for (const [index, file] of files.entries()) {
      /* istanbul ignore next */
      cov_1epkh56tam().s[52]++;
      try {
        /* istanbul ignore next */
        cov_1epkh56tam().s[53]++;
        Logger.debug(`Scanning file ${index + 1}/${files.length}`, {
          requestId,
          fileName: file.name
        });
        const scanResult =
        /* istanbul ignore next */
        (cov_1epkh56tam().s[54]++, await SecurityScanner.scan(file.content, {
          ...scanOptions,
          fileName: file.name
        }));
        /* istanbul ignore next */
        cov_1epkh56tam().s[55]++;
        results.push({
          fileName: file.name,
          success: true,
          ...scanResult.data
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1epkh56tam().s[56]++;
        Logger.error(`Failed to scan file: ${file.name}`, {
          requestId,
          error: error.message
        });
        /* istanbul ignore next */
        cov_1epkh56tam().s[57]++;
        results.push({
          fileName: file.name,
          success: false,
          error: error.message
        });
      }
    }
    const batchResult =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[58]++, {
      results,
      summary: {
        totalFiles: files.length,
        successfulScans: results.filter(r => {
          /* istanbul ignore next */
          cov_1epkh56tam().f[5]++;
          cov_1epkh56tam().s[59]++;
          return r.success;
        }).length,
        failedScans: results.filter(r => {
          /* istanbul ignore next */
          cov_1epkh56tam().f[6]++;
          cov_1epkh56tam().s[60]++;
          return !r.success;
        }).length,
        totalVulnerabilities: results.filter(r => {
          /* istanbul ignore next */
          cov_1epkh56tam().f[7]++;
          cov_1epkh56tam().s[61]++;
          return r.success;
        }).reduce((sum, r) => {
          /* istanbul ignore next */
          cov_1epkh56tam().f[8]++;
          cov_1epkh56tam().s[62]++;
          return sum + (
          /* istanbul ignore next */
          (cov_1epkh56tam().b[12][0]++, r.vulnerabilities?.length) ||
          /* istanbul ignore next */
          (cov_1epkh56tam().b[12][1]++, 0));
        }, 0),
        processingTime: Date.now() - batchStartTime
      },
      requestInfo: {
        requestId,
        timestamp: new Date().toISOString(),
        options: scanOptions
      }
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[63]++;
    Logger.info('Batch security scan completed', {
      requestId,
      ...batchResult.summary
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[64]++;
    res.json(ResponseFormatter.success(batchResult, 'Batch security scan completed'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1epkh56tam().s[65]++;
    Logger.error('Batch security scan failed', {
      requestId,
      error: error.message
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[66]++;
    next(error);
  }
});

/**
 * GET /api/security/patterns
 * Get available vulnerability patterns and categories
 */
/* istanbul ignore next */
cov_1epkh56tam().s[67]++;
router.get('/patterns', async (req, res, next) => {
  /* istanbul ignore next */
  cov_1epkh56tam().f[9]++;
  cov_1epkh56tam().s[68]++;
  try {
    /* istanbul ignore next */
    cov_1epkh56tam().s[69]++;
    Logger.info('Vulnerability patterns request received');
    const patterns =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[70]++, {
      categories: ['Secrets Management', 'Injection Attacks', 'Cross-Site Scripting', 'Cryptographic Issues', 'Insecure Storage', 'Authentication & Authorization'],
      severities: ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'],
      supportedLanguages: ['javascript', 'python', 'java', 'cpp', 'go'],
      supportedFrameworks: ['express', 'react', 'vue', 'django', 'flask', 'spring'],
      detectionCapabilities: {
        hardcodedSecrets: 'Detects API keys, passwords, and secret keys in code',
        sqlInjection: 'Identifies potential SQL injection vulnerabilities',
        xss: 'Finds cross-site scripting vulnerability patterns',
        weakCrypto: 'Detects weak cryptographic implementations',
        insecureStorage: 'Identifies insecure data storage practices',
        authIssues: 'Finds authentication and authorization problems'
      }
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[71]++;
    res.json(ResponseFormatter.success(patterns, 'Vulnerability patterns retrieved successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1epkh56tam().s[72]++;
    Logger.error('Failed to retrieve vulnerability patterns', error);
    /* istanbul ignore next */
    cov_1epkh56tam().s[73]++;
    next(error);
  }
});

/**
 * GET /api/security/health
 * Health check for security scanning service
 */
/* istanbul ignore next */
cov_1epkh56tam().s[74]++;
router.get('/health', async (req, res, next) => {
  /* istanbul ignore next */
  cov_1epkh56tam().f[10]++;
  cov_1epkh56tam().s[75]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_1epkh56tam().s[76]++, {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      service: 'Security Scanner',
      version: '2.0.0',
      capabilities: {
        patternCount: Object.values(SecurityScanner.vulnerabilityPatterns).reduce((sum, category) => {
          /* istanbul ignore next */
          cov_1epkh56tam().f[11]++;
          cov_1epkh56tam().s[77]++;
          return sum + category.patterns.length;
        }, 0),
        categoriesSupported: Object.keys(SecurityScanner.vulnerabilityPatterns).length,
        enhancedFeatures: ['CWE mapping', 'Risk scoring', 'Context analysis', 'Detailed recommendations', 'Batch processing']
      }
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[78]++;
    res.json(ResponseFormatter.success(health, 'Security service is healthy'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1epkh56tam().s[79]++;
    Logger.error('Security service health check failed', error);
    /* istanbul ignore next */
    cov_1epkh56tam().s[80]++;
    next(error);
  }
});

// Error handling middleware specific to security routes
/* istanbul ignore next */
cov_1epkh56tam().s[81]++;
router.use((error, req, res, next) => {
  /* istanbul ignore next */
  cov_1epkh56tam().f[12]++;
  cov_1epkh56tam().s[82]++;
  if (error instanceof multer.MulterError) {
    /* istanbul ignore next */
    cov_1epkh56tam().b[13][0]++;
    cov_1epkh56tam().s[83]++;
    Logger.error('File upload error', {
      error: error.message,
      code: error.code
    });
    /* istanbul ignore next */
    cov_1epkh56tam().s[84]++;
    switch (error.code) {
      case 'LIMIT_FILE_SIZE':
        /* istanbul ignore next */
        cov_1epkh56tam().b[14][0]++;
        cov_1epkh56tam().s[85]++;
        return res.status(413).json(ResponseFormatter.error('File too large. Maximum size is 50MB.', 413));
      case 'LIMIT_FILE_COUNT':
        /* istanbul ignore next */
        cov_1epkh56tam().b[14][1]++;
        cov_1epkh56tam().s[86]++;
        return res.status(413).json(ResponseFormatter.error('Too many files. Maximum is 10 files.', 413));
      case 'LIMIT_UNEXPECTED_FILE':
        /* istanbul ignore next */
        cov_1epkh56tam().b[14][2]++;
        cov_1epkh56tam().s[87]++;
        return res.status(400).json(ResponseFormatter.error('Unexpected file field.', 400));
      default:
        /* istanbul ignore next */
        cov_1epkh56tam().b[14][3]++;
        cov_1epkh56tam().s[88]++;
        return res.status(400).json(ResponseFormatter.error(`File upload error: ${error.message}`, 400));
    }
  } else
  /* istanbul ignore next */
  {
    cov_1epkh56tam().b[13][1]++;
  }

  // Pass to global error handler
  cov_1epkh56tam().s[89]++;
  next(error);
});
/* istanbul ignore next */
cov_1epkh56tam().s[90]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,