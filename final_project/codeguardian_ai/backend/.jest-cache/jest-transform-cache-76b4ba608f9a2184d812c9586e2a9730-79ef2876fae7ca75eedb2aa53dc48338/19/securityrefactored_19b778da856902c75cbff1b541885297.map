{"version":3,"names":["cov_1epkh56tam","actualCoverage","express","s","require","multer","SecurityScanner","ResponseFormatter","ValidationUtils","Logger","ErrorHandler","router","Router","upload","storage","memoryStorage","limits","fileSize","files","fileFilter","req","file","cb","f","validateUploadedFile","error","post","single","res","next","requestId","Date","now","Math","random","toString","substr","info","hasFile","hasCode","body","code","userAgent","headers","ip","fileName","b","buffer","originalname","validateCodeInput","createError","scanOptions","includeContext","severity","categories","split","undefined","language","framework","debug","codeLength","length","scanResult","scan","response","data","requestInfo","timestamp","toISOString","options","vulnerabilitiesFound","vulnerabilities","riskScore","processingTime","scanMetrics","duration","json","success","message","stack","array","fileCount","map","name","content","size","totalSize","reduce","sum","results","batchStartTime","index","entries","push","batchResult","summary","totalFiles","successfulScans","filter","r","failedScans","totalVulnerabilities","get","patterns","severities","supportedLanguages","supportedFrameworks","detectionCapabilities","hardcodedSecrets","sqlInjection","xss","weakCrypto","insecureStorage","authIssues","health","status","service","version","capabilities","patternCount","Object","values","vulnerabilityPatterns","category","categoriesSupported","keys","enhancedFeatures","use","MulterError","module","exports"],"sources":["security.refactored.js"],"sourcesContent":["/**\n * Enhanced Security Route Handler\n * Handles security scanning requests with improved error handling and validation\n */\n\nconst express = require('express');\nconst multer = require('multer');\nconst SecurityScanner = require('../services/securityScanner.refactored');\nconst ResponseFormatter = require('../utils/responseFormatter');\nconst ValidationUtils = require('../utils/validationUtils');\nconst Logger = require('../utils/logger');\nconst ErrorHandler = require('../utils/errorHandler');\n\nconst router = express.Router();\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n    files: 10 // Maximum 10 files\n  },\n  fileFilter: (req, file, cb) => {\n    try {\n      ValidationUtils.validateUploadedFile(file);\n      cb(null, true);\n    } catch (error) {\n      cb(error, false);\n    }\n  }\n});\n\n/**\n * POST /api/security/scan\n * Scan code for security vulnerabilities\n */\nrouter.post('/scan', upload.single('file'), async (req, res, next) => {\n  const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  try {\n    Logger.info('Security scan request received', { \n      requestId,\n      hasFile: !!req.file,\n      hasCode: !!req.body.code,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip\n    });\n\n    // Extract code from file or request body\n    let code, fileName;\n    \n    if (req.file) {\n      code = req.file.buffer.toString('utf8');\n      fileName = req.file.originalname;\n      \n      // Validate file content\n      if (!ValidationUtils.validateCodeInput(code)) {\n        throw ErrorHandler.createError(\n          'INVALID_FILE_CONTENT',\n          'File contains invalid or empty code content',\n          400\n        );\n      }\n    } else if (req.body.code) {\n      code = req.body.code;\n      fileName = req.body.fileName || 'uploaded_code';\n    } else {\n      throw ErrorHandler.createError(\n        'MISSING_CODE_INPUT',\n        'No code provided for scanning. Include code in request body or upload a file.',\n        400\n      );\n    }\n\n    // Validate code input\n    ValidationUtils.validateCodeInput(code);\n\n    // Parse scan options\n    const scanOptions = {\n      includeContext: req.body.includeContext !== 'false',\n      severity: req.body.severity || 'all',\n      categories: req.body.categories ? req.body.categories.split(',') : undefined,\n      language: req.body.language,\n      framework: req.body.framework,\n      requestId,\n      fileName\n    };\n\n    Logger.debug('Starting security scan', { \n      requestId,\n      codeLength: code.length,\n      fileName,\n      scanOptions \n    });\n\n    // Perform security scan\n    const scanResult = await SecurityScanner.scan(code, scanOptions);\n\n    // Add request metadata to response\n    const response = {\n      ...scanResult.data,\n      requestInfo: {\n        requestId,\n        fileName,\n        timestamp: new Date().toISOString(),\n        options: scanOptions\n      }\n    };\n\n    Logger.info('Security scan completed successfully', {\n      requestId,\n      vulnerabilitiesFound: response.vulnerabilities?.length || 0,\n      riskScore: response.riskScore,\n      processingTime: response.scanMetrics?.duration\n    });\n\n    res.json(ResponseFormatter.success(response, 'Security scan completed successfully'));\n\n  } catch (error) {\n    Logger.error('Security scan failed', { \n      requestId,\n      error: error.message,\n      stack: error.stack \n    });\n\n    next(error);\n  }\n});\n\n/**\n * POST /api/security/batch-scan\n * Batch scan multiple files for security vulnerabilities\n */\nrouter.post('/batch-scan', upload.array('files', 10), async (req, res, next) => {\n  const requestId = `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  try {\n    Logger.info('Batch security scan request received', { \n      requestId,\n      fileCount: req.files?.length || 0,\n      ip: req.ip\n    });\n\n    if (!req.files || req.files.length === 0) {\n      throw ErrorHandler.createError(\n        'NO_FILES_PROVIDED',\n        'No files provided for batch scanning',\n        400\n      );\n    }\n\n    // Process files\n    const files = req.files.map(file => ({\n      name: file.originalname,\n      content: file.buffer.toString('utf8'),\n      size: file.size\n    }));\n\n    // Validate all files\n    for (const file of files) {\n      if (!ValidationUtils.validateCodeInput(file.content)) {\n        throw ErrorHandler.createError(\n          'INVALID_FILE_CONTENT',\n          `File ${file.name} contains invalid or empty code content`,\n          400\n        );\n      }\n    }\n\n    const scanOptions = {\n      includeContext: req.body.includeContext !== 'false',\n      severity: req.body.severity || 'all',\n      language: req.body.language,\n      framework: req.body.framework,\n      requestId\n    };\n\n    Logger.debug('Starting batch security scan', { \n      requestId,\n      fileCount: files.length,\n      totalSize: files.reduce((sum, f) => sum + f.size, 0),\n      scanOptions \n    });\n\n    // Perform batch scanning\n    const results = [];\n    const batchStartTime = Date.now();\n\n    for (const [index, file] of files.entries()) {\n      try {\n        Logger.debug(`Scanning file ${index + 1}/${files.length}`, { \n          requestId,\n          fileName: file.name \n        });\n\n        const scanResult = await SecurityScanner.scan(file.content, {\n          ...scanOptions,\n          fileName: file.name\n        });\n\n        results.push({\n          fileName: file.name,\n          success: true,\n          ...scanResult.data\n        });\n\n      } catch (error) {\n        Logger.error(`Failed to scan file: ${file.name}`, { \n          requestId,\n          error: error.message \n        });\n\n        results.push({\n          fileName: file.name,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n\n    const batchResult = {\n      results,\n      summary: {\n        totalFiles: files.length,\n        successfulScans: results.filter(r => r.success).length,\n        failedScans: results.filter(r => !r.success).length,\n        totalVulnerabilities: results\n          .filter(r => r.success)\n          .reduce((sum, r) => sum + (r.vulnerabilities?.length || 0), 0),\n        processingTime: Date.now() - batchStartTime\n      },\n      requestInfo: {\n        requestId,\n        timestamp: new Date().toISOString(),\n        options: scanOptions\n      }\n    };\n\n    Logger.info('Batch security scan completed', {\n      requestId,\n      ...batchResult.summary\n    });\n\n    res.json(ResponseFormatter.success(batchResult, 'Batch security scan completed'));\n\n  } catch (error) {\n    Logger.error('Batch security scan failed', { \n      requestId,\n      error: error.message \n    });\n\n    next(error);\n  }\n});\n\n/**\n * GET /api/security/patterns\n * Get available vulnerability patterns and categories\n */\nrouter.get('/patterns', async (req, res, next) => {\n  try {\n    Logger.info('Vulnerability patterns request received');\n\n    const patterns = {\n      categories: [\n        'Secrets Management',\n        'Injection Attacks', \n        'Cross-Site Scripting',\n        'Cryptographic Issues',\n        'Insecure Storage',\n        'Authentication & Authorization'\n      ],\n      severities: ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'],\n      supportedLanguages: ['javascript', 'python', 'java', 'cpp', 'go'],\n      supportedFrameworks: ['express', 'react', 'vue', 'django', 'flask', 'spring'],\n      detectionCapabilities: {\n        hardcodedSecrets: 'Detects API keys, passwords, and secret keys in code',\n        sqlInjection: 'Identifies potential SQL injection vulnerabilities',\n        xss: 'Finds cross-site scripting vulnerability patterns',\n        weakCrypto: 'Detects weak cryptographic implementations',\n        insecureStorage: 'Identifies insecure data storage practices',\n        authIssues: 'Finds authentication and authorization problems'\n      }\n    };\n\n    res.json(ResponseFormatter.success(patterns, 'Vulnerability patterns retrieved successfully'));\n\n  } catch (error) {\n    Logger.error('Failed to retrieve vulnerability patterns', error);\n    next(error);\n  }\n});\n\n/**\n * GET /api/security/health\n * Health check for security scanning service\n */\nrouter.get('/health', async (req, res, next) => {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      service: 'Security Scanner',\n      version: '2.0.0',\n      capabilities: {\n        patternCount: Object.values(SecurityScanner.vulnerabilityPatterns)\n          .reduce((sum, category) => sum + category.patterns.length, 0),\n        categoriesSupported: Object.keys(SecurityScanner.vulnerabilityPatterns).length,\n        enhancedFeatures: [\n          'CWE mapping',\n          'Risk scoring',\n          'Context analysis',\n          'Detailed recommendations',\n          'Batch processing'\n        ]\n      }\n    };\n\n    res.json(ResponseFormatter.success(health, 'Security service is healthy'));\n\n  } catch (error) {\n    Logger.error('Security service health check failed', error);\n    next(error);\n  }\n});\n\n// Error handling middleware specific to security routes\nrouter.use((error, req, res, next) => {\n  if (error instanceof multer.MulterError) {\n    Logger.error('File upload error', { error: error.message, code: error.code });\n    \n    switch (error.code) {\n      case 'LIMIT_FILE_SIZE':\n        return res.status(413).json(\n          ResponseFormatter.error('File too large. Maximum size is 50MB.', 413)\n        );\n      case 'LIMIT_FILE_COUNT':\n        return res.status(413).json(\n          ResponseFormatter.error('Too many files. Maximum is 10 files.', 413)\n        );\n      case 'LIMIT_UNEXPECTED_FILE':\n        return res.status(400).json(\n          ResponseFormatter.error('Unexpected file field.', 400)\n        );\n      default:\n        return res.status(400).json(\n          ResponseFormatter.error(`File upload error: ${error.message}`, 400)\n        );\n    }\n  }\n\n  // Pass to global error handler\n  next(error);\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}