8ac9a4f9580dd4babe29fb5f3dbe2dd2
"use strict";

/**
 * Basic unit tests for ValidationUtils utility
 * Tests the actual implementation that exists
 */

const ValidationUtils = require('../../../utils/validationUtils');
describe('ValidationUtils Utility - Basic Tests', () => {
  describe('validateApiKey method', () => {
    test('should validate correct OpenAI API key format', () => {
      const validKey = 'sk-1234567890abcdef1234567890abcdef';
      const result = ValidationUtils.validateApiKey(validKey);
      expect(result).toBe(true);
    });
    test('should reject invalid API key format', () => {
      const invalidKeys = ['invalid-key', 'sk-short', '', null, undefined, 123];
      invalidKeys.forEach(key => {
        const result = ValidationUtils.validateApiKey(key);
        expect(result).toBe(false);
      });
    });
    test('should reject non-string API keys', () => {
      const nonStringKeys = [null, undefined, 123, {}, []];
      nonStringKeys.forEach(key => {
        const result = ValidationUtils.validateApiKey(key);
        expect(result).toBe(false);
      });
    });
  });
  describe('sanitizeFileContent method', () => {
    test('should remove control characters', () => {
      const content = 'console.log("test");\u0000\u0001\u0002';
      const sanitized = ValidationUtils.sanitizeFileContent(content);
      expect(sanitized).toBe('console.log("test");');
      expect(sanitized).not.toContain('\u0000');
    });
    test('should limit content to 100KB', () => {
      const largeContent = 'a'.repeat(200000); // 200KB

      const sanitized = ValidationUtils.sanitizeFileContent(largeContent);
      expect(sanitized.length).toBe(100000);
    });
    test('should handle normal content unchanged', () => {
      const content = 'function test() { return true; }';
      const sanitized = ValidationUtils.sanitizeFileContent(content);
      expect(sanitized).toBe(content);
    });
    test('should handle empty content', () => {
      const result = ValidationUtils.sanitizeFileContent('');
      expect(result).toBe('');
    });
  });
  describe('fileUploadRules method', () => {
    test('should return array of validation rules', () => {
      const rules = ValidationUtils.fileUploadRules();
      expect(Array.isArray(rules)).toBe(true);
      expect(rules.length).toBeGreaterThan(0);
    });
  });
  describe('handleValidationErrors method', () => {
    test('should be a function', () => {
      expect(typeof ValidationUtils.handleValidationErrors).toBe('function');
    });
    test('should have correct number of parameters', () => {
      expect(ValidationUtils.handleValidationErrors.length).toBe(3);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,