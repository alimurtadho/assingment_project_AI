{"version":3,"names":["ValidationUtils","require","describe","test","validKey","result","validateApiKey","expect","toBe","invalidKeys","undefined","forEach","key","nonStringKeys","content","sanitized","sanitizeFileContent","not","toContain","largeContent","repeat","length","rules","fileUploadRules","Array","isArray","toBeGreaterThan","handleValidationErrors"],"sources":["validationUtils.basic.test.js"],"sourcesContent":["/**\n * Basic unit tests for ValidationUtils utility\n * Tests the actual implementation that exists\n */\n\nconst ValidationUtils = require('../../../utils/validationUtils');\n\ndescribe('ValidationUtils Utility - Basic Tests', () => {\n    describe('validateApiKey method', () => {\n        test('should validate correct OpenAI API key format', () => {\n            const validKey = 'sk-1234567890abcdef1234567890abcdef';\n            \n            const result = ValidationUtils.validateApiKey(validKey);\n            \n            expect(result).toBe(true);\n        });\n\n        test('should reject invalid API key format', () => {\n            const invalidKeys = [\n                'invalid-key',\n                'sk-short',\n                '',\n                null,\n                undefined,\n                123\n            ];\n            \n            invalidKeys.forEach(key => {\n                const result = ValidationUtils.validateApiKey(key);\n                expect(result).toBe(false);\n            });\n        });\n\n        test('should reject non-string API keys', () => {\n            const nonStringKeys = [null, undefined, 123, {}, []];\n            \n            nonStringKeys.forEach(key => {\n                const result = ValidationUtils.validateApiKey(key);\n                expect(result).toBe(false);\n            });\n        });\n    });\n\n    describe('sanitizeFileContent method', () => {\n        test('should remove control characters', () => {\n            const content = 'console.log(\"test\");\\u0000\\u0001\\u0002';\n            \n            const sanitized = ValidationUtils.sanitizeFileContent(content);\n            \n            expect(sanitized).toBe('console.log(\"test\");');\n            expect(sanitized).not.toContain('\\u0000');\n        });\n\n        test('should limit content to 100KB', () => {\n            const largeContent = 'a'.repeat(200000); // 200KB\n            \n            const sanitized = ValidationUtils.sanitizeFileContent(largeContent);\n            \n            expect(sanitized.length).toBe(100000);\n        });\n\n        test('should handle normal content unchanged', () => {\n            const content = 'function test() { return true; }';\n            \n            const sanitized = ValidationUtils.sanitizeFileContent(content);\n            \n            expect(sanitized).toBe(content);\n        });\n\n        test('should handle empty content', () => {\n            const result = ValidationUtils.sanitizeFileContent('');\n            \n            expect(result).toBe('');\n        });\n    });\n\n    describe('fileUploadRules method', () => {\n        test('should return array of validation rules', () => {\n            const rules = ValidationUtils.fileUploadRules();\n            \n            expect(Array.isArray(rules)).toBe(true);\n            expect(rules.length).toBeGreaterThan(0);\n        });\n    });\n\n    describe('handleValidationErrors method', () => {\n        test('should be a function', () => {\n            expect(typeof ValidationUtils.handleValidationErrors).toBe('function');\n        });\n\n        test('should have correct number of parameters', () => {\n            expect(ValidationUtils.handleValidationErrors.length).toBe(3);\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}