ece5fa1aa247cbae3cccb42093db005f
/* istanbul ignore next */
function cov_todoorwbp() {
  var path = "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/auth.js";
  var hash = "fec61bee689bbd8802092e6202679790fc757d4a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/auth.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 2,
          column: 34
        }
      },
      "2": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "3": {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 50
        }
      },
      "4": {
        start: {
          line: 5,
          column: 48
        },
        end: {
          line: 5,
          column: 83
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "7": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "8": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 58,
          column: 3
        }
      },
      "9": {
        start: {
          line: 13,
          column: 38
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "10": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "11": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "12": {
        start: {
          line: 21,
          column: 6
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "13": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 58
        }
      },
      "14": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 40,
          column: 6
        }
      },
      "15": {
        start: {
          line: 43,
          column: 18
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "16": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 53,
          column: 7
        }
      },
      "17": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 48
        }
      },
      "18": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 51
        }
      },
      "19": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 103,
          column: 3
        }
      },
      "20": {
        start: {
          line: 63,
          column: 2
        },
        end: {
          line: 102,
          column: 3
        }
      },
      "21": {
        start: {
          line: 64,
          column: 32
        },
        end: {
          line: 64,
          column: 40
        }
      },
      "22": {
        start: {
          line: 67,
          column: 17
        },
        end: {
          line: 69,
          column: 6
        }
      },
      "23": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "24": {
        start: {
          line: 72,
          column: 6
        },
        end: {
          line: 72,
          column: 68
        }
      },
      "25": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 76,
          column: 73
        }
      },
      "26": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "27": {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 68
        }
      },
      "28": {
        start: {
          line: 83,
          column: 18
        },
        end: {
          line: 87,
          column: 5
        }
      },
      "29": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 97,
          column: 7
        }
      },
      "30": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 41
        }
      },
      "31": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 51
        }
      },
      "32": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 136,
          column: 3
        }
      },
      "33": {
        start: {
          line: 107,
          column: 2
        },
        end: {
          line: 135,
          column: 3
        }
      },
      "34": {
        start: {
          line: 108,
          column: 18
        },
        end: {
          line: 108,
          column: 58
        }
      },
      "35": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "36": {
        start: {
          line: 111,
          column: 6
        },
        end: {
          line: 111,
          column: 66
        }
      },
      "37": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 61
        }
      },
      "38": {
        start: {
          line: 116,
          column: 17
        },
        end: {
          line: 124,
          column: 6
        }
      },
      "39": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "40": {
        start: {
          line: 127,
          column: 6
        },
        end: {
          line: 127,
          column: 63
        }
      },
      "41": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 130,
          column: 23
        }
      },
      "42": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 133,
          column: 44
        }
      },
      "43": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 53
        }
      },
      "44": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 138,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 47
          },
          end: {
            line: 11,
            column: 48
          }
        },
        loc: {
          start: {
            line: 11,
            column: 67
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 62,
            column: 37
          },
          end: {
            line: 62,
            column: 38
          }
        },
        loc: {
          start: {
            line: 62,
            column: 57
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 62
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 106,
            column: 18
          },
          end: {
            line: 106,
            column: 19
          }
        },
        loc: {
          start: {
            line: 106,
            column: 38
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 106
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "2": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 71,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: 71,
            column: 17
          },
          end: {
            line: 71,
            column: 31
          }
        }],
        line: 71
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fec61bee689bbd8802092e6202679790fc757d4a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_todoorwbp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_todoorwbp();
const express =
/* istanbul ignore next */
(cov_todoorwbp().s[0]++, require('express'));
const bcrypt =
/* istanbul ignore next */
(cov_todoorwbp().s[1]++, require('bcryptjs'));
const jwt =
/* istanbul ignore next */
(cov_todoorwbp().s[2]++, require('jsonwebtoken'));
const {
  PrismaClient
} =
/* istanbul ignore next */
(cov_todoorwbp().s[3]++, require('@prisma/client'));
const {
  validateRegistration,
  validateLogin
} =
/* istanbul ignore next */
(cov_todoorwbp().s[4]++, require('../middleware/validation'));
const router =
/* istanbul ignore next */
(cov_todoorwbp().s[5]++, express.Router());
const prisma =
/* istanbul ignore next */
(cov_todoorwbp().s[6]++, new PrismaClient());

// Register endpoint
/* istanbul ignore next */
cov_todoorwbp().s[7]++;
router.post('/register', validateRegistration, async (req, res) => {
  /* istanbul ignore next */
  cov_todoorwbp().f[0]++;
  cov_todoorwbp().s[8]++;
  try {
    const {
      email,
      name,
      password
    } =
    /* istanbul ignore next */
    (cov_todoorwbp().s[9]++, req.body);

    // Check if user already exists
    const existingUser =
    /* istanbul ignore next */
    (cov_todoorwbp().s[10]++, await prisma.user.findUnique({
      where: {
        email
      }
    }));
    /* istanbul ignore next */
    cov_todoorwbp().s[11]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_todoorwbp().b[0][0]++;
      cov_todoorwbp().s[12]++;
      return res.status(400).json({
        error: 'User already exists'
      });
    } else
    /* istanbul ignore next */
    {
      cov_todoorwbp().b[0][1]++;
    }

    // Hash password
    const hashedPassword =
    /* istanbul ignore next */
    (cov_todoorwbp().s[13]++, await bcrypt.hash(password, 12));

    // Create user
    const user =
    /* istanbul ignore next */
    (cov_todoorwbp().s[14]++, await prisma.user.create({
      data: {
        email,
        name,
        password: hashedPassword
      },
      select: {
        id: true,
        email: true,
        name: true,
        createdAt: true
      }
    }));

    // Generate JWT token
    const token =
    /* istanbul ignore next */
    (cov_todoorwbp().s[15]++, jwt.sign({
      userId: user.id,
      email: user.email
    }, process.env.JWT_SECRET, {
      expiresIn: '7d'
    }));
    /* istanbul ignore next */
    cov_todoorwbp().s[16]++;
    res.status(201).json({
      success: true,
      user,
      token
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_todoorwbp().s[17]++;
    console.error('Registration error:', error);
    /* istanbul ignore next */
    cov_todoorwbp().s[18]++;
    res.status(500).json({
      error: error.message
    });
  }
});

// Login endpoint
/* istanbul ignore next */
cov_todoorwbp().s[19]++;
router.post('/login', validateLogin, async (req, res) => {
  /* istanbul ignore next */
  cov_todoorwbp().f[1]++;
  cov_todoorwbp().s[20]++;
  try {
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_todoorwbp().s[21]++, req.body);

    // Find user
    const user =
    /* istanbul ignore next */
    (cov_todoorwbp().s[22]++, await prisma.user.findUnique({
      where: {
        email
      }
    }));
    /* istanbul ignore next */
    cov_todoorwbp().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_todoorwbp().b[2][0]++, !user) ||
    /* istanbul ignore next */
    (cov_todoorwbp().b[2][1]++, !user.password)) {
      /* istanbul ignore next */
      cov_todoorwbp().b[1][0]++;
      cov_todoorwbp().s[24]++;
      return res.status(401).json({
        error: 'Invalid credentials'
      });
    } else
    /* istanbul ignore next */
    {
      cov_todoorwbp().b[1][1]++;
    }

    // Verify password
    const isValidPassword =
    /* istanbul ignore next */
    (cov_todoorwbp().s[25]++, await bcrypt.compare(password, user.password));
    /* istanbul ignore next */
    cov_todoorwbp().s[26]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_todoorwbp().b[3][0]++;
      cov_todoorwbp().s[27]++;
      return res.status(401).json({
        error: 'Invalid credentials'
      });
    } else
    /* istanbul ignore next */
    {
      cov_todoorwbp().b[3][1]++;
    }

    // Generate JWT token
    const token =
    /* istanbul ignore next */
    (cov_todoorwbp().s[28]++, jwt.sign({
      userId: user.id,
      email: user.email
    }, process.env.JWT_SECRET, {
      expiresIn: '7d'
    }));
    /* istanbul ignore next */
    cov_todoorwbp().s[29]++;
    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      },
      token
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_todoorwbp().s[30]++;
    console.error('Login error:', error);
    /* istanbul ignore next */
    cov_todoorwbp().s[31]++;
    res.status(500).json({
      error: error.message
    });
  }
});

// Get current user
/* istanbul ignore next */
cov_todoorwbp().s[32]++;
router.get('/me', async (req, res) => {
  /* istanbul ignore next */
  cov_todoorwbp().f[2]++;
  cov_todoorwbp().s[33]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_todoorwbp().s[34]++, req.headers.authorization?.split(' ')[1]);
    /* istanbul ignore next */
    cov_todoorwbp().s[35]++;
    if (!token) {
      /* istanbul ignore next */
      cov_todoorwbp().b[4][0]++;
      cov_todoorwbp().s[36]++;
      return res.status(401).json({
        error: 'No token provided'
      });
    } else
    /* istanbul ignore next */
    {
      cov_todoorwbp().b[4][1]++;
    }
    const decoded =
    /* istanbul ignore next */
    (cov_todoorwbp().s[37]++, jwt.verify(token, process.env.JWT_SECRET));
    const user =
    /* istanbul ignore next */
    (cov_todoorwbp().s[38]++, await prisma.user.findUnique({
      where: {
        id: decoded.userId
      },
      select: {
        id: true,
        email: true,
        name: true,
        createdAt: true
      }
    }));
    /* istanbul ignore next */
    cov_todoorwbp().s[39]++;
    if (!user) {
      /* istanbul ignore next */
      cov_todoorwbp().b[5][0]++;
      cov_todoorwbp().s[40]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_todoorwbp().b[5][1]++;
    }
    cov_todoorwbp().s[41]++;
    res.json({
      user
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_todoorwbp().s[42]++;
    console.error('Get user error:', error);
    /* istanbul ignore next */
    cov_todoorwbp().s[43]++;
    res.status(401).json({
      error: 'Invalid token'
    });
  }
});
/* istanbul ignore next */
cov_todoorwbp().s[44]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,