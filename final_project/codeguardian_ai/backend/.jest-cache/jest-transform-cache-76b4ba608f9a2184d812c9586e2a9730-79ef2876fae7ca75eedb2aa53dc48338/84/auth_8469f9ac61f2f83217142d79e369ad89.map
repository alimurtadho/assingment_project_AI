{"version":3,"names":["cov_todoorwbp","actualCoverage","express","s","require","bcrypt","jwt","PrismaClient","validateRegistration","validateLogin","router","Router","prisma","post","req","res","f","email","name","password","body","existingUser","user","findUnique","where","b","status","json","error","hashedPassword","hash","create","data","select","id","createdAt","token","sign","userId","process","env","JWT_SECRET","expiresIn","success","console","message","isValidPassword","compare","get","headers","authorization","split","decoded","verify","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { PrismaClient } = require('@prisma/client');\nconst { validateRegistration, validateLogin } = require('../middleware/validation');\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Register endpoint\nrouter.post('/register', validateRegistration, async (req, res) => {\n  try {\n    const { email, name, password } = req.body;\n    \n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email }\n    });\n    \n    if (existingUser) {\n      return res.status(400).json({ error: 'User already exists' });\n    }\n    \n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n    \n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        email,\n        name,\n        password: hashedPassword\n      },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        createdAt: true\n      }\n    });\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n    \n    res.status(201).json({\n      success: true,\n      user,\n      token\n    });\n    \n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Login endpoint\nrouter.post('/login', validateLogin, async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    // Find user\n    const user = await prisma.user.findUnique({\n      where: { email }\n    });\n    \n    if (!user || !user.password) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    \n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    \n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      process.env.JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n    \n    res.json({\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name\n      },\n      token\n    });\n    \n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get current user\nrouter.get('/me', async (req, res) => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    \n    if (!token) {\n      return res.status(401).json({ error: 'No token provided' });\n    }\n    \n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    \n    const user = await prisma.user.findUnique({\n      where: { id: decoded.userId },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        createdAt: true\n      }\n    });\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json({ user });\n    \n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(401).json({ error: 'Invalid token' });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}