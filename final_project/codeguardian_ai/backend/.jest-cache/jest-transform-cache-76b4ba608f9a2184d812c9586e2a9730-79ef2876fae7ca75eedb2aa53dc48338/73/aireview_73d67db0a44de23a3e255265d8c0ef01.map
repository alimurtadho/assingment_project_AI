{"version":3,"names":["cov_5omwpzjcz","actualCoverage","express","s","require","multer","validateFileUpload","aiReviewer","PrismaClient","router","Router","prisma","upload","storage","memoryStorage","limits","fileSize","post","single","req","res","f","buffer","originalname","file","fileContent","toString","console","log","reviewResults","reviewCode","result","scanResult","create","data","filename","scanType","codeReview","status","auditLog","action","details","issuesFound","b","issues","length","ipAddress","ip","userAgent","get","json","success","reviewId","id","review","error","message","params","findUnique","where","select","createdAt","focusArea","body","refactorResults","suggestRefactoring","refactoring","module","exports"],"sources":["ai-review.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst { validateFileUpload } = require('../middleware/validation');\nconst aiReviewer = require('../services/aiReviewer');\nconst { PrismaClient } = require('@prisma/client');\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  }\n});\n\n// AI code review endpoint\nrouter.post('/review', upload.single('file'), validateFileUpload, async (req, res) => {\n  try {\n    const { buffer, originalname } = req.file;\n    const fileContent = buffer.toString('utf-8');\n    \n    console.log(`ðŸ¤– AI reviewing file: ${originalname}`);\n    \n    // Perform AI code review\n    const reviewResults = await aiReviewer.reviewCode(fileContent, originalname);\n    \n    // Save to database\n    const result = await prisma.scanResult.create({\n      data: {\n        filename: originalname,\n        fileContent: fileContent,\n        scanType: 'ai-review',\n        codeReview: reviewResults,\n        status: 'completed'\n      }\n    });\n    \n    // Log the action\n    await prisma.auditLog.create({\n      data: {\n        action: 'ai_review',\n        details: {\n          filename: originalname,\n          issuesFound: reviewResults.issues?.length || 0\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      }\n    });\n    \n    res.json({\n      success: true,\n      reviewId: result.id,\n      filename: originalname,\n      review: reviewResults\n    });\n    \n  } catch (error) {\n    console.error('AI review error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Get review results\nrouter.get('/review/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const result = await prisma.scanResult.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        filename: true,\n        codeReview: true,\n        status: true,\n        createdAt: true\n      }\n    });\n    \n    if (!result) {\n      return res.status(404).json({ error: 'Review result not found' });\n    }\n    \n    res.json(result);\n    \n  } catch (error) {\n    console.error('Get review result error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Refactor code suggestions\nrouter.post('/refactor', upload.single('file'), validateFileUpload, async (req, res) => {\n  try {\n    const { buffer, originalname } = req.file;\n    const fileContent = buffer.toString('utf-8');\n    const { focusArea } = req.body; // 'performance', 'readability', 'security', etc.\n    \n    console.log(`ðŸ”§ AI refactoring file: ${originalname} (focus: ${focusArea || 'general'})`);\n    \n    const refactorResults = await aiReviewer.suggestRefactoring(fileContent, originalname, focusArea);\n    \n    res.json({\n      success: true,\n      filename: originalname,\n      refactoring: refactorResults\n    });\n    \n  } catch (error) {\n    console.error('AI refactor error:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]}