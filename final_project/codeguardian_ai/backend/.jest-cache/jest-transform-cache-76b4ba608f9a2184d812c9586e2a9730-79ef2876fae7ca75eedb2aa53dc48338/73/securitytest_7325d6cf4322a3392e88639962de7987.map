{"version":3,"names":["request","require","app","describe","it","testCode","response","post","attach","Buffer","from","expect","body","success","toBe","vulnerabilities","toBeDefined","riskScore","toBeGreaterThan","error","toContain","largeContent","repeat","get","results","pagination","status","timestamp"],"sources":["security.test.js"],"sourcesContent":["const request = require('supertest');\nconst app = require('../server');\n\ndescribe('Security Scanner API', () => {\n  describe('POST /api/security/scan', () => {\n    it('should scan a file and return vulnerabilities', async () => {\n      const testCode = `\nconst API_KEY = \"sk-1234567890abcdef\";\nconst query = \"SELECT * FROM users WHERE id = \" + userId;\n      `;\n      \n      const response = await request(app)\n        .post('/api/security/scan')\n        .attach('file', Buffer.from(testCode), 'test.js')\n        .expect(200);\n      \n      expect(response.body.success).toBe(true);\n      expect(response.body.vulnerabilities).toBeDefined();\n      expect(response.body.riskScore).toBeGreaterThan(0);\n    });\n\n    it('should reject files without proper extension', async () => {\n      const response = await request(app)\n        .post('/api/security/scan')\n        .attach('file', Buffer.from('test content'), 'test.txt')\n        .expect(400);\n      \n      expect(response.body.error).toContain('Invalid file type');\n    });\n\n    it('should reject oversized files', async () => {\n      const largeContent = 'x'.repeat(6 * 1024 * 1024); // 6MB\n      \n      const response = await request(app)\n        .post('/api/security/scan')\n        .attach('file', Buffer.from(largeContent), 'large.js')\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/security/scans', () => {\n    it('should return list of scan results', async () => {\n      const response = await request(app)\n        .get('/api/security/scans')\n        .expect(200);\n      \n      expect(response.body.results).toBeDefined();\n      expect(response.body.pagination).toBeDefined();\n    });\n  });\n});\n\ndescribe('Health Check', () => {\n  it('should return OK status', async () => {\n    const response = await request(app)\n      .get('/health')\n      .expect(200);\n    \n    expect(response.body.status).toBe('OK');\n    expect(response.body.timestamp).toBeDefined();\n  });\n});\n"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAW,CAAC;AAEhCE,QAAQ,CAAC,sBAAsB,EAAE,MAAM;EACrCA,QAAQ,CAAC,yBAAyB,EAAE,MAAM;IACxCC,EAAE,CAAC,+CAA+C,EAAE,YAAY;MAC9D,MAAMC,QAAQ,GAAG;AACvB;AACA;AACA,OAAO;MAED,MAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACE,GAAG,CAAC,CAChCK,IAAI,CAAC,oBAAoB,CAAC,CAC1BC,MAAM,CAAC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,EAAE,SAAS,CAAC,CAChDM,MAAM,CAAC,GAAG,CAAC;MAEdA,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MACxCH,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACG,eAAe,CAAC,CAACC,WAAW,CAAC,CAAC;MACnDL,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACK,SAAS,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;IAEFd,EAAE,CAAC,8CAA8C,EAAE,YAAY;MAC7D,MAAME,QAAQ,GAAG,MAAMN,OAAO,CAACE,GAAG,CAAC,CAChCK,IAAI,CAAC,oBAAoB,CAAC,CAC1BC,MAAM,CAAC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,CACvDC,MAAM,CAAC,GAAG,CAAC;MAEdA,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACO,KAAK,CAAC,CAACC,SAAS,CAAC,mBAAmB,CAAC;IAC5D,CAAC,CAAC;IAEFhB,EAAE,CAAC,+BAA+B,EAAE,YAAY;MAC9C,MAAMiB,YAAY,GAAG,GAAG,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;;MAElD,MAAMhB,QAAQ,GAAG,MAAMN,OAAO,CAACE,GAAG,CAAC,CAChCK,IAAI,CAAC,oBAAoB,CAAC,CAC1BC,MAAM,CAAC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACW,YAAY,CAAC,EAAE,UAAU,CAAC,CACrDV,MAAM,CAAC,GAAG,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFR,QAAQ,CAAC,yBAAyB,EAAE,MAAM;IACxCC,EAAE,CAAC,oCAAoC,EAAE,YAAY;MACnD,MAAME,QAAQ,GAAG,MAAMN,OAAO,CAACE,GAAG,CAAC,CAChCqB,GAAG,CAAC,qBAAqB,CAAC,CAC1BZ,MAAM,CAAC,GAAG,CAAC;MAEdA,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACY,OAAO,CAAC,CAACR,WAAW,CAAC,CAAC;MAC3CL,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACa,UAAU,CAAC,CAACT,WAAW,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFb,QAAQ,CAAC,cAAc,EAAE,MAAM;EAC7BC,EAAE,CAAC,yBAAyB,EAAE,YAAY;IACxC,MAAME,QAAQ,GAAG,MAAMN,OAAO,CAACE,GAAG,CAAC,CAChCqB,GAAG,CAAC,SAAS,CAAC,CACdZ,MAAM,CAAC,GAAG,CAAC;IAEdA,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACc,MAAM,CAAC,CAACZ,IAAI,CAAC,IAAI,CAAC;IACvCH,MAAM,CAACL,QAAQ,CAACM,IAAI,CAACe,SAAS,CAAC,CAACX,WAAW,CAAC,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}