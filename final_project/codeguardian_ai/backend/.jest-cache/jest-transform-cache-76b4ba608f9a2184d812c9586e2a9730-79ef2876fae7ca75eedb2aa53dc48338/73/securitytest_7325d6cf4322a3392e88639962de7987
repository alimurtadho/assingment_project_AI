1e4115fac991b2d8e4082b0724ff22af
"use strict";

const request = require('supertest');
const app = require('../server');
describe('Security Scanner API', () => {
  describe('POST /api/security/scan', () => {
    it('should scan a file and return vulnerabilities', async () => {
      const testCode = `
const API_KEY = "sk-1234567890abcdef";
const query = "SELECT * FROM users WHERE id = " + userId;
      `;
      const response = await request(app).post('/api/security/scan').attach('file', Buffer.from(testCode), 'test.js').expect(200);
      expect(response.body.success).toBe(true);
      expect(response.body.vulnerabilities).toBeDefined();
      expect(response.body.riskScore).toBeGreaterThan(0);
    });
    it('should reject files without proper extension', async () => {
      const response = await request(app).post('/api/security/scan').attach('file', Buffer.from('test content'), 'test.txt').expect(400);
      expect(response.body.error).toContain('Invalid file type');
    });
    it('should reject oversized files', async () => {
      const largeContent = 'x'.repeat(6 * 1024 * 1024); // 6MB

      const response = await request(app).post('/api/security/scan').attach('file', Buffer.from(largeContent), 'large.js').expect(400);
    });
  });
  describe('GET /api/security/scans', () => {
    it('should return list of scan results', async () => {
      const response = await request(app).get('/api/security/scans').expect(200);
      expect(response.body.results).toBeDefined();
      expect(response.body.pagination).toBeDefined();
    });
  });
});
describe('Health Check', () => {
  it('should return OK status', async () => {
    const response = await request(app).get('/health').expect(200);
    expect(response.body.status).toBe('OK');
    expect(response.body.timestamp).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImFwcCIsImRlc2NyaWJlIiwiaXQiLCJ0ZXN0Q29kZSIsInJlc3BvbnNlIiwicG9zdCIsImF0dGFjaCIsIkJ1ZmZlciIsImZyb20iLCJleHBlY3QiLCJib2R5Iiwic3VjY2VzcyIsInRvQmUiLCJ2dWxuZXJhYmlsaXRpZXMiLCJ0b0JlRGVmaW5lZCIsInJpc2tTY29yZSIsInRvQmVHcmVhdGVyVGhhbiIsImVycm9yIiwidG9Db250YWluIiwibGFyZ2VDb250ZW50IiwicmVwZWF0IiwiZ2V0IiwicmVzdWx0cyIsInBhZ2luYXRpb24iLCJzdGF0dXMiLCJ0aW1lc3RhbXAiXSwic291cmNlcyI6WyJzZWN1cml0eS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcbmNvbnN0IGFwcCA9IHJlcXVpcmUoJy4uL3NlcnZlcicpO1xuXG5kZXNjcmliZSgnU2VjdXJpdHkgU2Nhbm5lciBBUEknLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdQT1NUIC9hcGkvc2VjdXJpdHkvc2NhbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNjYW4gYSBmaWxlIGFuZCByZXR1cm4gdnVsbmVyYWJpbGl0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdENvZGUgPSBgXG5jb25zdCBBUElfS0VZID0gXCJzay0xMjM0NTY3ODkwYWJjZGVmXCI7XG5jb25zdCBxdWVyeSA9IFwiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSBpZCA9IFwiICsgdXNlcklkO1xuICAgICAgYDtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvc2VjdXJpdHkvc2NhbicpXG4gICAgICAgIC5hdHRhY2goJ2ZpbGUnLCBCdWZmZXIuZnJvbSh0ZXN0Q29kZSksICd0ZXN0LmpzJylcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudnVsbmVyYWJpbGl0aWVzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkucmlza1Njb3JlKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBmaWxlcyB3aXRob3V0IHByb3BlciBleHRlbnNpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS9zZWN1cml0eS9zY2FuJylcbiAgICAgICAgLmF0dGFjaCgnZmlsZScsIEJ1ZmZlci5mcm9tKCd0ZXN0IGNvbnRlbnQnKSwgJ3Rlc3QudHh0JylcbiAgICAgICAgLmV4cGVjdCg0MDApO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5lcnJvcikudG9Db250YWluKCdJbnZhbGlkIGZpbGUgdHlwZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3Qgb3ZlcnNpemVkIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VDb250ZW50ID0gJ3gnLnJlcGVhdCg2ICogMTAyNCAqIDEwMjQpOyAvLyA2TUJcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvc2VjdXJpdHkvc2NhbicpXG4gICAgICAgIC5hdHRhY2goJ2ZpbGUnLCBCdWZmZXIuZnJvbShsYXJnZUNvbnRlbnQpLCAnbGFyZ2UuanMnKVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9zZWN1cml0eS9zY2FucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBsaXN0IG9mIHNjYW4gcmVzdWx0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5nZXQoJy9hcGkvc2VjdXJpdHkvc2NhbnMnKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnJlc3VsdHMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5wYWdpbmF0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnSGVhbHRoIENoZWNrJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiBPSyBzdGF0dXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgIC5nZXQoJy9oZWFsdGgnKVxuICAgICAgLmV4cGVjdCgyMDApO1xuICAgIFxuICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN0YXR1cykudG9CZSgnT0snKTtcbiAgICBleHBlY3QocmVzcG9uc2UuYm9keS50aW1lc3RhbXApLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3BDLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUVoQ0UsUUFBUSxDQUFDLHNCQUFzQixFQUFFLE1BQU07RUFDckNBLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxNQUFNO0lBQ3hDQyxFQUFFLENBQUMsK0NBQStDLEVBQUUsWUFBWTtNQUM5RCxNQUFNQyxRQUFRLEdBQUc7QUFDdkI7QUFDQTtBQUNBLE9BQU87TUFFRCxNQUFNQyxRQUFRLEdBQUcsTUFBTU4sT0FBTyxDQUFDRSxHQUFHLENBQUMsQ0FDaENLLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUMxQkMsTUFBTSxDQUFDLE1B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