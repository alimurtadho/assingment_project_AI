{"version":3,"names":["securityScanner","require","describe","it","code","result","scanCode","expect","vulnerabilities","toHaveLength","type","toBe","riskScore","toBeGreaterThan","length","some","v","category","toBeLessThanOrEqual","severity","summary","generateSummary","totalIssues","high","medium","low"],"sources":["services.test.js"],"sourcesContent":["const securityScanner = require('../services/securityScanner');\n\ndescribe('Security Scanner Service', () => {\n  describe('scanCode', () => {\n    it('should detect hardcoded API keys', async () => {\n      const code = `\nconst API_KEY = \"sk-1234567890abcdef\";\nconst config = {\n  apiKey: \"abc123def456ghi789\"\n};\n      `;\n      \n      const result = await securityScanner.scanCode(code, 'test.js');\n      \n      expect(result.vulnerabilities).toHaveLength(2);\n      expect(result.vulnerabilities[0].type).toBe('API Key');\n      expect(result.riskScore).toBeGreaterThan(0);\n    });\n\n    it('should detect SQL injection patterns', async () => {\n      const code = `\nconst query = \"SELECT * FROM users WHERE id = \" + userId;\nconst sql = \\`INSERT INTO posts VALUES (\\${title}, \\${content})\\`;\n      `;\n      \n      const result = await securityScanner.scanCode(code, 'test.js');\n      \n      expect(result.vulnerabilities.length).toBeGreaterThan(0);\n      expect(result.vulnerabilities.some(v => v.category === 'sqlInjection')).toBe(true);\n    });\n\n    it('should detect XSS vulnerabilities', async () => {\n      const code = `\nelement.innerHTML = userInput;\ndocument.write(data);\neval(userCode);\n      `;\n      \n      const result = await securityScanner.scanCode(code, 'test.js');\n      \n      expect(result.vulnerabilities.length).toBeGreaterThan(0);\n      expect(result.vulnerabilities.some(v => v.category === 'xss')).toBe(true);\n    });\n\n    it('should detect weak cryptography', async () => {\n      const code = `\nconst hash = md5(password);\nconst sha1Hash = sha1(data);\nconst random = Math.random();\n      `;\n      \n      const result = await securityScanner.scanCode(code, 'test.js');\n      \n      expect(result.vulnerabilities.length).toBeGreaterThan(0);\n      expect(result.vulnerabilities.some(v => v.category === 'weakCrypto')).toBe(true);\n    });\n\n    it('should return no vulnerabilities for clean code', async () => {\n      const code = `\nconst config = {\n  apiKey: process.env.API_KEY\n};\n\nconst query = 'SELECT * FROM users WHERE id = ?';\nconst stmt = db.prepare(query);\nconst result = stmt.get(userId);\n      `;\n      \n      const result = await securityScanner.scanCode(code, 'test.js');\n      \n      expect(result.vulnerabilities).toHaveLength(0);\n      expect(result.riskScore).toBeLessThanOrEqual(2);\n    });\n  });\n\n  describe('generateSummary', () => {\n    it('should correctly count vulnerabilities by severity', () => {\n      const vulnerabilities = [\n        { severity: 'HIGH', category: 'test' },\n        { severity: 'HIGH', category: 'test' },\n        { severity: 'MEDIUM', category: 'test' },\n        { severity: 'LOW', category: 'test' }\n      ];\n      \n      const summary = securityScanner.generateSummary(vulnerabilities);\n      \n      expect(summary.totalIssues).toBe(4);\n      expect(summary.high).toBe(2);\n      expect(summary.medium).toBe(1);\n      expect(summary.low).toBe(1);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}