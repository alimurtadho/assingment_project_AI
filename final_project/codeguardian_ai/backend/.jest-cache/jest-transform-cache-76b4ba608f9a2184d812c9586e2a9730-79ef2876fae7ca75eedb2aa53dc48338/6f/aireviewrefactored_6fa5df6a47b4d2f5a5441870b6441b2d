bd014f4aec599ad40ac7a2f13f776ac3
/* istanbul ignore next */
function cov_1go16ag5s4() {
  var path = "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/ai-review.refactored.js";
  var hash = "075002a02340842d17e44b97abe4372e07450fbe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/ai-review.refactored.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "2": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "3": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "4": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 59
        }
      },
      "5": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "6": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "7": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "8": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "10": {
        start: {
          line: 25,
          column: 6
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "11": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "12": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 23
        }
      },
      "13": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 142,
          column: 3
        }
      },
      "14": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 85
        }
      },
      "15": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 141,
          column: 3
        }
      },
      "16": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 48,
          column: 7
        }
      },
      "17": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "18": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "19": {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "20": {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 64,
          column: 7
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "22": {
        start: {
          line: 65,
          column: 11
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "23": {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 27
        }
      },
      "24": {
        start: {
          line: 67,
          column: 6
        },
        end: {
          line: 67,
          column: 54
        }
      },
      "25": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 73,
          column: 8
        }
      },
      "26": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 44
        }
      },
      "27": {
        start: {
          line: 80,
          column: 26
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "28": {
        start: {
          line: 84,
          column: 65
        },
        end: {
          line: 84,
          column: 73
        }
      },
      "29": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 79
        }
      },
      "30": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "31": {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 99,
          column: 8
        }
      },
      "32": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 107,
          column: 7
        }
      },
      "33": {
        start: {
          line: 110,
          column: 25
        },
        end: {
          line: 110,
          column: 69
        }
      },
      "34": {
        start: {
          line: 113,
          column: 21
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "35": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "36": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 91
        }
      },
      "37": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 138,
          column: 7
        }
      },
      "38": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 140,
          column: 16
        }
      },
      "39": {
        start: {
          line: 148,
          column: 0
        },
        end: {
          line: 228,
          column: 3
        }
      },
      "40": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 91
        }
      },
      "41": {
        start: {
          line: 151,
          column: 2
        },
        end: {
          line: 227,
          column: 3
        }
      },
      "42": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "43": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "44": {
        start: {
          line: 160,
          column: 6
        },
        end: {
          line: 164,
          column: 8
        }
      },
      "45": {
        start: {
          line: 168,
          column: 18
        },
        end: {
          line: 172,
          column: 7
        }
      },
      "46": {
        start: {
          line: 168,
          column: 41
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "47": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "48": {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 182,
          column: 7
        }
      },
      "49": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 181,
          column: 10
        }
      },
      "50": {
        start: {
          line: 185,
          column: 26
        },
        end: {
          line: 191,
          column: 5
        }
      },
      "51": {
        start: {
          line: 189,
          column: 65
        },
        end: {
          line: 189,
          column: 73
        }
      },
      "52": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 198,
          column: 7
        }
      },
      "53": {
        start: {
          line: 196,
          column: 42
        },
        end: {
          line: 196,
          column: 54
        }
      },
      "54": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 74
        }
      },
      "55": {
        start: {
          line: 204,
          column: 21
        },
        end: {
          line: 211,
          column: 5
        }
      },
      "56": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 216,
          column: 7
        }
      },
      "57": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 218,
          column: 84
        }
      },
      "58": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 224,
          column: 7
        }
      },
      "59": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 226,
          column: 16
        }
      },
      "60": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 307,
          column: 3
        }
      },
      "61": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 87
        }
      },
      "62": {
        start: {
          line: 237,
          column: 2
        },
        end: {
          line: 306,
          column: 3
        }
      },
      "63": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 242,
          column: 7
        }
      },
      "64": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 259,
          column: 5
        }
      },
      "65": {
        start: {
          line: 248,
          column: 6
        },
        end: {
          line: 248,
          column: 46
        }
      },
      "66": {
        start: {
          line: 249,
          column: 6
        },
        end: {
          line: 249,
          column: 39
        }
      },
      "67": {
        start: {
          line: 250,
          column: 11
        },
        end: {
          line: 259,
          column: 5
        }
      },
      "68": {
        start: {
          line: 251,
          column: 6
        },
        end: {
          line: 251,
          column: 27
        }
      },
      "69": {
        start: {
          line: 252,
          column: 6
        },
        end: {
          line: 252,
          column: 57
        }
      },
      "70": {
        start: {
          line: 254,
          column: 6
        },
        end: {
          line: 258,
          column: 8
        }
      },
      "71": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 261,
          column: 44
        }
      },
      "72": {
        start: {
          line: 263,
          column: 28
        },
        end: {
          line: 270,
          column: 5
        }
      },
      "73": {
        start: {
          line: 267,
          column: 65
        },
        end: {
          line: 267,
          column: 73
        }
      },
      "74": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 277,
          column: 7
        }
      },
      "75": {
        start: {
          line: 279,
          column: 27
        },
        end: {
          line: 279,
          column: 73
        }
      },
      "76": {
        start: {
          line: 281,
          column: 21
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "77": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 295,
          column: 7
        }
      },
      "78": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 297,
          column: 97
        }
      },
      "79": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 303,
          column: 7
        }
      },
      "80": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 305,
          column: 16
        }
      },
      "81": {
        start: {
          line: 313,
          column: 0
        },
        end: {
          line: 387,
          column: 3
        }
      },
      "82": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 90
        }
      },
      "83": {
        start: {
          line: 316,
          column: 2
        },
        end: {
          line: 386,
          column: 3
        }
      },
      "84": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 321,
          column: 7
        }
      },
      "85": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "86": {
        start: {
          line: 327,
          column: 6
        },
        end: {
          line: 327,
          column: 46
        }
      },
      "87": {
        start: {
          line: 328,
          column: 6
        },
        end: {
          line: 328,
          column: 39
        }
      },
      "88": {
        start: {
          line: 329,
          column: 11
        },
        end: {
          line: 338,
          column: 5
        }
      },
      "89": {
        start: {
          line: 330,
          column: 6
        },
        end: {
          line: 330,
          column: 27
        }
      },
      "90": {
        start: {
          line: 331,
          column: 6
        },
        end: {
          line: 331,
          column: 63
        }
      },
      "91": {
        start: {
          line: 333,
          column: 6
        },
        end: {
          line: 337,
          column: 8
        }
      },
      "92": {
        start: {
          line: 340,
          column: 4
        },
        end: {
          line: 340,
          column: 44
        }
      },
      "93": {
        start: {
          line: 342,
          column: 28
        },
        end: {
          line: 349,
          column: 5
        }
      },
      "94": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 356,
          column: 7
        }
      },
      "95": {
        start: {
          line: 358,
          column: 27
        },
        end: {
          line: 358,
          column: 73
        }
      },
      "96": {
        start: {
          line: 360,
          column: 21
        },
        end: {
          line: 368,
          column: 5
        }
      },
      "97": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 375,
          column: 7
        }
      },
      "98": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 377,
          column: 97
        }
      },
      "99": {
        start: {
          line: 380,
          column: 4
        },
        end: {
          line: 383,
          column: 7
        }
      },
      "100": {
        start: {
          line: 385,
          column: 4
        },
        end: {
          line: 385,
          column: 16
        }
      },
      "101": {
        start: {
          line: 393,
          column: 0
        },
        end: {
          line: 467,
          column: 3
        }
      },
      "102": {
        start: {
          line: 394,
          column: 20
        },
        end: {
          line: 394,
          column: 86
        }
      },
      "103": {
        start: {
          line: 396,
          column: 2
        },
        end: {
          line: 466,
          column: 3
        }
      },
      "104": {
        start: {
          line: 397,
          column: 4
        },
        end: {
          line: 401,
          column: 7
        }
      },
      "105": {
        start: {
          line: 406,
          column: 4
        },
        end: {
          line: 418,
          column: 5
        }
      },
      "106": {
        start: {
          line: 407,
          column: 6
        },
        end: {
          line: 407,
          column: 46
        }
      },
      "107": {
        start: {
          line: 408,
          column: 6
        },
        end: {
          line: 408,
          column: 39
        }
      },
      "108": {
        start: {
          line: 409,
          column: 11
        },
        end: {
          line: 418,
          column: 5
        }
      },
      "109": {
        start: {
          line: 410,
          column: 6
        },
        end: {
          line: 410,
          column: 27
        }
      },
      "110": {
        start: {
          line: 411,
          column: 6
        },
        end: {
          line: 411,
          column: 66
        }
      },
      "111": {
        start: {
          line: 413,
          column: 6
        },
        end: {
          line: 417,
          column: 8
        }
      },
      "112": {
        start: {
          line: 420,
          column: 4
        },
        end: {
          line: 420,
          column: 44
        }
      },
      "113": {
        start: {
          line: 422,
          column: 31
        },
        end: {
          line: 429,
          column: 5
        }
      },
      "114": {
        start: {
          line: 431,
          column: 4
        },
        end: {
          line: 436,
          column: 7
        }
      },
      "115": {
        start: {
          line: 438,
          column: 30
        },
        end: {
          line: 438,
          column: 79
        }
      },
      "116": {
        start: {
          line: 440,
          column: 21
        },
        end: {
          line: 448,
          column: 5
        }
      },
      "117": {
        start: {
          line: 450,
          column: 4
        },
        end: {
          line: 455,
          column: 7
        }
      },
      "118": {
        start: {
          line: 457,
          column: 4
        },
        end: {
          line: 457,
          column: 100
        }
      },
      "119": {
        start: {
          line: 460,
          column: 4
        },
        end: {
          line: 463,
          column: 7
        }
      },
      "120": {
        start: {
          line: 465,
          column: 4
        },
        end: {
          line: 465,
          column: 16
        }
      },
      "121": {
        start: {
          line: 473,
          column: 0
        },
        end: {
          line: 534,
          column: 3
        }
      },
      "122": {
        start: {
          line: 474,
          column: 2
        },
        end: {
          line: 533,
          column: 3
        }
      },
      "123": {
        start: {
          line: 475,
          column: 4
        },
        end: {
          line: 475,
          column: 59
        }
      },
      "124": {
        start: {
          line: 477,
          column: 25
        },
        end: {
          line: 526,
          column: 5
        }
      },
      "125": {
        start: {
          line: 528,
          column: 4
        },
        end: {
          line: 528,
          column: 103
        }
      },
      "126": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 531,
          column: 69
        }
      },
      "127": {
        start: {
          line: 532,
          column: 4
        },
        end: {
          line: 532,
          column: 16
        }
      },
      "128": {
        start: {
          line: 540,
          column: 0
        },
        end: {
          line: 572,
          column: 3
        }
      },
      "129": {
        start: {
          line: 541,
          column: 2
        },
        end: {
          line: 571,
          column: 3
        }
      },
      "130": {
        start: {
          line: 542,
          column: 19
        },
        end: {
          line: 564,
          column: 5
        }
      },
      "131": {
        start: {
          line: 566,
          column: 4
        },
        end: {
          line: 566,
          column: 80
        }
      },
      "132": {
        start: {
          line: 569,
          column: 4
        },
        end: {
          line: 569,
          column: 65
        }
      },
      "133": {
        start: {
          line: 570,
          column: 4
        },
        end: {
          line: 570,
          column: 16
        }
      },
      "134": {
        start: {
          line: 575,
          column: 0
        },
        end: {
          line: 597,
          column: 3
        }
      },
      "135": {
        start: {
          line: 576,
          column: 2
        },
        end: {
          line: 593,
          column: 3
        }
      },
      "136": {
        start: {
          line: 577,
          column: 4
        },
        end: {
          line: 577,
          column: 95
        }
      },
      "137": {
        start: {
          line: 579,
          column: 4
        },
        end: {
          line: 592,
          column: 5
        }
      },
      "138": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 583,
          column: 10
        }
      },
      "139": {
        start: {
          line: 585,
          column: 8
        },
        end: {
          line: 587,
          column: 10
        }
      },
      "140": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 591,
          column: 10
        }
      },
      "141": {
        start: {
          line: 596,
          column: 2
        },
        end: {
          line: 596,
          column: 14
        }
      },
      "142": {
        start: {
          line: 599,
          column: 0
        },
        end: {
          line: 599,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 14
          },
          end: {
            line: 23,
            column: 15
          }
        },
        loc: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 47
          },
          end: {
            line: 37,
            column: 48
          }
        },
        loc: {
          start: {
            line: 37,
            column: 73
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 84,
            column: 60
          },
          end: {
            line: 84,
            column: 61
          }
        },
        loc: {
          start: {
            line: 84,
            column: 65
          },
          end: {
            line: 84,
            column: 73
          }
        },
        line: 84
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 148,
            column: 57
          },
          end: {
            line: 148,
            column: 58
          }
        },
        loc: {
          start: {
            line: 148,
            column: 83
          },
          end: {
            line: 228,
            column: 1
          }
        },
        line: 148
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 168,
            column: 32
          },
          end: {
            line: 168,
            column: 33
          }
        },
        loc: {
          start: {
            line: 168,
            column: 41
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 168
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 189,
            column: 60
          },
          end: {
            line: 189,
            column: 61
          }
        },
        loc: {
          start: {
            line: 189,
            column: 65
          },
          end: {
            line: 189,
            column: 73
          }
        },
        line: 189
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 196,
            column: 30
          },
          end: {
            line: 196,
            column: 31
          }
        },
        loc: {
          start: {
            line: 196,
            column: 42
          },
          end: {
            line: 196,
            column: 54
          }
        },
        line: 196
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 234,
            column: 48
          },
          end: {
            line: 234,
            column: 49
          }
        },
        loc: {
          start: {
            line: 234,
            column: 74
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 234
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 267,
            column: 60
          },
          end: {
            line: 267,
            column: 61
          }
        },
        loc: {
          start: {
            line: 267,
            column: 65
          },
          end: {
            line: 267,
            column: 73
          }
        },
        line: 267
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 313,
            column: 57
          },
          end: {
            line: 313,
            column: 58
          }
        },
        loc: {
          start: {
            line: 313,
            column: 83
          },
          end: {
            line: 387,
            column: 1
          }
        },
        line: 313
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 393,
            column: 60
          },
          end: {
            line: 393,
            column: 61
          }
        },
        loc: {
          start: {
            line: 393,
            column: 86
          },
          end: {
            line: 467,
            column: 1
          }
        },
        line: 393
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 473,
            column: 28
          },
          end: {
            line: 473,
            column: 29
          }
        },
        loc: {
          start: {
            line: 473,
            column: 54
          },
          end: {
            line: 534,
            column: 1
          }
        },
        line: 473
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 540,
            column: 22
          },
          end: {
            line: 540,
            column: 23
          }
        },
        loc: {
          start: {
            line: 540,
            column: 48
          },
          end: {
            line: 572,
            column: 1
          }
        },
        line: 540
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 575,
            column: 11
          },
          end: {
            line: 575,
            column: 12
          }
        },
        loc: {
          start: {
            line: 575,
            column: 38
          },
          end: {
            line: 597,
            column: 1
          }
        },
        line: 575
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 45,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 45,
            column: 31
          }
        }, {
          start: {
            line: 45,
            column: 35
          },
          end: {
            line: 45,
            column: 47
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: 65,
            column: 11
          },
          end: {
            line: 74,
            column: 5
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 11
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 11
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: 68,
            column: 11
          },
          end: {
            line: 74,
            column: 5
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 17
          },
          end: {
            line: 67,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 17
          },
          end: {
            line: 67,
            column: 34
          }
        }, {
          start: {
            line: 67,
            column: 38
          },
          end: {
            line: 67,
            column: 53
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 25
          }
        }, {
          start: {
            line: 81,
            column: 29
          },
          end: {
            line: 81,
            column: 41
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 13
          },
          end: {
            line: 84,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 30
          },
          end: {
            line: 84,
            column: 74
          }
        }, {
          start: {
            line: 84,
            column: 77
          },
          end: {
            line: 84,
            column: 86
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 126,
            column: 19
          },
          end: {
            line: 126,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 19
          },
          end: {
            line: 126,
            column: 42
          }
        }, {
          start: {
            line: 126,
            column: 46
          },
          end: {
            line: 126,
            column: 47
          }
        }],
        line: 126
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 154,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 154,
            column: 34
          }
        }, {
          start: {
            line: 154,
            column: 38
          },
          end: {
            line: 154,
            column: 39
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 155,
            column: 18
          },
          end: {
            line: 155,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 18
          },
          end: {
            line: 155,
            column: 31
          }
        }, {
          start: {
            line: 155,
            column: 35
          },
          end: {
            line: 155,
            column: 47
          }
        }],
        line: 155
      },
      "11": {
        loc: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "12": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 18
          }
        }, {
          start: {
            line: 159,
            column: 22
          },
          end: {
            line: 159,
            column: 44
          }
        }],
        line: 159
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 182,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 182,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 186,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 186,
            column: 25
          }
        }, {
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 186,
            column: 41
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 13
          },
          end: {
            line: 189,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 30
          },
          end: {
            line: 189,
            column: 74
          }
        }, {
          start: {
            line: 189,
            column: 77
          },
          end: {
            line: 189,
            column: 86
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        }, {
          start: {
            line: 250,
            column: 11
          },
          end: {
            line: 259,
            column: 5
          }
        }],
        line: 247
      },
      "17": {
        loc: {
          start: {
            line: 250,
            column: 11
          },
          end: {
            line: 259,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 11
          },
          end: {
            line: 259,
            column: 5
          }
        }, {
          start: {
            line: 253,
            column: 11
          },
          end: {
            line: 259,
            column: 5
          }
        }],
        line: 250
      },
      "18": {
        loc: {
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 252,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 17
          },
          end: {
            line: 252,
            column: 34
          }
        }, {
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 56
          }
        }],
        line: 252
      },
      "19": {
        loc: {
          start: {
            line: 267,
            column: 13
          },
          end: {
            line: 267,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 30
          },
          end: {
            line: 267,
            column: 74
          }
        }, {
          start: {
            line: 267,
            column: 77
          },
          end: {
            line: 267,
            column: 117
          }
        }],
        line: 267
      },
      "20": {
        loc: {
          start: {
            line: 293,
            column: 25
          },
          end: {
            line: 293,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 25
          },
          end: {
            line: 293,
            column: 54
          }
        }, {
          start: {
            line: 293,
            column: 58
          },
          end: {
            line: 293,
            column: 59
          }
        }],
        line: 293
      },
      "21": {
        loc: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        }, {
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 338,
            column: 5
          }
        }],
        line: 326
      },
      "22": {
        loc: {
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 338,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 11
          },
          end: {
            line: 338,
            column: 5
          }
        }, {
          start: {
            line: 332,
            column: 11
          },
          end: {
            line: 338,
            column: 5
          }
        }],
        line: 329
      },
      "23": {
        loc: {
          start: {
            line: 331,
            column: 17
          },
          end: {
            line: 331,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 17
          },
          end: {
            line: 331,
            column: 34
          }
        }, {
          start: {
            line: 331,
            column: 38
          },
          end: {
            line: 331,
            column: 62
          }
        }],
        line: 331
      },
      "24": {
        loc: {
          start: {
            line: 372,
            column: 28
          },
          end: {
            line: 372,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 28
          },
          end: {
            line: 372,
            column: 60
          }
        }, {
          start: {
            line: 372,
            column: 64
          },
          end: {
            line: 372,
            column: 65
          }
        }],
        line: 372
      },
      "25": {
        loc: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        }, {
          start: {
            line: 409,
            column: 11
          },
          end: {
            line: 418,
            column: 5
          }
        }],
        line: 406
      },
      "26": {
        loc: {
          start: {
            line: 409,
            column: 11
          },
          end: {
            line: 418,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 11
          },
          end: {
            line: 418,
            column: 5
          }
        }, {
          start: {
            line: 412,
            column: 11
          },
          end: {
            line: 418,
            column: 5
          }
        }],
        line: 409
      },
      "27": {
        loc: {
          start: {
            line: 411,
            column: 17
          },
          end: {
            line: 411,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 411,
            column: 17
          },
          end: {
            line: 411,
            column: 34
          }
        }, {
          start: {
            line: 411,
            column: 38
          },
          end: {
            line: 411,
            column: 65
          }
        }],
        line: 411
      },
      "28": {
        loc: {
          start: {
            line: 452,
            column: 26
          },
          end: {
            line: 452,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 26
          },
          end: {
            line: 452,
            column: 56
          }
        }, {
          start: {
            line: 452,
            column: 60
          },
          end: {
            line: 452,
            column: 61
          }
        }],
        line: 452
      },
      "29": {
        loc: {
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 550,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 550,
            column: 45
          },
          end: {
            line: 550,
            column: 57
          }
        }, {
          start: {
            line: 550,
            column: 60
          },
          end: {
            line: 550,
            column: 76
          }
        }],
        line: 550
      },
      "30": {
        loc: {
          start: {
            line: 576,
            column: 2
          },
          end: {
            line: 593,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 576,
            column: 2
          },
          end: {
            line: 593,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 576
      },
      "31": {
        loc: {
          start: {
            line: 579,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 580,
            column: 6
          },
          end: {
            line: 583,
            column: 10
          }
        }, {
          start: {
            line: 584,
            column: 6
          },
          end: {
            line: 587,
            column: 10
          }
        }, {
          start: {
            line: 588,
            column: 6
          },
          end: {
            line: 591,
            column: 10
          }
        }],
        line: 579
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "075002a02340842d17e44b97abe4372e07450fbe"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1go16ag5s4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1go16ag5s4();
/**
 * Enhanced AI Review Route Handler
 * Handles AI code review requests with improved architecture and validation
 */

const express =
/* istanbul ignore next */
(cov_1go16ag5s4().s[0]++, require('express'));
const multer =
/* istanbul ignore next */
(cov_1go16ag5s4().s[1]++, require('multer'));
const AIReviewer =
/* istanbul ignore next */
(cov_1go16ag5s4().s[2]++, require('../services/aiReviewer.refactored'));
const ResponseFormatter =
/* istanbul ignore next */
(cov_1go16ag5s4().s[3]++, require('../utils/responseFormatter'));
const ValidationUtils =
/* istanbul ignore next */
(cov_1go16ag5s4().s[4]++, require('../utils/validationUtils'));
const Logger =
/* istanbul ignore next */
(cov_1go16ag5s4().s[5]++, require('../utils/logger'));
const ErrorHandler =
/* istanbul ignore next */
(cov_1go16ag5s4().s[6]++, require('../utils/errorHandler'));
const router =
/* istanbul ignore next */
(cov_1go16ag5s4().s[7]++, express.Router());

// Configure multer for file uploads
const upload =
/* istanbul ignore next */
(cov_1go16ag5s4().s[8]++, multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 50 * 1024 * 1024,
    // 50MB limit
    files: 10 // Maximum 10 files
  },
  fileFilter: (req, file, cb) => {
    /* istanbul ignore next */
    cov_1go16ag5s4().f[0]++;
    cov_1go16ag5s4().s[9]++;
    try {
      /* istanbul ignore next */
      cov_1go16ag5s4().s[10]++;
      ValidationUtils.validateUploadedFile(file);
      /* istanbul ignore next */
      cov_1go16ag5s4().s[11]++;
      cb(null, true);
    } catch (error) {
      /* istanbul ignore next */
      cov_1go16ag5s4().s[12]++;
      cb(error, false);
    }
  }
}));

/**
 * POST /api/ai-review/analyze
 * Perform AI-powered code review
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[13]++;
router.post('/analyze', upload.single('file'), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[1]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1go16ag5s4().s[14]++, `review_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1go16ag5s4().s[15]++;
  try {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[16]++;
    Logger.info('AI code review request received', {
      requestId,
      hasFile: !!req.file,
      hasCode: !!req.body.code,
      reviewType:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[0][0]++, req.body.type) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[0][1]++, 'codeReview'),
      userAgent: req.headers['user-agent'],
      ip: req.ip
    });

    // Extract code from file or request body
    let code, fileName;
    /* istanbul ignore next */
    cov_1go16ag5s4().s[17]++;
    if (req.file) {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[1][0]++;
      cov_1go16ag5s4().s[18]++;
      code = req.file.buffer.toString('utf8');
      /* istanbul ignore next */
      cov_1go16ag5s4().s[19]++;
      fileName = req.file.originalname;

      // Validate file content
      /* istanbul ignore next */
      cov_1go16ag5s4().s[20]++;
      if (!ValidationUtils.validateCodeInput(code)) {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[2][0]++;
        cov_1go16ag5s4().s[21]++;
        throw ErrorHandler.createError('INVALID_FILE_CONTENT', 'File contains invalid or empty code content', 400);
      } else
      /* istanbul ignore next */
      {
        cov_1go16ag5s4().b[2][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[1][1]++;
      cov_1go16ag5s4().s[22]++;
      if (req.body.code) {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[3][0]++;
        cov_1go16ag5s4().s[23]++;
        code = req.body.code;
        /* istanbul ignore next */
        cov_1go16ag5s4().s[24]++;
        fileName =
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[4][0]++, req.body.fileName) ||
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[4][1]++, 'uploaded_code');
      } else {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[3][1]++;
        cov_1go16ag5s4().s[25]++;
        throw ErrorHandler.createError('MISSING_CODE_INPUT', 'No code provided for review. Include code in request body or upload a file.', 400);
      }
    }

    // Validate code input
    /* istanbul ignore next */
    cov_1go16ag5s4().s[26]++;
    ValidationUtils.validateCodeInput(code);

    // Parse review options
    const reviewOptions =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[27]++, {
      type:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[5][0]++, req.body.type) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[5][1]++, 'codeReview'),
      language: req.body.language,
      framework: req.body.framework,
      focus: req.body.focus ?
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[6][0]++, req.body.focus.split(',').map(f => {
        /* istanbul ignore next */
        cov_1go16ag5s4().f[2]++;
        cov_1go16ag5s4().s[28]++;
        return f.trim();
      })) :
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[6][1]++, undefined),
      includeRefactoring: req.body.includeRefactoring === 'true',
      includeSecurity: req.body.includeSecurity === 'true',
      includePerformance: req.body.includePerformance === 'true',
      requestId,
      fileName
    });

    // Validate review type
    const validTypes =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[29]++, ['codeReview', 'refactoring', 'security', 'performance']);
    /* istanbul ignore next */
    cov_1go16ag5s4().s[30]++;
    if (!validTypes.includes(reviewOptions.type)) {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[7][0]++;
      cov_1go16ag5s4().s[31]++;
      throw ErrorHandler.createError('INVALID_REVIEW_TYPE', `Invalid review type: ${reviewOptions.type}. Valid types: ${validTypes.join(', ')}`, 400);
    } else
    /* istanbul ignore next */
    {
      cov_1go16ag5s4().b[7][1]++;
    }
    cov_1go16ag5s4().s[32]++;
    Logger.debug('Starting AI code review', {
      requestId,
      codeLength: code.length,
      fileName,
      reviewOptions
    });

    // Perform AI code review
    const reviewResult =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[33]++, await AIReviewer.review(code, reviewOptions));

    // Add request metadata to response
    const response =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[34]++, {
      ...reviewResult.data,
      requestInfo: {
        requestId,
        fileName,
        timestamp: new Date().toISOString(),
        options: reviewOptions
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[35]++;
    Logger.info('AI code review completed successfully', {
      requestId,
      reviewType: reviewOptions.type,
      issuesFound:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[8][0]++, response.issues?.length) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[8][1]++, 0),
      overallScore: response.reviewSummary?.overallScore,
      processingTime: response.metadata?.processingTime
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[36]++;
    res.json(ResponseFormatter.success(response, 'AI code review completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[37]++;
    Logger.error('AI code review failed', {
      requestId,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[38]++;
    next(error);
  }
});

/**
 * POST /api/ai-review/batch-analyze
 * Batch AI code review for multiple files
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[39]++;
router.post('/batch-analyze', upload.array('files', 10), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[3]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1go16ag5s4().s[40]++, `batch_review_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1go16ag5s4().s[41]++;
  try {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[42]++;
    Logger.info('Batch AI code review request received', {
      requestId,
      fileCount:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[9][0]++, req.files?.length) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[9][1]++, 0),
      reviewType:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[10][0]++, req.body.type) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[10][1]++, 'codeReview'),
      ip: req.ip
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_1go16ag5s4().b[12][0]++, !req.files) ||
    /* istanbul ignore next */
    (cov_1go16ag5s4().b[12][1]++, req.files.length === 0)) {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[11][0]++;
      cov_1go16ag5s4().s[44]++;
      throw ErrorHandler.createError('NO_FILES_PROVIDED', 'No files provided for batch review', 400);
    } else
    /* istanbul ignore next */
    {
      cov_1go16ag5s4().b[11][1]++;
    }

    // Process files
    const files =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[45]++, req.files.map(file => {
      /* istanbul ignore next */
      cov_1go16ag5s4().f[4]++;
      cov_1go16ag5s4().s[46]++;
      return {
        name: file.originalname,
        content: file.buffer.toString('utf8'),
        size: file.size
      };
    }));

    // Validate all files
    /* istanbul ignore next */
    cov_1go16ag5s4().s[47]++;
    for (const file of files) {
      /* istanbul ignore next */
      cov_1go16ag5s4().s[48]++;
      if (!ValidationUtils.validateCodeInput(file.content)) {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[13][0]++;
        cov_1go16ag5s4().s[49]++;
        throw ErrorHandler.createError('INVALID_FILE_CONTENT', `File ${file.name} contains invalid or empty code content`, 400);
      } else
      /* istanbul ignore next */
      {
        cov_1go16ag5s4().b[13][1]++;
      }
    }
    const reviewOptions =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[50]++, {
      type:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[14][0]++, req.body.type) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[14][1]++, 'codeReview'),
      language: req.body.language,
      framework: req.body.framework,
      focus: req.body.focus ?
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[15][0]++, req.body.focus.split(',').map(f => {
        /* istanbul ignore next */
        cov_1go16ag5s4().f[5]++;
        cov_1go16ag5s4().s[51]++;
        return f.trim();
      })) :
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[15][1]++, undefined),
      requestId
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[52]++;
    Logger.debug('Starting batch AI code review', {
      requestId,
      fileCount: files.length,
      totalSize: files.reduce((sum, f) => {
        /* istanbul ignore next */
        cov_1go16ag5s4().f[6]++;
        cov_1go16ag5s4().s[53]++;
        return sum + f.size;
      }, 0),
      reviewOptions
    });

    // Perform batch review using the AIReviewer's batch method
    const batchResult =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[54]++, await AIReviewer.batchReview(files, reviewOptions));

    // Add request metadata
    const response =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[55]++, {
      ...batchResult.data,
      requestInfo: {
        requestId,
        timestamp: new Date().toISOString(),
        options: reviewOptions
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[56]++;
    Logger.info('Batch AI code review completed', {
      requestId,
      ...response.summary
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[57]++;
    res.json(ResponseFormatter.success(response, 'Batch AI code review completed'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[58]++;
    Logger.error('Batch AI code review failed', {
      requestId,
      error: error.message
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[59]++;
    next(error);
  }
});

/**
 * POST /api/ai-review/refactor
 * Get refactoring suggestions for code
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[60]++;
router.post('/refactor', upload.single('file'), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[7]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1go16ag5s4().s[61]++, `refactor_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1go16ag5s4().s[62]++;
  try {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[63]++;
    Logger.info('Refactoring suggestions request received', {
      requestId,
      hasFile: !!req.file,
      hasCode: !!req.body.code
    });

    // Extract code
    let code, fileName;
    /* istanbul ignore next */
    cov_1go16ag5s4().s[64]++;
    if (req.file) {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[16][0]++;
      cov_1go16ag5s4().s[65]++;
      code = req.file.buffer.toString('utf8');
      /* istanbul ignore next */
      cov_1go16ag5s4().s[66]++;
      fileName = req.file.originalname;
    } else {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[16][1]++;
      cov_1go16ag5s4().s[67]++;
      if (req.body.code) {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[17][0]++;
        cov_1go16ag5s4().s[68]++;
        code = req.body.code;
        /* istanbul ignore next */
        cov_1go16ag5s4().s[69]++;
        fileName =
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[18][0]++, req.body.fileName) ||
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[18][1]++, 'code_to_refactor');
      } else {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[17][1]++;
        cov_1go16ag5s4().s[70]++;
        throw ErrorHandler.createError('MISSING_CODE_INPUT', 'No code provided for refactoring analysis', 400);
      }
    }
    /* istanbul ignore next */
    cov_1go16ag5s4().s[71]++;
    ValidationUtils.validateCodeInput(code);
    const refactorOptions =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[72]++, {
      type: 'refactoring',
      language: req.body.language,
      framework: req.body.framework,
      focus: req.body.focus ?
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[19][0]++, req.body.focus.split(',').map(f => {
        /* istanbul ignore next */
        cov_1go16ag5s4().f[8]++;
        cov_1go16ag5s4().s[73]++;
        return f.trim();
      })) :
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[19][1]++, ['structure', 'patterns', 'performance']),
      requestId,
      fileName
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[74]++;
    Logger.debug('Starting refactoring analysis', {
      requestId,
      codeLength: code.length,
      fileName,
      refactorOptions
    });
    const refactorResult =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[75]++, await AIReviewer.review(code, refactorOptions));
    const response =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[76]++, {
      ...refactorResult.data,
      requestInfo: {
        requestId,
        fileName,
        timestamp: new Date().toISOString(),
        options: refactorOptions
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[77]++;
    Logger.info('Refactoring analysis completed', {
      requestId,
      refactoringsFound:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[20][0]++, response.refactorings?.length) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[20][1]++, 0),
      estimatedEffort: response.refactoringPlan?.estimatedEffort
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[78]++;
    res.json(ResponseFormatter.success(response, 'Refactoring analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[79]++;
    Logger.error('Refactoring analysis failed', {
      requestId,
      error: error.message
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[80]++;
    next(error);
  }
});

/**
 * POST /api/ai-review/security-analysis
 * Perform security-focused AI analysis
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[81]++;
router.post('/security-analysis', upload.single('file'), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[9]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1go16ag5s4().s[82]++, `security_ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1go16ag5s4().s[83]++;
  try {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[84]++;
    Logger.info('AI security analysis request received', {
      requestId,
      hasFile: !!req.file,
      hasCode: !!req.body.code
    });

    // Extract code
    let code, fileName;
    /* istanbul ignore next */
    cov_1go16ag5s4().s[85]++;
    if (req.file) {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[21][0]++;
      cov_1go16ag5s4().s[86]++;
      code = req.file.buffer.toString('utf8');
      /* istanbul ignore next */
      cov_1go16ag5s4().s[87]++;
      fileName = req.file.originalname;
    } else {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[21][1]++;
      cov_1go16ag5s4().s[88]++;
      if (req.body.code) {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[22][0]++;
        cov_1go16ag5s4().s[89]++;
        code = req.body.code;
        /* istanbul ignore next */
        cov_1go16ag5s4().s[90]++;
        fileName =
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[23][0]++, req.body.fileName) ||
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[23][1]++, 'code_security_analysis');
      } else {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[22][1]++;
        cov_1go16ag5s4().s[91]++;
        throw ErrorHandler.createError('MISSING_CODE_INPUT', 'No code provided for security analysis', 400);
      }
    }
    /* istanbul ignore next */
    cov_1go16ag5s4().s[92]++;
    ValidationUtils.validateCodeInput(code);
    const securityOptions =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[93]++, {
      type: 'security',
      language: req.body.language,
      framework: req.body.framework,
      focus: ['vulnerabilities', 'authentication', 'authorization', 'data-protection'],
      requestId,
      fileName
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[94]++;
    Logger.debug('Starting AI security analysis', {
      requestId,
      codeLength: code.length,
      fileName,
      securityOptions
    });
    const securityResult =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[95]++, await AIReviewer.review(code, securityOptions));
    const response =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[96]++, {
      ...securityResult.data,
      requestInfo: {
        requestId,
        fileName,
        timestamp: new Date().toISOString(),
        options: securityOptions
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[97]++;
    Logger.info('AI security analysis completed', {
      requestId,
      vulnerabilitiesFound:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[24][0]++, response.vulnerabilities?.length) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[24][1]++, 0),
      riskLevel: response.securityAssessment?.overallRiskLevel,
      complianceScore: response.securityAssessment?.complianceScore
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[98]++;
    res.json(ResponseFormatter.success(response, 'AI security analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[99]++;
    Logger.error('AI security analysis failed', {
      requestId,
      error: error.message
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[100]++;
    next(error);
  }
});

/**
 * POST /api/ai-review/performance-analysis
 * Perform performance-focused AI analysis
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[101]++;
router.post('/performance-analysis', upload.single('file'), async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[10]++;
  const requestId =
  /* istanbul ignore next */
  (cov_1go16ag5s4().s[102]++, `perf_ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  /* istanbul ignore next */
  cov_1go16ag5s4().s[103]++;
  try {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[104]++;
    Logger.info('AI performance analysis request received', {
      requestId,
      hasFile: !!req.file,
      hasCode: !!req.body.code
    });

    // Extract code
    let code, fileName;
    /* istanbul ignore next */
    cov_1go16ag5s4().s[105]++;
    if (req.file) {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[25][0]++;
      cov_1go16ag5s4().s[106]++;
      code = req.file.buffer.toString('utf8');
      /* istanbul ignore next */
      cov_1go16ag5s4().s[107]++;
      fileName = req.file.originalname;
    } else {
      /* istanbul ignore next */
      cov_1go16ag5s4().b[25][1]++;
      cov_1go16ag5s4().s[108]++;
      if (req.body.code) {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[26][0]++;
        cov_1go16ag5s4().s[109]++;
        code = req.body.code;
        /* istanbul ignore next */
        cov_1go16ag5s4().s[110]++;
        fileName =
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[27][0]++, req.body.fileName) ||
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[27][1]++, 'code_performance_analysis');
      } else {
        /* istanbul ignore next */
        cov_1go16ag5s4().b[26][1]++;
        cov_1go16ag5s4().s[111]++;
        throw ErrorHandler.createError('MISSING_CODE_INPUT', 'No code provided for performance analysis', 400);
      }
    }
    /* istanbul ignore next */
    cov_1go16ag5s4().s[112]++;
    ValidationUtils.validateCodeInput(code);
    const performanceOptions =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[113]++, {
      type: 'performance',
      language: req.body.language,
      framework: req.body.framework,
      focus: ['algorithms', 'memory', 'database', 'concurrency'],
      requestId,
      fileName
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[114]++;
    Logger.debug('Starting AI performance analysis', {
      requestId,
      codeLength: code.length,
      fileName,
      performanceOptions
    });
    const performanceResult =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[115]++, await AIReviewer.review(code, performanceOptions));
    const response =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[116]++, {
      ...performanceResult.data,
      requestInfo: {
        requestId,
        fileName,
        timestamp: new Date().toISOString(),
        options: performanceOptions
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[117]++;
    Logger.info('AI performance analysis completed', {
      requestId,
      optimizationsFound:
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[28][0]++, response.optimizations?.length) ||
      /* istanbul ignore next */
      (cov_1go16ag5s4().b[28][1]++, 0),
      overallScore: response.performanceAssessment?.overallScore,
      bottlenecks: response.performanceAssessment?.bottlenecks
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[118]++;
    res.json(ResponseFormatter.success(response, 'AI performance analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[119]++;
    Logger.error('AI performance analysis failed', {
      requestId,
      error: error.message
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[120]++;
    next(error);
  }
});

/**
 * GET /api/ai-review/capabilities
 * Get AI review service capabilities and configuration
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[121]++;
router.get('/capabilities', async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[11]++;
  cov_1go16ag5s4().s[122]++;
  try {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[123]++;
    Logger.info('AI review capabilities request received');
    const capabilities =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[124]++, {
      reviewTypes: [{
        type: 'codeReview',
        name: 'Comprehensive Code Review',
        description: 'Full code quality, security, and performance analysis',
        features: ['Code quality assessment', 'Bug detection', 'Best practices validation', 'Maintainability scoring']
      }, {
        type: 'refactoring',
        name: 'Refactoring Suggestions',
        description: 'Structural improvements and code optimization',
        features: ['Design pattern recommendations', 'Code organization', 'Performance optimizations', 'Maintainability improvements']
      }, {
        type: 'security',
        name: 'Security Analysis',
        description: 'Security vulnerability assessment and recommendations',
        features: ['Vulnerability detection', 'Security best practices', 'Compliance checking', 'Risk assessment']
      }, {
        type: 'performance',
        name: 'Performance Analysis',
        description: 'Performance optimization and bottleneck identification',
        features: ['Algorithm analysis', 'Memory optimization', 'Database query optimization', 'Scalability assessment']
      }],
      supportedLanguages: ['javascript', 'typescript', 'python', 'java', 'cpp', 'csharp', 'go', 'php', 'ruby', 'swift'],
      supportedFrameworks: ['react', 'vue', 'angular', 'express', 'fastapi', 'django', 'flask', 'spring', 'laravel', 'rails'],
      focusAreas: ['code-quality', 'security', 'performance', 'maintainability', 'testing', 'documentation', 'error-handling', 'design-patterns', 'best-practices', 'optimization'],
      outputFormats: ['detailed-json', 'summary', 'actionable-items'],
      batchProcessing: {
        supported: true,
        maxFiles: 10,
        maxFileSize: '50MB',
        parallelProcessing: false
      },
      aiModel: {
        provider: 'OpenAI',
        model: 'GPT-4',
        capabilities: ['Code analysis', 'Pattern recognition', 'Best practice recommendations', 'Security assessment']
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[125]++;
    res.json(ResponseFormatter.success(capabilities, 'AI review capabilities retrieved successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[126]++;
    Logger.error('Failed to retrieve AI review capabilities', error);
    /* istanbul ignore next */
    cov_1go16ag5s4().s[127]++;
    next(error);
  }
});

/**
 * GET /api/ai-review/health
 * Health check for AI review service
 */
/* istanbul ignore next */
cov_1go16ag5s4().s[128]++;
router.get('/health', async (req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[12]++;
  cov_1go16ag5s4().s[129]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_1go16ag5s4().s[130]++, {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      service: 'AI Code Reviewer',
      version: '2.0.0',
      aiService: {
        provider: 'OpenAI',
        model: 'GPT-4',
        status: process.env.OPENAI_API_KEY ?
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[29][0]++, 'configured') :
        /* istanbul ignore next */
        (cov_1go16ag5s4().b[29][1]++, 'not-configured')
      },
      capabilities: {
        reviewTypes: 4,
        supportedLanguages: 10,
        batchProcessing: true,
        enhancedFeatures: ['Multi-type analysis', 'Detailed recommendations', 'Quality metrics', 'Batch processing', 'Performance optimization']
      }
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[131]++;
    res.json(ResponseFormatter.success(health, 'AI review service is healthy'));
  } catch (error) {
    /* istanbul ignore next */
    cov_1go16ag5s4().s[132]++;
    Logger.error('AI review service health check failed', error);
    /* istanbul ignore next */
    cov_1go16ag5s4().s[133]++;
    next(error);
  }
});

// Error handling middleware specific to AI review routes
/* istanbul ignore next */
cov_1go16ag5s4().s[134]++;
router.use((error, req, res, next) => {
  /* istanbul ignore next */
  cov_1go16ag5s4().f[13]++;
  cov_1go16ag5s4().s[135]++;
  if (error instanceof multer.MulterError) {
    /* istanbul ignore next */
    cov_1go16ag5s4().b[30][0]++;
    cov_1go16ag5s4().s[136]++;
    Logger.error('File upload error in AI review', {
      error: error.message,
      code: error.code
    });
    /* istanbul ignore next */
    cov_1go16ag5s4().s[137]++;
    switch (error.code) {
      case 'LIMIT_FILE_SIZE':
        /* istanbul ignore next */
        cov_1go16ag5s4().b[31][0]++;
        cov_1go16ag5s4().s[138]++;
        return res.status(413).json(ResponseFormatter.error('File too large. Maximum size is 50MB.', 413));
      case 'LIMIT_FILE_COUNT':
        /* istanbul ignore next */
        cov_1go16ag5s4().b[31][1]++;
        cov_1go16ag5s4().s[139]++;
        return res.status(413).json(ResponseFormatter.error('Too many files. Maximum is 10 files.', 413));
      default:
        /* istanbul ignore next */
        cov_1go16ag5s4().b[31][2]++;
        cov_1go16ag5s4().s[140]++;
        return res.status(400).json(ResponseFormatter.error(`File upload error: ${error.message}`, 400));
    }
  } else
  /* istanbul ignore next */
  {
    cov_1go16ag5s4().b[30][1]++;
  }

  // Pass to global error handler
  cov_1go16ag5s4().s[141]++;
  next(error);
});
/* istanbul ignore next */
cov_1go16ag5s4().s[142]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,