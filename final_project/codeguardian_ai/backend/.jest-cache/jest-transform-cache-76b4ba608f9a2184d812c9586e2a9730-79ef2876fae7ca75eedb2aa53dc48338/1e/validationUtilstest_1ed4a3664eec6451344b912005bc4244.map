{"version":3,"names":["ValidationUtils","require","describe","test","mockFile","originalname","mimetype","size","buffer","Buffer","from","result","validateFile","expect","toEqual","isValid","errors","warnings","fileInfo","name","extension","type","language","toBe","toContain","alloc","incompleteFile","length","toBeGreaterThan","suspiciousFiles","forEach","filename","maliciousCode","detectMaliciousContent","isSafe","threats","arrayContaining","objectContaining","pattern","severity","some","t","sqlInjection","xssCode","pathTraversal","cmdInjection","safeCode","toHaveLength","multiThreatCode","content","sanitized","sanitizeContent","not","code","validateCodeSyntax","testCases","expected","getFileLanguage","hash1","calculateFileHash","hash2","content1","content2","hash","toMatch","toThrow","undefined","largeContent","repeat","binaryContent","toString","unicodeContent"],"sources":["validationUtils.test.js"],"sourcesContent":["/**\n * Unit Tests for ValidationUtils Utility\n * Tests file validation, content sanitization, and malicious content detection\n */\n\nconst ValidationUtils = require('../../../utils/validationUtils');\n\ndescribe('ValidationUtils Utility', () => {\n    describe('validateFile method', () => {\n        test('should validate JavaScript file successfully', () => {\n            const mockFile = {\n                originalname: 'test.js',\n                mimetype: 'text/javascript',\n                size: 1024,\n                buffer: Buffer.from('console.log(\"Hello World\");')\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n\n            expect(result).toEqual({\n                isValid: true,\n                errors: [],\n                warnings: [],\n                fileInfo: {\n                    name: 'test.js',\n                    extension: '.js',\n                    size: 1024,\n                    type: 'text/javascript',\n                    language: 'javascript'\n                }\n            });\n        });\n\n        test('should validate TypeScript file successfully', () => {\n            const mockFile = {\n                originalname: 'component.tsx',\n                mimetype: 'text/plain',\n                size: 2048,\n                buffer: Buffer.from('interface Props { name: string; }')\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n\n            expect(result.isValid).toBe(true);\n            expect(result.fileInfo.language).toBe('typescript');\n            expect(result.fileInfo.extension).toBe('.tsx');\n        });\n\n        test('should validate Python file successfully', () => {\n            const mockFile = {\n                originalname: 'script.py',\n                mimetype: 'text/x-python',\n                size: 512,\n                buffer: Buffer.from('def hello(): print(\"Hello\")')\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n\n            expect(result.isValid).toBe(true);\n            expect(result.fileInfo.language).toBe('python');\n        });\n\n        test('should reject unsupported file types', () => {\n            const mockFile = {\n                originalname: 'virus.exe',\n                mimetype: 'application/octet-stream',\n                size: 1024,\n                buffer: Buffer.from('binary content')\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n\n            expect(result.isValid).toBe(false);\n            expect(result.errors).toContain('Unsupported file type: .exe');\n        });\n\n        test('should reject oversized files', () => {\n            const mockFile = {\n                originalname: 'huge.js',\n                mimetype: 'text/javascript',\n                size: 100 * 1024 * 1024, // 100MB\n                buffer: Buffer.alloc(100 * 1024 * 1024)\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n\n            expect(result.isValid).toBe(false);\n            expect(result.errors).toContain('File too large. Maximum size: 10MB');\n        });\n\n        test('should reject empty files', () => {\n            const mockFile = {\n                originalname: 'empty.js',\n                mimetype: 'text/javascript',\n                size: 0,\n                buffer: Buffer.alloc(0)\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n\n            expect(result.isValid).toBe(false);\n            expect(result.errors).toContain('File is empty');\n        });\n\n        test('should handle missing file properties', () => {\n            const incompleteFile = {\n                originalname: 'test.js'\n                // Missing other properties\n            };\n\n            const result = ValidationUtils.validateFile(incompleteFile);\n\n            expect(result.isValid).toBe(false);\n            expect(result.errors.length).toBeGreaterThan(0);\n        });\n\n        test('should detect suspicious file names', () => {\n            const suspiciousFiles = [\n                'config.php',\n                '.htaccess',\n                'web.config',\n                '../../../etc/passwd'\n            ];\n\n            suspiciousFiles.forEach(filename => {\n                const mockFile = {\n                    originalname: filename,\n                    mimetype: 'text/plain',\n                    size: 100,\n                    buffer: Buffer.from('content')\n                };\n\n                const result = ValidationUtils.validateFile(mockFile);\n\n                expect(result.warnings.length).toBeGreaterThan(0);\n            });\n        });\n    });\n\n    describe('detectMaliciousContent method', () => {\n        test('should detect eval usage', () => {\n            const maliciousCode = 'eval(\"alert(\\'xss\\')\");';\n            \n            const result = ValidationUtils.detectMaliciousContent(maliciousCode);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'code_injection',\n                        pattern: 'eval(',\n                        severity: 'high'\n                    })\n                ])\n            );\n        });\n\n        test('should detect Function constructor usage', () => {\n            const maliciousCode = 'new Function(\"return process.env\")();';\n            \n            const result = ValidationUtils.detectMaliciousContent(maliciousCode);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats.some(t => t.type === 'code_injection')).toBe(true);\n        });\n\n        test('should detect SQL injection patterns', () => {\n            const sqlInjection = 'SELECT * FROM users WHERE id = \" + userInput + \"';\n            \n            const result = ValidationUtils.detectMaliciousContent(sqlInjection);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats.some(t => t.type === 'sql_injection')).toBe(true);\n        });\n\n        test('should detect XSS patterns', () => {\n            const xssCode = 'document.innerHTML = userInput;';\n            \n            const result = ValidationUtils.detectMaliciousContent(xssCode);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats.some(t => t.type === 'xss')).toBe(true);\n        });\n\n        test('should detect path traversal attempts', () => {\n            const pathTraversal = 'fs.readFile(\"../../../etc/passwd\")';\n            \n            const result = ValidationUtils.detectMaliciousContent(pathTraversal);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats.some(t => t.type === 'path_traversal')).toBe(true);\n        });\n\n        test('should detect command injection', () => {\n            const cmdInjection = 'exec(\"rm -rf /\")';\n            \n            const result = ValidationUtils.detectMaliciousContent(cmdInjection);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats.some(t => t.type === 'command_injection')).toBe(true);\n        });\n\n        test('should allow safe code', () => {\n            const safeCode = `\n                function calculateSum(a, b) {\n                    return a + b;\n                }\n                \n                const result = calculateSum(5, 3);\n                console.log('Result:', result);\n            `;\n            \n            const result = ValidationUtils.detectMaliciousContent(safeCode);\n\n            expect(result.isSafe).toBe(true);\n            expect(result.threats).toHaveLength(0);\n        });\n\n        test('should handle empty content', () => {\n            const result = ValidationUtils.detectMaliciousContent('');\n\n            expect(result.isSafe).toBe(true);\n            expect(result.threats).toHaveLength(0);\n        });\n\n        test('should detect multiple threats', () => {\n            const multiThreatCode = `\n                eval(userInput);\n                document.innerHTML = data;\n                exec(\"rm -rf /\");\n            `;\n            \n            const result = ValidationUtils.detectMaliciousContent(multiThreatCode);\n\n            expect(result.isSafe).toBe(false);\n            expect(result.threats.length).toBeGreaterThan(1);\n        });\n    });\n\n    describe('sanitizeContent method', () => {\n        test('should remove null bytes', () => {\n            const content = 'console.log(\"test\");\\\\u0000\\\\u0001';\n            \n            const sanitized = ValidationUtils.sanitizeContent(content);\n\n            expect(sanitized).not.toContain('\\\\u0000');\n            expect(sanitized).not.toContain('\\\\u0001');\n            expect(sanitized).toContain('console.log(\"test\");');\n        });\n\n        test('should normalize line endings', () => {\n            const content = 'line1\\\\r\\\\nline2\\\\rline3\\\\n';\n            \n            const sanitized = ValidationUtils.sanitizeContent(content);\n\n            expect(sanitized).toBe('line1\\\\nline2\\\\nline3\\\\n');\n        });\n\n        test('should remove BOM', () => {\n            const content = '\\\\uFEFFconsole.log(\"test\");';\n            \n            const sanitized = ValidationUtils.sanitizeContent(content);\n\n            expect(sanitized).toBe('console.log(\"test\");');\n        });\n\n        test('should trim excessive whitespace', () => {\n            const content = '   \\\\n\\\\n\\\\nconsole.log(\"test\");\\\\n\\\\n   ';\n            \n            const sanitized = ValidationUtils.sanitizeContent(content);\n\n            expect(sanitized).toBe('console.log(\"test\");');\n        });\n\n        test('should preserve code structure', () => {\n            const content = `\n                function test() {\n                    if (true) {\n                        console.log(\"indented\");\n                    }\n                }\n            `;\n            \n            const sanitized = ValidationUtils.sanitizeContent(content);\n\n            expect(sanitized).toContain('function test()');\n            expect(sanitized).toContain('    if (true)'); // Preserve indentation\n        });\n\n        test('should handle empty content', () => {\n            const sanitized = ValidationUtils.sanitizeContent('');\n\n            expect(sanitized).toBe('');\n        });\n\n        test('should handle only whitespace', () => {\n            const sanitized = ValidationUtils.sanitizeContent('   \\\\n\\\\t\\\\r   ');\n\n            expect(sanitized).toBe('');\n        });\n    });\n\n    describe('validateCodeSyntax method', () => {\n        test('should validate correct JavaScript syntax', () => {\n            const code = 'function test() { return true; }';\n            \n            const result = ValidationUtils.validateCodeSyntax(code, 'javascript');\n\n            expect(result.isValid).toBe(true);\n            expect(result.errors).toHaveLength(0);\n        });\n\n        test('should detect JavaScript syntax errors', () => {\n            const code = 'function test() { return true';  // Missing closing brace\n            \n            const result = ValidationUtils.validateCodeSyntax(code, 'javascript');\n\n            expect(result.isValid).toBe(false);\n            expect(result.errors.length).toBeGreaterThan(0);\n        });\n\n        test('should validate TypeScript syntax', () => {\n            const code = 'interface User { name: string; }';\n            \n            const result = ValidationUtils.validateCodeSyntax(code, 'typescript');\n\n            expect(result.isValid).toBe(true);\n        });\n\n        test('should handle unsupported languages gracefully', () => {\n            const code = 'print(\"Hello World\")';\n            \n            const result = ValidationUtils.validateCodeSyntax(code, 'cobol');\n\n            expect(result.isValid).toBe(true); // Should not fail for unsupported languages\n            expect(result.warnings).toContain('Syntax validation not supported for language: cobol');\n        });\n    });\n\n    describe('getFileLanguage method', () => {\n        test('should detect language from file extension', () => {\n            const testCases = [\n                { filename: 'test.js', expected: 'javascript' },\n                { filename: 'component.jsx', expected: 'javascript' },\n                { filename: 'app.ts', expected: 'typescript' },\n                { filename: 'Component.tsx', expected: 'typescript' },\n                { filename: 'script.py', expected: 'python' },\n                { filename: 'service.go', expected: 'go' },\n                { filename: 'Main.java', expected: 'java' },\n                { filename: 'style.css', expected: 'css' },\n                { filename: 'template.html', expected: 'html' },\n                { filename: 'data.json', expected: 'json' },\n                { filename: 'config.xml', expected: 'xml' },\n                { filename: 'README.md', expected: 'markdown' }\n            ];\n\n            testCases.forEach(({ filename, expected }) => {\n                const result = ValidationUtils.getFileLanguage(filename);\n                expect(result).toBe(expected);\n            });\n        });\n\n        test('should return \"unknown\" for unrecognized extensions', () => {\n            const result = ValidationUtils.getFileLanguage('file.xyz');\n            expect(result).toBe('unknown');\n        });\n\n        test('should handle files without extensions', () => {\n            const result = ValidationUtils.getFileLanguage('Dockerfile');\n            expect(result).toBe('dockerfile');\n        });\n\n        test('should be case insensitive', () => {\n            const testCases = [\n                'test.JS',\n                'test.Js',\n                'test.jS'\n            ];\n\n            testCases.forEach(filename => {\n                const result = ValidationUtils.getFileLanguage(filename);\n                expect(result).toBe('javascript');\n            });\n        });\n    });\n\n    describe('calculateFileHash method', () => {\n        test('should generate consistent hash for same content', () => {\n            const content = 'console.log(\"test\");';\n            \n            const hash1 = ValidationUtils.calculateFileHash(content);\n            const hash2 = ValidationUtils.calculateFileHash(content);\n\n            expect(hash1).toBe(hash2);\n            expect(hash1).toHaveLength(64); // SHA-256 hash length\n        });\n\n        test('should generate different hashes for different content', () => {\n            const content1 = 'console.log(\"test1\");';\n            const content2 = 'console.log(\"test2\");';\n            \n            const hash1 = ValidationUtils.calculateFileHash(content1);\n            const hash2 = ValidationUtils.calculateFileHash(content2);\n\n            expect(hash1).not.toBe(hash2);\n        });\n\n        test('should handle empty content', () => {\n            const hash = ValidationUtils.calculateFileHash('');\n            \n            expect(hash).toHaveLength(64);\n            expect(hash).toMatch(/^[a-f0-9]{64}$/);\n        });\n    });\n\n    describe('edge cases and error handling', () => {\n        test('should handle null input gracefully', () => {\n            expect(() => ValidationUtils.validateFile(null)).not.toThrow();\n            expect(() => ValidationUtils.detectMaliciousContent(null)).not.toThrow();\n            expect(() => ValidationUtils.sanitizeContent(null)).not.toThrow();\n        });\n\n        test('should handle undefined input gracefully', () => {\n            expect(() => ValidationUtils.validateFile(undefined)).not.toThrow();\n            expect(() => ValidationUtils.detectMaliciousContent(undefined)).not.toThrow();\n            expect(() => ValidationUtils.sanitizeContent(undefined)).not.toThrow();\n        });\n\n        test('should handle very large files', () => {\n            const largeContent = 'a'.repeat(5 * 1024 * 1024); // 5MB\n            const mockFile = {\n                originalname: 'large.js',\n                mimetype: 'text/javascript',\n                size: largeContent.length,\n                buffer: Buffer.from(largeContent)\n            };\n\n            const result = ValidationUtils.validateFile(mockFile);\n            expect(result.isValid).toBe(true);\n        });\n\n        test('should handle binary content gracefully', () => {\n            const binaryContent = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);\n            \n            expect(() => {\n                ValidationUtils.detectMaliciousContent(binaryContent.toString());\n            }).not.toThrow();\n        });\n\n        test('should handle special Unicode characters', () => {\n            const unicodeContent = 'console.log(\"Hello 🌍 World! émojis and spëcial chars\");';\n            \n            const sanitized = ValidationUtils.sanitizeContent(unicodeContent);\n            expect(sanitized).toContain('🌍');\n            expect(sanitized).toContain('émojis');\n            expect(sanitized).toContain('spëcial');\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}