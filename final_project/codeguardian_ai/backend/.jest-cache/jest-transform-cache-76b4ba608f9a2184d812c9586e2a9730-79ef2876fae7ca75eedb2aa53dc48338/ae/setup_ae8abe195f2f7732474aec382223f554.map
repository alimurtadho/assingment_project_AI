{"version":3,"names":["PrismaClient","require","beforeAll","afterAll","process","env","NODE_ENV","PORT","DATABASE_URL","OPENAI_API_KEY","JWT_SECRET","SESSION_SECRET","LOG_LEVEL","jest","setTimeout","global","testUtils","createMockFile","filename","content","mimetype","originalname","size","Buffer","byteLength","buffer","from","fieldname","encoding","createMockRequest","overrides","method","url","headers","ip","body","query","params","generateTestCode","type","templates","javascript","python","generateVulnerableCode","beforeEach","clearAllMocks","module","exports"],"sources":["setup.js"],"sourcesContent":["// Jest setup file for backend tests\nconst { PrismaClient } = require('@prisma/client');\n\n// Setup test database\nbeforeAll(async () => {\n  // Initialize test database if needed\n});\n\nafterAll(async () => {\n  // Cleanup test database if needed\n});\n\n/**\n * Jest Test Setup Configuration\n * Sets up the testing environment for CodeGuardian AI\n */\n\n// Set test environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.PORT = '0'; // Use random port for testing\nprocess.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/codeguardian_test';\nprocess.env.OPENAI_API_KEY = 'test-api-key-mock';\nprocess.env.JWT_SECRET = 'test-jwt-secret';\nprocess.env.SESSION_SECRET = 'test-session-secret';\nprocess.env.LOG_LEVEL = 'error'; // Reduce log noise during tests\n\n// Global test timeout\njest.setTimeout(30000);\n\n// Global test utilities\nglobal.testUtils = {\n    // Create a mock file object for testing\n    createMockFile: (filename, content, mimetype = 'text/javascript') => ({\n        originalname: filename,\n        mimetype,\n        size: Buffer.byteLength(content),\n        buffer: Buffer.from(content),\n        fieldname: 'file',\n        encoding: '7bit'\n    }),\n\n    // Create mock request object\n    createMockRequest: (overrides = {}) => ({\n        method: 'GET',\n        url: '/test',\n        headers: {\n            'user-agent': 'test-agent',\n            'content-type': 'application/json'\n        },\n        ip: '127.0.0.1',\n        body: {},\n        query: {},\n        params: {},\n        ...overrides\n    }),\n\n    // Generate test data\n    generateTestCode: (type = 'javascript') => {\n        const templates = {\n            javascript: `\n                function testFunction(param1, param2) {\n                    if (!param1) {\n                        throw new Error('param1 is required');\n                    }\n                    \n                    const result = param1 + param2;\n                    console.log('Result:', result);\n                    return result;\n                }\n                \n                module.exports = testFunction;\n            `,\n            python: `\n                def test_function(param1, param2):\n                    if not param1:\n                        raise ValueError('param1 is required')\n                    \n                    result = param1 + param2\n                    print(f'Result: {result}')\n                    return result\n            `\n        };\n        \n        return templates[type] || templates.javascript;\n    },\n\n    // Generate vulnerable code for testing security scanner\n    generateVulnerableCode: () => `\n        function processUserInput(input) {\n            // SQL Injection vulnerability\n            const query = \"SELECT * FROM users WHERE name = '\" + input + \"'\";\n            \n            // XSS vulnerability\n            document.innerHTML = input;\n            \n            // Code injection vulnerability\n            eval(input);\n            \n            return query;\n        }\n    `\n};\n\n// Database is already initialized at the top of the file\n\n// Reset mocks before each test\nbeforeEach(() => {\n    jest.clearAllMocks();\n});\n\nmodule.exports = {\n    testUtils: global.testUtils\n};\n\n// Global test timeout\njest.setTimeout(10000);\n"],"mappings":";;AAAA;AACA,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;;AAElD;AACAC,SAAS,CAAC,YAAY;EACpB;AAAA,CACD,CAAC;AAEFC,QAAQ,CAAC,YAAY;EACnB;AAAA,CACD,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACAC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG,MAAM;AAC7BF,OAAO,CAACC,GAAG,CAACE,IAAI,GAAG,GAAG,CAAC,CAAC;AACxBH,OAAO,CAACC,GAAG,CAACG,YAAY,GAAG,yDAAyD;AACpFJ,OAAO,CAACC,GAAG,CAACI,cAAc,GAAG,mBAAmB;AAChDL,OAAO,CAACC,GAAG,CAACK,UAAU,GAAG,iBAAiB;AAC1CN,OAAO,CAACC,GAAG,CAACM,cAAc,GAAG,qBAAqB;AAClDP,OAAO,CAACC,GAAG,CAACO,SAAS,GAAG,OAAO,CAAC,CAAC;;AAEjC;AACAC,IAAI,CAACC,UAAU,CAAC,KAAK,CAAC;;AAEtB;AACAC,MAAM,CAACC,SAAS,GAAG;EACf;EACAC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,GAAG,iBAAiB,MAAM;IAClEC,YAAY,EAAEH,QAAQ;IACtBE,QAAQ;IACRE,IAAI,EAAEC,MAAM,CAACC,UAAU,CAACL,OAAO,CAAC;IAChCM,MAAM,EAAEF,MAAM,CAACG,IAAI,CAACP,OAAO,CAAC;IAC5BQ,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE;EACd,CAAC,CAAC;EAEF;EACAC,iBAAiB,EAAEA,CAACC,SAAS,GAAG,CAAC,CAAC,MAAM;IACpCC,MAAM,EAAE,KAAK;IACbC,GAAG,EAAE,OAAO;IACZC,OAAO,EAAE;MACL,YAAY,EAAE,YAAY;MAC1B,cAAc,EAAE;IACpB,CAAC;IACDC,EAAE,EAAE,WAAW;IACfC,IAAI,EAAE,CAAC,CAAC;IACRC,KAAK,EAAE,CAAC,CAAC;IACTC,MAAM,EAAE,CAAC,CAAC;IACV,GAAGP;EACP,CAAC,CAAC;EAEF;EACAQ,gBAAgB,EAAEA,CAACC,IAAI,GAAG,YAAY,KAAK;IACvC,MAAMC,SAAS,GAAG;MACdC,UAAU,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;MACDC,MAAM,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC;IAED,OAAOF,SAAS,CAACD,IAAI,CAAC,IAAIC,SAAS,CAACC,UAAU;EAClD,CAAC;EAED;EACAE,sBAAsB,EAAEA,CAAA,KAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACAC,UAAU,CAAC,MAAM;EACb/B,IAAI,CAACgC,aAAa,CAAC,CAAC;AACxB,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAG;EACb/B,SAAS,EAAED,MAAM,CAACC;AACtB,CAAC;;AAED;AACAH,IAAI,CAACC,UAAU,CAAC,KAAK,CAAC","ignoreList":[]}