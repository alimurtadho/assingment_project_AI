{"version":3,"names":["SecurityScanner","require","describe","scanner","beforeEach","test","expect","patterns","toBeDefined","Array","isArray","toBe","length","toBeGreaterThan","patternTypes","map","p","type","toContain","code","result","scanCode","vulnerabilities","toEqual","arrayContaining","objectContaining","severity","pattern","line","any","Number","highRiskCode","lowRiskCode","highRiskResult","lowRiskResult","riskScore","toBeLessThan","summary","totalVulnerabilities","criticalIssues","highSeverity","mediumSeverity","lowSeverity","riskLevel","stringMatching","evalVuln","find","v","remediation","safeCode","toHaveLength","cwe","toMatch","context","before","after","matches","analyzePatterns","score","calculateRiskScore","toBeLessThanOrEqual","criticalVulns","lowVulns","criticalScore","lowScore","generateSummary","testCases","expected","forEach","details","getVulnerabilityDetails","description","files","filename","results","scanBatch","error","jsCode","some","tsCode","pythonCode","largeCode","repeat","specialCode","malformedCode","start","Date","now","duration","codes","fill","_","i","promises","Promise","all"],"sources":["securityScanner.test.js"],"sourcesContent":["/**\n * Unit Tests for SecurityScanner Service\n * Tests vulnerability detection, risk scoring, and security analysis\n */\n\nconst SecurityScanner = require('../../../services/securityScanner');\n\ndescribe('SecurityScanner Service', () => {\n    let scanner;\n\n    beforeEach(() => {\n        scanner = new SecurityScanner();\n    });\n\n    describe('constructor', () => {\n        test('should initialize with vulnerability patterns', () => {\n            expect(scanner.patterns).toBeDefined();\n            expect(Array.isArray(scanner.patterns)).toBe(true);\n            expect(scanner.patterns.length).toBeGreaterThan(0);\n        });\n\n        test('should have required patterns', () => {\n            const patternTypes = scanner.patterns.map(p => p.type);\n            \n            expect(patternTypes).toContain('code_injection');\n            expect(patternTypes).toContain('sql_injection');\n            expect(patternTypes).toContain('xss');\n            expect(patternTypes).toContain('path_traversal');\n            expect(patternTypes).toContain('command_injection');\n        });\n    });\n\n    describe('scanCode method', () => {\n        test('should detect eval usage', async () => {\n            const code = `\n                function processInput(input) {\n                    eval(input); // Dangerous!\n                    return true;\n                }\n            `;\n\n            const result = await scanner.scanCode(code, 'test.js');\n\n            expect(result.vulnerabilities).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'code_injection',\n                        severity: 'high',\n                        pattern: 'eval(',\n                        line: expect.any(Number)\n                    })\n                ])\n            );\n        });\n\n        test('should detect SQL injection patterns', async () => {\n            const code = `\n                function getUser(userId) {\n                    const query = \"SELECT * FROM users WHERE id = \" + userId;\n                    return db.query(query);\n                }\n            `;\n\n            const result = await scanner.scanCode(code, 'database.js');\n\n            expect(result.vulnerabilities).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'sql_injection',\n                        severity: 'high'\n                    })\n                ])\n            );\n        });\n\n        test('should detect XSS vulnerabilities', async () => {\n            const code = `\n                function displayContent(userContent) {\n                    document.innerHTML = userContent;\n                    return true;\n                }\n            `;\n\n            const result = await scanner.scanCode(code, 'frontend.js');\n\n            expect(result.vulnerabilities).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'xss',\n                        severity: 'high'\n                    })\n                ])\n            );\n        });\n\n        test('should detect path traversal vulnerabilities', async () => {\n            const code = `\n                const fs = require('fs');\n                function readFile(filename) {\n                    return fs.readFile('../../../etc/passwd', 'utf8');\n                }\n            `;\n\n            const result = await scanner.scanCode(code, 'file.js');\n\n            expect(result.vulnerabilities).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'path_traversal',\n                        severity: 'high'\n                    })\n                ])\n            );\n        });\n\n        test('should detect command injection', async () => {\n            const code = `\n                const { exec } = require('child_process');\n                function runCommand(cmd) {\n                    exec(cmd);\n                }\n            `;\n\n            const result = await scanner.scanCode(code, 'command.js');\n\n            expect(result.vulnerabilities).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'command_injection',\n                        severity: 'high'\n                    })\n                ])\n            );\n        });\n\n        test('should calculate risk score correctly', async () => {\n            const highRiskCode = `\n                eval(userInput);\n                exec(command);\n                document.innerHTML = content;\n            `;\n\n            const lowRiskCode = `\n                function add(a, b) {\n                    return a + b;\n                }\n                console.log('Hello World');\n            `;\n\n            const highRiskResult = await scanner.scanCode(highRiskCode, 'high.js');\n            const lowRiskResult = await scanner.scanCode(lowRiskCode, 'low.js');\n\n            expect(highRiskResult.riskScore).toBeGreaterThan(lowRiskResult.riskScore);\n            expect(highRiskResult.riskScore).toBeGreaterThan(5);\n            expect(lowRiskResult.riskScore).toBeLessThan(3);\n        });\n\n        test('should provide vulnerability summary', async () => {\n            const code = `\n                eval(userInput);\n                document.innerHTML = content;\n                const query = \"SELECT * FROM users WHERE id = \" + id;\n            `;\n\n            const result = await scanner.scanCode(code, 'mixed.js');\n\n            expect(result.summary).toEqual({\n                totalVulnerabilities: expect.any(Number),\n                criticalIssues: expect.any(Number),\n                highSeverity: expect.any(Number),\n                mediumSeverity: expect.any(Number),\n                lowSeverity: expect.any(Number),\n                riskLevel: expect.stringMatching(/low|medium|high|critical/)\n            });\n\n            expect(result.summary.totalVulnerabilities).toBeGreaterThan(0);\n        });\n\n        test('should provide remediation suggestions', async () => {\n            const code = 'eval(userInput);';\n\n            const result = await scanner.scanCode(code, 'test.js');\n\n            const evalVuln = result.vulnerabilities.find(v => v.type === 'code_injection');\n            expect(evalVuln.remediation).toBeDefined();\n            expect(Array.isArray(evalVuln.remediation)).toBe(true);\n            expect(evalVuln.remediation.length).toBeGreaterThan(0);\n        });\n\n        test('should handle safe code correctly', async () => {\n            const safeCode = `\n                function calculateSum(a, b) {\n                    if (typeof a !== 'number' || typeof b !== 'number') {\n                        throw new Error('Invalid input');\n                    }\n                    return a + b;\n                }\n                \n                const result = calculateSum(5, 3);\n                console.log('Result:', result);\n            `;\n\n            const result = await scanner.scanCode(safeCode, 'safe.js');\n\n            expect(result.vulnerabilities).toHaveLength(0);\n            expect(result.riskScore).toBeLessThan(3);\n            expect(result.summary.riskLevel).toBe('low');\n        });\n\n        test('should detect CWE mappings', async () => {\n            const code = 'eval(userInput);';\n\n            const result = await scanner.scanCode(code, 'test.js');\n\n            const evalVuln = result.vulnerabilities.find(v => v.type === 'code_injection');\n            expect(evalVuln.cwe).toBeDefined();\n            expect(evalVuln.cwe).toMatch(/CWE-\\d+/);\n        });\n\n        test('should provide context information', async () => {\n            const code = `\n                function processData(input) {\n                    eval(input); // Line 2\n                    return true;\n                }\n            `;\n\n            const result = await scanner.scanCode(code, 'context.js');\n\n            const evalVuln = result.vulnerabilities.find(v => v.type === 'code_injection');\n            expect(evalVuln.context).toBeDefined();\n            expect(evalVuln.context.before).toBeDefined();\n            expect(evalVuln.context.after).toBeDefined();\n        });\n    });\n\n    describe('analyzePatterns method', () => {\n        test('should find pattern matches', () => {\n            const code = 'eval(\"test\"); document.write(data);';\n            \n            const matches = scanner.analyzePatterns(code);\n\n            expect(matches.length).toBeGreaterThan(0);\n            expect(matches).toEqual(\n                expect.arrayContaining([\n                    expect.objectContaining({\n                        type: 'code_injection',\n                        pattern: 'eval('\n                    })\n                ])\n            );\n        });\n\n        test('should handle code without vulnerabilities', () => {\n            const code = 'console.log(\"Hello World\");';\n            \n            const matches = scanner.analyzePatterns(code);\n\n            expect(matches).toHaveLength(0);\n        });\n\n        test('should find multiple patterns in same code', () => {\n            const code = `\n                eval(input);\n                exec(command);\n                document.innerHTML = content;\n            `;\n            \n            const matches = scanner.analyzePatterns(code);\n\n            expect(matches.length).toBeGreaterThan(2);\n        });\n    });\n\n    describe('calculateRiskScore method', () => {\n        test('should calculate score based on vulnerability count and severity', () => {\n            const vulnerabilities = [\n                { severity: 'critical', type: 'code_injection' },\n                { severity: 'high', type: 'sql_injection' },\n                { severity: 'medium', type: 'weak_crypto' },\n                { severity: 'low', type: 'info_disclosure' }\n            ];\n\n            const score = scanner.calculateRiskScore(vulnerabilities);\n\n            expect(score).toBeGreaterThan(5);\n            expect(score).toBeLessThanOrEqual(10);\n        });\n\n        test('should return 0 for no vulnerabilities', () => {\n            const score = scanner.calculateRiskScore([]);\n\n            expect(score).toBe(0);\n        });\n\n        test('should weight critical vulnerabilities heavily', () => {\n            const criticalVulns = [\n                { severity: 'critical', type: 'code_injection' }\n            ];\n            \n            const lowVulns = [\n                { severity: 'low', type: 'info_disclosure' },\n                { severity: 'low', type: 'weak_validation' }\n            ];\n\n            const criticalScore = scanner.calculateRiskScore(criticalVulns);\n            const lowScore = scanner.calculateRiskScore(lowVulns);\n\n            expect(criticalScore).toBeGreaterThan(lowScore);\n        });\n    });\n\n    describe('generateSummary method', () => {\n        test('should generate accurate summary', () => {\n            const vulnerabilities = [\n                { severity: 'critical' },\n                { severity: 'high' },\n                { severity: 'high' },\n                { severity: 'medium' },\n                { severity: 'low' }\n            ];\n\n            const summary = scanner.generateSummary(vulnerabilities, 7.5);\n\n            expect(summary).toEqual({\n                totalVulnerabilities: 5,\n                criticalIssues: 1,\n                highSeverity: 2,\n                mediumSeverity: 1,\n                lowSeverity: 1,\n                riskLevel: 'high'\n            });\n        });\n\n        test('should determine correct risk level', () => {\n            const testCases = [\n                { score: 1, expected: 'low' },\n                { score: 3, expected: 'low' },\n                { score: 5, expected: 'medium' },\n                { score: 7, expected: 'high' },\n                { score: 9, expected: 'critical' }\n            ];\n\n            testCases.forEach(({ score, expected }) => {\n                const summary = scanner.generateSummary([], score);\n                expect(summary.riskLevel).toBe(expected);\n            });\n        });\n    });\n\n    describe('getVulnerabilityDetails method', () => {\n        test('should return pattern details', () => {\n            const pattern = scanner.patterns.find(p => p.type === 'code_injection');\n            const details = scanner.getVulnerabilityDetails('code_injection');\n\n            expect(details).toEqual({\n                type: 'code_injection',\n                severity: pattern.severity,\n                cwe: pattern.cwe,\n                description: pattern.description,\n                remediation: pattern.remediation\n            });\n        });\n\n        test('should handle unknown vulnerability types', () => {\n            const details = scanner.getVulnerabilityDetails('unknown_type');\n\n            expect(details).toEqual({\n                type: 'unknown_type',\n                severity: 'medium',\n                cwe: 'CWE-000',\n                description: 'Unknown vulnerability type',\n                remediation: ['Review code manually for potential security issues']\n            });\n        });\n    });\n\n    describe('batch scanning', () => {\n        test('should scan multiple files', async () => {\n            const files = [\n                { code: 'eval(input);', filename: 'file1.js' },\n                { code: 'console.log(\"safe\");', filename: 'file2.js' },\n                { code: 'document.innerHTML = data;', filename: 'file3.js' }\n            ];\n\n            const results = await scanner.scanBatch(files);\n\n            expect(results).toHaveLength(3);\n            expect(results[0].vulnerabilities.length).toBeGreaterThan(0);\n            expect(results[1].vulnerabilities.length).toBe(0);\n            expect(results[2].vulnerabilities.length).toBeGreaterThan(0);\n        });\n\n        test('should handle batch scanning errors gracefully', async () => {\n            const files = [\n                { code: 'eval(input);', filename: 'file1.js' },\n                { code: null, filename: 'file2.js' }, // Invalid\n                { code: 'console.log(\"test\");', filename: 'file3.js' }\n            ];\n\n            const results = await scanner.scanBatch(files);\n\n            expect(results).toHaveLength(3);\n            expect(results[1].error).toBeDefined();\n        });\n    });\n\n    describe('language-specific scanning', () => {\n        test('should detect JavaScript-specific vulnerabilities', async () => {\n            const jsCode = `\n                Function('return process.env')();\n                setTimeout('alert(\"xss\")', 1000);\n            `;\n\n            const result = await scanner.scanCode(jsCode, 'test.js');\n\n            expect(result.vulnerabilities.some(v => \n                v.type === 'code_injection'\n            )).toBe(true);\n        });\n\n        test('should detect TypeScript-specific patterns', async () => {\n            const tsCode = `\n                declare var evil: any;\n                eval(evil);\n            `;\n\n            const result = await scanner.scanCode(tsCode, 'test.ts');\n\n            expect(result.vulnerabilities.some(v => \n                v.type === 'code_injection'\n            )).toBe(true);\n        });\n\n        test('should detect Python-specific vulnerabilities', async () => {\n            const pythonCode = `\n                exec(user_input)\n                eval(expression)\n            `;\n\n            const result = await scanner.scanCode(pythonCode, 'test.py');\n\n            expect(result.vulnerabilities.some(v => \n                v.type === 'code_injection'\n            )).toBe(true);\n        });\n    });\n\n    describe('edge cases and error handling', () => {\n        test('should handle empty code', async () => {\n            const result = await scanner.scanCode('', 'empty.js');\n\n            expect(result.vulnerabilities).toHaveLength(0);\n            expect(result.riskScore).toBe(0);\n            expect(result.summary.riskLevel).toBe('low');\n        });\n\n        test('should handle null code', async () => {\n            const result = await scanner.scanCode(null, 'null.js');\n\n            expect(result.vulnerabilities).toHaveLength(0);\n            expect(result.riskScore).toBe(0);\n        });\n\n        test('should handle very large code files', async () => {\n            const largeCode = 'console.log(\"test\");\\\\n'.repeat(10000);\n\n            const result = await scanner.scanCode(largeCode, 'large.js');\n\n            expect(result).toBeDefined();\n            expect(result.vulnerabilities).toBeDefined();\n        });\n\n        test('should handle code with special characters', async () => {\n            const specialCode = 'console.log(\"émojis 🚀 and spëcial chars\");';\n\n            const result = await scanner.scanCode(specialCode, 'special.js');\n\n            expect(result.vulnerabilities).toHaveLength(0);\n        });\n\n        test('should handle malformed code gracefully', async () => {\n            const malformedCode = 'function test() { return';\n\n            const result = await scanner.scanCode(malformedCode, 'malformed.js');\n\n            expect(result).toBeDefined();\n            expect(Array.isArray(result.vulnerabilities)).toBe(true);\n        });\n    });\n\n    describe('performance', () => {\n        test('should complete scanning within reasonable time', async () => {\n            const code = `\n                function testFunction() {\n                    eval(userInput);\n                    return true;\n                }\n            `;\n\n            const start = Date.now();\n            await scanner.scanCode(code, 'performance.js');\n            const duration = Date.now() - start;\n\n            expect(duration).toBeLessThan(1000); // Should complete within 1 second\n        });\n\n        test('should handle concurrent scans', async () => {\n            const codes = Array(5).fill().map((_, i) => \n                `eval(\"test${i}\"); console.log(\"${i}\");`\n            );\n\n            const start = Date.now();\n            const promises = codes.map((code, i) => \n                scanner.scanCode(code, `concurrent${i}.js`)\n            );\n            const results = await Promise.all(promises);\n            const duration = Date.now() - start;\n\n            expect(results).toHaveLength(5);\n            expect(duration).toBeLessThan(2000); // Should complete within 2 seconds\n            results.forEach(result => {\n                expect(result.vulnerabilities.length).toBeGreaterThan(0);\n            });\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}