{"version":3,"names":["cov_x2aug71sy","actualCoverage","OpenAI","s","require","ResponseFormatter","ValidationUtils","Logger","ErrorHandler","TestGenerator","constructor","f","logger","validationUtils","responseFormatter","initializeOpenAI","prompts","initializePrompts","config","maxTokens","temperature","model","retryAttempts","retryDelay","testFrameworks","javascript","jest","extension","imports","patterns","describe","test","expect","beforeEach","afterEach","mocha","vitest","python","pytest","unittest","process","env","OPENAI_API_KEY","b","Error","openai","apiKey","info","error","createError","unitTests","system","user","integrationTests","e2eTests","performanceTests","securityTests","generate","code","options","testType","type","startTime","Date","now","codeLength","length","validateGenerationInput","codeAnalysis","analyzeCode","prompt","prepareGenerationPrompt","aiResponse","executeGenerationWithRetry","generationResult","processGenerationResponse","result","metadata","timestamp","toISOString","processingTime","modelUsed","generationOptions","testsGenerated","testCases","testScenarios","success","message","validateCodeInput","warn","analysis","language","detectLanguage","framework","detectTestFramework","detectCodePatterns","complexity","calculateComplexity","functions","extractFunctions","classes","extractClasses","debug","includes","lang","toLowerCase","hasAsync","hasClasses","hasFunctions","hasExports","hasImports","hasAPI","hasDatabase","hasValidation","hasAuth","hasMiddleware","lines","split","filter","line","trim","match","conditionals","loops","asyncOperations","score","Math","min","round","functionRegex","exec","push","name","isAsync","getLineNumber","index","classRegex","substring","promptTemplate","contextInfo","map","join","c","detectedPatterns","Object","entries","value","key","userPrompt","replace","role","content","messages","lastError","attempt","response","chat","completions","create","max_tokens","response_format","choices","delay","parsed","JSON","parse","validateGenerationResponse","enhanceGenerationResponse","requiredFields","required","field","testArrayField","getTestArrayField","id","statistics","calculateTestStatistics","qualityMetrics","calculateQualityMetrics","fieldMap","tests","stats","total","byType","bySeverity","forEach","severity","metrics","completeness","coverage","maintainability","reliability","testTypes","Set","t","Boolean","size","estimatedPercentage","hasDescriptions","description","hasAssertions","assertions","ms","Promise","resolve","setTimeout","generateBatch","files","results","batchStartTime","fileCount","file","fileName","batchResult","summary","totalFiles","successfulGenerations","r","failedGenerations","getSupportedFrameworks","getFrameworkConfig","frameworks","keys","module","exports"],"sources":["testGenerator.js"],"sourcesContent":["/**\n * Enhanced Test Generator Service\n * Uses AI to generate comprehensive test cases with improved architecture\n */\n\nconst OpenAI = require('openai');\nconst ResponseFormatter = require('../utils/responseFormatter');\nconst ValidationUtils = require('../utils/validationUtils');\nconst Logger = require('../utils/logger');\nconst ErrorHandler = require('../utils/errorHandler');\n\nclass TestGenerator {\n  constructor() {\n    this.logger = Logger;\n    this.validationUtils = ValidationUtils;\n    this.responseFormatter = ResponseFormatter;\n    \n    // Initialize OpenAI with proper error handling\n    this.initializeOpenAI();\n    \n    // Enhanced prompts for different test types\n    this.prompts = this.initializePrompts();\n    \n    // Test generation configuration\n    this.config = {\n      maxTokens: 6000,\n      temperature: 0.2,\n      model: 'gpt-4',\n      retryAttempts: 3,\n      retryDelay: 1000\n    };\n\n    // Supported test frameworks and their patterns\n    this.testFrameworks = {\n      javascript: {\n        jest: {\n          extension: '.test.js',\n          imports: \"const { describe, test, expect, beforeEach, afterEach } = require('@jest/globals');\",\n          patterns: {\n            describe: 'describe',\n            test: 'test',\n            expect: 'expect',\n            beforeEach: 'beforeEach',\n            afterEach: 'afterEach'\n          }\n        },\n        mocha: {\n          extension: '.test.js',\n          imports: \"const { describe, it, beforeEach, afterEach } = require('mocha'); const { expect } = require('chai');\",\n          patterns: {\n            describe: 'describe',\n            test: 'it',\n            expect: 'expect',\n            beforeEach: 'beforeEach',\n            afterEach: 'afterEach'\n          }\n        },\n        vitest: {\n          extension: '.test.js',\n          imports: \"import { describe, test, expect, beforeEach, afterEach } from 'vitest';\",\n          patterns: {\n            describe: 'describe',\n            test: 'test',\n            expect: 'expect',\n            beforeEach: 'beforeEach',\n            afterEach: 'afterEach'\n          }\n        }\n      },\n      python: {\n        pytest: {\n          extension: '_test.py',\n          imports: \"import pytest\\nimport unittest.mock as mock\",\n          patterns: {\n            describe: 'class Test',\n            test: 'def test_',\n            expect: 'assert',\n            beforeEach: 'def setup_method',\n            afterEach: 'def teardown_method'\n          }\n        },\n        unittest: {\n          extension: '_test.py',\n          imports: \"import unittest\\nimport unittest.mock as mock\",\n          patterns: {\n            describe: 'class Test',\n            test: 'def test_',\n            expect: 'self.assert',\n            beforeEach: 'def setUp',\n            afterEach: 'def tearDown'\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Initialize OpenAI client with proper validation\n   */\n  initializeOpenAI() {\n    try {\n      if (!process.env.OPENAI_API_KEY) {\n        throw new Error('OPENAI_API_KEY environment variable is required');\n      }\n\n      this.openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY\n      });\n\n      this.logger.info('OpenAI client initialized for test generation');\n    } catch (error) {\n      this.logger.error('Failed to initialize OpenAI client for test generation', error);\n      throw ErrorHandler.createError('OPENAI_INIT_FAILED', 'Failed to initialize OpenAI client', 500);\n    }\n  }\n\n  /**\n   * Initialize enhanced prompts for different test types\n   */\n  initializePrompts() {\n    return {\n      unitTests: {\n        system: `You are an expert test engineer specializing in writing comprehensive, maintainable unit tests.\nYour tests should be thorough, readable, and follow testing best practices.`,\n        \n        user: `Generate comprehensive unit tests for the provided code.\n\n**Requirements:**\n1. **Complete Coverage:** Generate tests for all public functions, methods, and classes\n2. **Edge Cases:** Include boundary conditions, null/undefined values, empty inputs\n3. **Error Scenarios:** Test exception handling and error conditions\n4. **Data Validation:** Test input validation and data transformation\n5. **State Testing:** Test object state changes and side effects\n6. **Performance:** Include tests for performance-critical functions\n7. **Mocking:** Use appropriate mocking for external dependencies\n\n**Test Framework:** {framework}\n**Programming Language:** {language}\n\n**Test Structure Guidelines:**\n- Use descriptive test names that explain what is being tested\n- Group related tests using describe/context blocks\n- Include setup and cleanup when necessary\n- Use meaningful assertions with clear error messages\n- Follow AAA pattern: Arrange, Act, Assert\n\n**Response Format (JSON):**\n{\n  \"testSuite\": {\n    \"fileName\": \"generated_test_file_name\",\n    \"content\": \"complete test file content with proper imports and structure\",\n    \"framework\": \"test framework used\",\n    \"language\": \"programming language\"\n  },\n  \"testCases\": [\n    {\n      \"id\": \"unique_test_id\",\n      \"functionName\": \"function being tested\",\n      \"testName\": \"descriptive test name\",\n      \"description\": \"what this test validates\",\n      \"type\": \"unit|integration|edge-case|error|performance\",\n      \"scenario\": \"detailed test scenario\",\n      \"inputData\": \"example input data\",\n      \"expectedOutput\": \"expected result\",\n      \"assertions\": [\"list of assertions being made\"],\n      \"mocks\": [\"external dependencies being mocked\"]\n    }\n  ],\n  \"coverage\": {\n    \"estimatedPercentage\": \"estimated test coverage percentage\",\n    \"coveredFunctions\": [\"list of functions with tests\"],\n    \"uncoveredAreas\": [\"areas that might need additional testing\"],\n    \"recommendations\": [\"suggestions for improving test coverage\"]\n  },\n  \"dependencies\": {\n    \"testFramework\": \"primary test framework\",\n    \"additionalLibraries\": [\"additional testing libraries needed\"],\n    \"mockingFramework\": \"mocking library if used\"\n  },\n  \"metrics\": {\n    \"totalTests\": \"number of test cases\",\n    \"complexityScore\": \"1-10 based on test complexity\",\n    \"maintainabilityScore\": \"1-10 based on test maintainability\"\n  }\n}`\n      },\n\n      integrationTests: {\n        system: `You are an expert in integration testing, focusing on testing component interactions,\nAPI endpoints, database operations, and system workflows.`,\n        \n        user: `Generate comprehensive integration tests for the provided code.\n\n**Focus Areas:**\n1. **API Endpoints:** Test HTTP methods, status codes, request/response handling\n2. **Database Operations:** Test CRUD operations, transactions, data integrity\n3. **Service Interactions:** Test communication between different services/modules\n4. **Workflow Testing:** Test complete business processes and user journeys\n5. **External Dependencies:** Test integration with third-party APIs and services\n6. **Configuration Testing:** Test different environment configurations\n\n**Framework:** {framework}\n**Language:** {language}\n\n**Integration Test Guidelines:**\n- Test realistic scenarios with actual dependencies\n- Use test databases and controlled test environments\n- Validate data flow between components\n- Test error propagation and handling\n- Include performance and load considerations\n\n**Response Format (JSON):**\n{\n  \"integrationSuite\": {\n    \"fileName\": \"integration_test_file_name\",\n    \"content\": \"complete integration test file\",\n    \"setupInstructions\": \"test environment setup instructions\",\n    \"teardownInstructions\": \"cleanup instructions\"\n  },\n  \"testScenarios\": [\n    {\n      \"id\": \"scenario_id\",\n      \"name\": \"scenario name\",\n      \"description\": \"what is being tested\",\n      \"type\": \"api|database|service|workflow|external\",\n      \"components\": [\"components involved in test\"],\n      \"preconditions\": \"test setup requirements\",\n      \"steps\": [\"test execution steps\"],\n      \"assertions\": [\"expected outcomes\"],\n      \"cleanup\": \"post-test cleanup\"\n    }\n  ],\n  \"environment\": {\n    \"requirements\": [\"environment setup requirements\"],\n    \"testData\": [\"test data needed\"],\n    \"configurations\": [\"configuration settings\"],\n    \"dependencies\": [\"external service dependencies\"]\n  },\n  \"validation\": {\n    \"coverageAreas\": [\"integration points covered\"],\n    \"riskAreas\": [\"high-risk areas tested\"],\n    \"performanceChecks\": [\"performance validations included\"]\n  }\n}`\n      },\n\n      e2eTests: {\n        system: `You are an expert in end-to-end testing, creating tests that validate complete user workflows\nand system functionality from a user's perspective.`,\n        \n        user: `Generate comprehensive end-to-end tests for the provided application code.\n\n**E2E Test Requirements:**\n1. **User Journeys:** Test complete user workflows and use cases\n2. **UI Interactions:** Test user interface elements and interactions\n3. **Data Persistence:** Validate data is properly saved and retrieved\n4. **Cross-Browser Testing:** Consider browser compatibility\n5. **Mobile Responsiveness:** Include mobile device testing\n6. **Error Handling:** Test error scenarios and user feedback\n\n**Testing Framework:** {framework}\n**Application Type:** {appType}\n\n**Response Format (JSON):**\n{\n  \"e2eSuite\": {\n    \"fileName\": \"e2e_test_file_name\",\n    \"content\": \"complete e2e test file\",\n    \"framework\": \"testing framework used\",\n    \"browser\": \"target browser configuration\"\n  },\n  \"userJourneys\": [\n    {\n      \"id\": \"journey_id\",\n      \"name\": \"user journey name\",\n      \"description\": \"journey description\",\n      \"persona\": \"user type/role\",\n      \"steps\": [\n        {\n          \"step\": \"step number\",\n          \"action\": \"user action\",\n          \"element\": \"UI element\",\n          \"input\": \"input data if any\",\n          \"expected\": \"expected result\"\n        }\n      ],\n      \"assertions\": [\"end-to-end validations\"],\n      \"testData\": \"test data requirements\"\n    }\n  ],\n  \"configuration\": {\n    \"browserSettings\": \"browser configuration\",\n    \"deviceSettings\": \"device/viewport settings\",\n    \"timeouts\": \"timeout configurations\",\n    \"retryPolicy\": \"retry settings\"\n  }\n}`\n      },\n\n      performanceTests: {\n        system: `You are a performance testing expert who creates tests to validate system performance,\nload handling, and resource usage under various conditions.`,\n        \n        user: `Generate performance tests for the provided code.\n\n**Performance Test Areas:**\n1. **Load Testing:** Test system behavior under expected load\n2. **Stress Testing:** Test system limits and breaking points\n3. **Volume Testing:** Test with large amounts of data\n4. **Memory Testing:** Test memory usage and leaks\n5. **Concurrency Testing:** Test concurrent user scenarios\n\n**Response Format (JSON):**\n{\n  \"performanceSuite\": {\n    \"fileName\": \"performance_test_file_name\",\n    \"content\": \"performance test implementation\",\n    \"tooling\": \"performance testing tools used\"\n  },\n  \"performanceTests\": [\n    {\n      \"id\": \"perf_test_id\",\n      \"name\": \"performance test name\",\n      \"type\": \"load|stress|volume|memory|concurrency\",\n      \"description\": \"what is being tested\",\n      \"metrics\": [\"metrics to measure\"],\n      \"thresholds\": [\"performance thresholds\"],\n      \"scenario\": \"test scenario description\"\n    }\n  ],\n  \"benchmarks\": {\n    \"responseTime\": \"acceptable response time\",\n    \"throughput\": \"expected throughput\",\n    \"resourceUsage\": \"resource usage limits\"\n  }\n}`\n      },\n\n      securityTests: {\n        system: `You are a security testing expert who creates tests to validate application security,\nidentify vulnerabilities, and ensure security controls are working properly.`,\n        \n        user: `Generate security tests for the provided code.\n\n**Security Test Areas:**\n1. **Input Validation:** Test injection attacks and input sanitization\n2. **Authentication:** Test login mechanisms and session management\n3. **Authorization:** Test access controls and permission enforcement\n4. **Data Protection:** Test data encryption and secure storage\n5. **API Security:** Test API endpoints for security vulnerabilities\n\n**Response Format (JSON):**\n{\n  \"securitySuite\": {\n    \"fileName\": \"security_test_file_name\",\n    \"content\": \"security test implementation\",\n    \"framework\": \"security testing framework\"\n  },\n  \"securityTests\": [\n    {\n      \"id\": \"security_test_id\",\n      \"name\": \"security test name\",\n      \"vulnerability\": \"vulnerability being tested\",\n      \"description\": \"test description\",\n      \"attackVector\": \"attack method being tested\",\n      \"expectedBehavior\": \"expected secure behavior\",\n      \"severity\": \"vulnerability severity level\"\n    }\n  ],\n  \"compliance\": {\n    \"standards\": [\"security standards addressed\"],\n    \"checklist\": [\"security checklist items\"]\n  }\n}`\n      }\n    };\n  }\n\n  /**\n   * Enhanced generate method with multiple test types support\n   */\n  async generate(code, options = {}) {\n    const testType = options.type || 'unitTests';\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('Starting test generation', { \n        testType, \n        codeLength: code.length,\n        options \n      });\n\n      // Validate inputs\n      this.validateGenerationInput(code, testType, options);\n\n      // Detect code language and framework if not provided\n      const codeAnalysis = this.analyzeCode(code, options);\n      \n      // Prepare the generation request\n      const prompt = this.prepareGenerationPrompt(code, testType, codeAnalysis);\n      \n      // Execute generation with retry logic\n      const aiResponse = await this.executeGenerationWithRetry(prompt);\n      \n      // Process and validate the response\n      const generationResult = await this.processGenerationResponse(aiResponse, testType);\n      \n      // Add metadata and enhancements\n      const result = {\n        ...generationResult,\n        metadata: {\n          testType,\n          timestamp: new Date().toISOString(),\n          processingTime: Date.now() - startTime,\n          modelUsed: this.config.model,\n          codeAnalysis,\n          generationOptions: options\n        }\n      };\n\n      this.logger.info('Test generation completed', {\n        testType,\n        processingTime: result.metadata.processingTime,\n        testsGenerated: result.testCases?.length || result.testScenarios?.length || 0\n      });\n\n      return this.responseFormatter.success(result, 'Test generation completed successfully');\n\n    } catch (error) {\n      this.logger.error('Test generation failed', { error: error.message, testType });\n      \n      if (error.code === 'insufficient_quota') {\n        throw ErrorHandler.createError('QUOTA_EXCEEDED', 'AI service quota exceeded', 429);\n      }\n      \n      throw ErrorHandler.createError(\n        'GENERATION_FAILED', \n        `Test generation failed: ${error.message}`, \n        500\n      );\n    }\n  }\n\n  /**\n   * Validate generation input parameters\n   */\n  validateGenerationInput(code, testType, options) {\n    if (!this.validationUtils.validateCodeInput(code)) {\n      throw new Error('Invalid code input provided');\n    }\n\n    if (!this.prompts[testType]) {\n      throw new Error(`Unsupported test type: ${testType}`);\n    }\n\n    if (code.length > 100000) {\n      this.logger.warn('Large code file detected for test generation', { codeLength: code.length });\n    }\n  }\n\n  /**\n   * Analyze code to detect language, framework, and patterns\n   */\n  analyzeCode(code, options) {\n    const analysis = {\n      language: options.language || this.detectLanguage(code),\n      framework: options.framework || this.detectTestFramework(code, options.language),\n      patterns: this.detectCodePatterns(code),\n      complexity: this.calculateComplexity(code),\n      functions: this.extractFunctions(code),\n      classes: this.extractClasses(code)\n    };\n\n    this.logger.debug('Code analysis completed', analysis);\n    return analysis;\n  }\n\n  /**\n   * Detect programming language from code\n   */\n  detectLanguage(code) {\n    // Simple language detection based on syntax patterns\n    if (code.includes('def ') && code.includes('import ')) return 'python';\n    if (code.includes('function ') || code.includes('const ') || code.includes('let ')) return 'javascript';\n    if (code.includes('class ') && code.includes('public ')) return 'java';\n    if (code.includes('#include') || code.includes('int main')) return 'cpp';\n    if (code.includes('func ') && code.includes('package ')) return 'go';\n    \n    return 'javascript'; // Default fallback\n  }\n\n  /**\n   * Detect appropriate test framework\n   */\n  detectTestFramework(code, language = 'javascript') {\n    const lang = language.toLowerCase();\n    \n    if (lang === 'javascript') {\n      if (code.includes('jest') || code.includes('@jest/globals')) return 'jest';\n      if (code.includes('mocha') || code.includes('chai')) return 'mocha';\n      if (code.includes('vitest')) return 'vitest';\n      return 'jest'; // Default for JavaScript\n    }\n    \n    if (lang === 'python') {\n      if (code.includes('pytest')) return 'pytest';\n      if (code.includes('unittest')) return 'unittest';\n      return 'pytest'; // Default for Python\n    }\n    \n    return 'jest'; // Global default\n  }\n\n  /**\n   * Detect code patterns for better test generation\n   */\n  detectCodePatterns(code) {\n    const patterns = {\n      hasAsync: /async\\s+function|await\\s+/.test(code),\n      hasClasses: /class\\s+\\w+/.test(code),\n      hasFunctions: /function\\s+\\w+|const\\s+\\w+\\s*=\\s*\\(/.test(code),\n      hasExports: /module\\.exports|export\\s+/.test(code),\n      hasImports: /require\\(|import\\s+/.test(code),\n      hasAPI: /app\\.(get|post|put|delete)|router\\.|express/.test(code),\n      hasDatabase: /mongoose|sequelize|prisma|knex|sql/.test(code),\n      hasValidation: /validate|joi|yup|zod/.test(code),\n      hasAuth: /auth|jwt|passport|session/.test(code),\n      hasMiddleware: /middleware|next\\(\\)/.test(code)\n    };\n\n    return patterns;\n  }\n\n  /**\n   * Calculate code complexity for test planning\n   */\n  calculateComplexity(code) {\n    const lines = code.split('\\n').filter(line => line.trim().length > 0);\n    const complexity = {\n      lines: lines.length,\n      functions: (code.match(/function\\s+\\w+|const\\s+\\w+\\s*=\\s*\\(/g) || []).length,\n      conditionals: (code.match(/if\\s*\\(|switch\\s*\\(|case\\s+/g) || []).length,\n      loops: (code.match(/for\\s*\\(|while\\s*\\(|forEach/g) || []).length,\n      asyncOperations: (code.match(/async|await|Promise|callback/g) || []).length\n    };\n\n    complexity.score = Math.min(10, Math.round(\n      (complexity.conditionals + complexity.loops + complexity.asyncOperations) / complexity.functions * 2\n    ));\n\n    return complexity;\n  }\n\n  /**\n   * Extract function information for targeted testing\n   */\n  extractFunctions(code) {\n    const functionRegex = /(?:function\\s+(\\w+)|const\\s+(\\w+)\\s*=\\s*(?:async\\s+)?\\()/g;\n    const functions = [];\n    let match;\n\n    while ((match = functionRegex.exec(code)) !== null) {\n      functions.push({\n        name: match[1] || match[2],\n        isAsync: code.includes('async'),\n        line: this.getLineNumber(code, match.index)\n      });\n    }\n\n    return functions;\n  }\n\n  /**\n   * Extract class information for OOP testing\n   */\n  extractClasses(code) {\n    const classRegex = /class\\s+(\\w+)/g;\n    const classes = [];\n    let match;\n\n    while ((match = classRegex.exec(code)) !== null) {\n      classes.push({\n        name: match[1],\n        line: this.getLineNumber(code, match.index)\n      });\n    }\n\n    return classes;\n  }\n\n  /**\n   * Get line number from character index\n   */\n  getLineNumber(code, index) {\n    return code.substring(0, index).split('\\n').length;\n  }\n\n  /**\n   * Prepare generation prompt\n   */\n  prepareGenerationPrompt(code, testType, codeAnalysis) {\n    const promptTemplate = this.prompts[testType];\n    \n    // Build context information\n    let contextInfo = `Programming Language: ${codeAnalysis.language}\\n`;\n    contextInfo += `Test Framework: ${codeAnalysis.framework}\\n`;\n    contextInfo += `Code Complexity: ${codeAnalysis.complexity.score}/10\\n`;\n    \n    if (codeAnalysis.functions.length > 0) {\n      contextInfo += `Functions Found: ${codeAnalysis.functions.map(f => f.name).join(', ')}\\n`;\n    }\n    \n    if (codeAnalysis.classes.length > 0) {\n      contextInfo += `Classes Found: ${codeAnalysis.classes.map(c => c.name).join(', ')}\\n`;\n    }\n\n    // Add detected patterns\n    const detectedPatterns = Object.entries(codeAnalysis.patterns)\n      .filter(([, value]) => value)\n      .map(([key]) => key);\n    \n    if (detectedPatterns.length > 0) {\n      contextInfo += `Detected Patterns: ${detectedPatterns.join(', ')}\\n`;\n    }\n\n    const userPrompt = promptTemplate.user\n      .replace('{framework}', codeAnalysis.framework)\n      .replace('{language}', codeAnalysis.language);\n\n    return [\n      {\n        role: 'system',\n        content: promptTemplate.system\n      },\n      {\n        role: 'user',\n        content: `${contextInfo}\\n\\nCode to generate tests for:\\n\\`\\`\\`${codeAnalysis.language}\\n${code}\\n\\`\\`\\`\\n\\n${userPrompt}`\n      }\n    ];\n  }\n\n  /**\n   * Execute generation with retry logic\n   */\n  async executeGenerationWithRetry(messages) {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {\n      try {\n        this.logger.debug(`Test generation attempt ${attempt}/${this.config.retryAttempts}`);\n        \n        const response = await this.openai.chat.completions.create({\n          model: this.config.model,\n          messages,\n          max_tokens: this.config.maxTokens,\n          temperature: this.config.temperature,\n          response_format: { type: 'json_object' }\n        });\n\n        if (!response.choices?.[0]?.message?.content) {\n          throw new Error('Empty response from AI service');\n        }\n\n        return response.choices[0].message.content;\n\n      } catch (error) {\n        lastError = error;\n        this.logger.warn(`Test generation attempt ${attempt} failed`, { error: error.message });\n        \n        if (attempt < this.config.retryAttempts) {\n          await this.delay(this.config.retryDelay * attempt);\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Process and validate generation response\n   */\n  async processGenerationResponse(response, testType) {\n    try {\n      const parsed = JSON.parse(response);\n      \n      // Validate response structure\n      this.validateGenerationResponse(parsed, testType);\n      \n      // Enhance the response\n      return this.enhanceGenerationResponse(parsed, testType);\n      \n    } catch (error) {\n      this.logger.error('Failed to process test generation response', { error: error.message });\n      throw new Error(`Invalid AI response format: ${error.message}`);\n    }\n  }\n\n  /**\n   * Validate generation response structure\n   */\n  validateGenerationResponse(response, testType) {\n    const requiredFields = {\n      unitTests: ['testSuite', 'testCases', 'coverage'],\n      integrationTests: ['integrationSuite', 'testScenarios'],\n      e2eTests: ['e2eSuite', 'userJourneys'],\n      performanceTests: ['performanceSuite', 'performanceTests'],\n      securityTests: ['securitySuite', 'securityTests']\n    };\n\n    const required = requiredFields[testType] || requiredFields.unitTests;\n    \n    for (const field of required) {\n      if (!response[field]) {\n        throw new Error(`Missing required field: ${field}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance generation response with additional data\n   */\n  enhanceGenerationResponse(response, testType) {\n    // Add unique IDs if missing\n    const testArrayField = this.getTestArrayField(testType);\n    if (response[testArrayField]) {\n      response[testArrayField] = response[testArrayField].map((test, index) => ({\n        id: test.id || `test_${Date.now()}_${index}`,\n        ...test\n      }));\n    }\n\n    // Add test statistics\n    response.statistics = this.calculateTestStatistics(response, testType);\n\n    // Add quality metrics\n    response.qualityMetrics = this.calculateQualityMetrics(response, testType);\n\n    return response;\n  }\n\n  /**\n   * Get test array field name based on test type\n   */\n  getTestArrayField(testType) {\n    const fieldMap = {\n      unitTests: 'testCases',\n      integrationTests: 'testScenarios',\n      e2eTests: 'userJourneys',\n      performanceTests: 'performanceTests',\n      securityTests: 'securityTests'\n    };\n\n    return fieldMap[testType] || 'testCases';\n  }\n\n  /**\n   * Calculate test statistics\n   */\n  calculateTestStatistics(response, testType) {\n    const testArrayField = this.getTestArrayField(testType);\n    const tests = response[testArrayField] || [];\n\n    const stats = {\n      total: tests.length,\n      byType: {},\n      bySeverity: {}\n    };\n\n    tests.forEach(test => {\n      if (test.type) {\n        stats.byType[test.type] = (stats.byType[test.type] || 0) + 1;\n      }\n      if (test.severity) {\n        stats.bySeverity[test.severity] = (stats.bySeverity[test.severity] || 0) + 1;\n      }\n    });\n\n    return stats;\n  }\n\n  /**\n   * Calculate quality metrics for generated tests\n   */\n  calculateQualityMetrics(response, testType) {\n    const testArrayField = this.getTestArrayField(testType);\n    const tests = response[testArrayField] || [];\n\n    const metrics = {\n      completeness: 0,\n      coverage: 0,\n      maintainability: 0,\n      reliability: 0\n    };\n\n    if (tests.length === 0) return metrics;\n\n    // Calculate completeness based on test variety\n    const testTypes = new Set(tests.map(t => t.type).filter(Boolean));\n    metrics.completeness = Math.min(100, (testTypes.size / 5) * 100);\n\n    // Extract coverage from response\n    if (response.coverage?.estimatedPercentage) {\n      metrics.coverage = response.coverage.estimatedPercentage;\n    }\n\n    // Calculate maintainability based on test structure\n    const hasDescriptions = tests.filter(t => t.description).length;\n    metrics.maintainability = Math.round((hasDescriptions / tests.length) * 100);\n\n    // Calculate reliability based on assertion quality\n    const hasAssertions = tests.filter(t => t.assertions?.length > 0).length;\n    metrics.reliability = Math.round((hasAssertions / tests.length) * 100);\n\n    return metrics;\n  }\n\n  /**\n   * Utility delay function\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate tests for multiple files\n   */\n  async generateBatch(files, options = {}) {\n    const results = [];\n    const batchStartTime = Date.now();\n\n    this.logger.info('Starting batch test generation', { fileCount: files.length });\n\n    for (const [index, file] of files.entries()) {\n      try {\n        this.logger.debug(`Processing file ${index + 1}/${files.length}`, { fileName: file.name });\n        \n        const result = await this.generate(file.content, {\n          ...options,\n          fileName: file.name\n        });\n        \n        results.push({\n          fileName: file.name,\n          ...result\n        });\n\n      } catch (error) {\n        this.logger.error(`Failed to generate tests for file: ${file.name}`, error);\n        results.push({\n          fileName: file.name,\n          error: error.message\n        });\n      }\n    }\n\n    const batchResult = {\n      results,\n      summary: {\n        totalFiles: files.length,\n        successfulGenerations: results.filter(r => !r.error).length,\n        failedGenerations: results.filter(r => r.error).length,\n        processingTime: Date.now() - batchStartTime\n      }\n    };\n\n    this.logger.info('Batch test generation completed', batchResult.summary);\n\n    return this.responseFormatter.success(batchResult, 'Batch test generation completed');\n  }\n\n  /**\n   * Get supported test frameworks for a language\n   */\n  getSupportedFrameworks(language = 'javascript') {\n    return this.testFrameworks[language.toLowerCase()] || this.testFrameworks.javascript;\n  }\n\n  /**\n   * Get framework configuration\n   */\n  getFrameworkConfig(language, framework) {\n    const frameworks = this.getSupportedFrameworks(language);\n    return frameworks[framework] || frameworks[Object.keys(frameworks)[0]];\n  }\n}\n\nmodule.exports = new TestGenerator();\n"],"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;QAC/B,MAAM,IAAIyC,KAAK,CAAC,iDAAiD,CAAC;MACpE,CAAC;MAAA;MAAA;QAAA5C,aAAA,GAAA2C,CAAA;MAAA;MAAA3C,aAAA,GAAAG,CAAA;MAED,IAAI,CAAC0C,MAAM,GAAG,IAAI3C,MAAM,CAAC;QACvB4C,MAAM,EAAEN,OAAO,CAACC,GAAG,CAACC;MACtB,CAAC,CAAC;MAAC;MAAA1C,aAAA,GAAAG,CAAA;MAEH,IAAI,CAACS,MAAM,CAACmC,IAAI,CAAC,+CAA+C,CAAC;IACnE,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAhD,aAAA,GAAAG,CAAA;MACd,IAAI,CAACS,MAAM,CAACoC,KAAK,CAAC,wDAAwD,EAAEA,KAAK,CAAC;MAAC;MAAAhD,aAAA,GAAAG,CAAA;MACnF,MAAMK,YAAY,CAACyC,WAAW,CAAC,oBAAoB,EAAE,oCAAoC,EAAE,GAAG,CAAC;IACjG;EACF;;EAEA;AACF;AACA;EACEhC,iBAAiBA,CAAA,EAAG;IAAA;IAAAjB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IAClB,OAAO;MACL+C,SAAS,EAAE;QACTC,MAAM,EAAE;AAChB,4EAA4E;QAEpEC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;MAEDC,gBAAgB,EAAE;QAChBF,MAAM,EAAE;AAChB,0DAA0D;QAElDC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;MAEDE,QAAQ,EAAE;QACRH,MAAM,EAAE;AAChB,oDAAoD;QAE5CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;MAEDG,gBAAgB,EAAE;QAChBJ,MAAM,EAAE;AAChB,4DAA4D;QAEpDC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC;MAEDI,aAAa,EAAE;QACbL,MAAM,EAAE;AAChB,6EAA6E;QAErEC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMK,QAAQA,CAACC,IAAI,EAAEC,OAAO;EAAA;EAAA,CAAA3D,aAAA,GAAA2C,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAA3C,aAAA,GAAAW,CAAA;IACjC,MAAMiD,QAAQ;IAAA;IAAA,CAAA5D,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA2C,CAAA,UAAAgB,OAAO,CAACE,IAAI;IAAA;IAAA,CAAA7D,aAAA,GAAA2C,CAAA,UAAI,WAAW;IAC5C,MAAMmB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","ignoreList":[]}