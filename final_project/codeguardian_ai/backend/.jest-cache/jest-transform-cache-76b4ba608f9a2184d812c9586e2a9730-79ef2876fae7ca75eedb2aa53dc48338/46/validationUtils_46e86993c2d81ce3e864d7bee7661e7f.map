{"version":3,"names":["cov_2rhd6a1jgi","actualCoverage","body","validationResult","s","require","crypto","ValidationUtils","fileUploadRules","f","custom","value","req","file","b","Error","allowedTypes","includes","mimetype","maxSize","size","handleValidationErrors","res","next","errors","isEmpty","status","json","success","message","array","map","error","field","param","msg","sanitizeFileContent","content","replace","substring","validateApiKey","apiKey","startsWith","length","validateFile","isValid","warnings","originalname","push","buffer","extension","supportedExtensions","lastIndexOf","toLowerCase","suspiciousPatterns","fileName","some","pattern","language","getFileLanguage","fileInfo","name","detectMaliciousContent","isSafe","threats","patterns","regex","type","description","forEach","matches","match","source","sanitizeContent","trim","validateCodeSyntax","code","Function","line","filename","languageMap","calculateFileHash","createHash","update","digest","validateCodeInput","module","exports"],"sources":["validationUtils.js"],"sourcesContent":["// Backend Utilities - Validation Helpers\nconst { body, validationResult } = require('express-validator');\nconst crypto = require('crypto');\n\nclass ValidationUtils {\n  // File validation rules\n  static fileUploadRules() {\n    return [\n      body('file').custom((value, { req }) => {\n        if (!req.file) {\n          throw new Error('File is required');\n        }\n        \n        const allowedTypes = [\n          'text/plain',\n          'application/javascript',\n          'text/javascript',\n          'application/typescript',\n          'text/x-python',\n          'text/x-java',\n          'text/x-c',\n          'text/x-cpp'\n        ];\n\n        if (!allowedTypes.includes(req.file.mimetype)) {\n          throw new Error('Invalid file type. Only code files are allowed.');\n        }\n\n        const maxSize = 5 * 1024 * 1024; // 5MB\n        if (req.file.size > maxSize) {\n          throw new Error('File size too large. Maximum 5MB allowed.');\n        }\n\n        return true;\n      })\n    ];\n  }\n\n  // Handle validation errors\n  static handleValidationErrors(req, res, next) {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        success: false,\n        message: 'Validation failed',\n        errors: errors.array().map(error => ({\n          field: error.param,\n          message: error.msg,\n          value: error.value\n        }))\n      });\n    }\n    next();\n  }\n\n  // Sanitize file content\n  static sanitizeFileContent(content) {\n    // Remove potential malicious content\n    return content\n      .replace(/[\\x00-\\x08\\x0B-\\x0C\\x0E-\\x1F\\x7F]/g, '') // Remove control characters\n      .substring(0, 100000); // Limit to 100KB of content\n  }\n\n  // Validate API keys\n  static validateApiKey(apiKey) {\n    if (!apiKey || typeof apiKey !== 'string') {\n      return false;\n    }\n    \n    // Basic OpenAI API key format validation\n    return apiKey.startsWith('sk-') && apiKey.length > 20;\n  }\n\n  // Validate file object\n  static validateFile(file) {\n    if (!file) {\n      return {\n        isValid: false,\n        errors: ['File object is required'],\n        warnings: []\n      };\n    }\n\n    const errors = [];\n    const warnings = [];\n\n    // Check required properties\n    if (!file.originalname) errors.push('File name is required');\n    if (!file.buffer && !file.content) errors.push('File content is required');\n    if (!file.mimetype && !file.extension) errors.push('File type is required');\n\n    // Check file size\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    const size = file.size || (file.buffer ? file.buffer.length : file.content?.length || 0);\n    if (size > maxSize) {\n      errors.push('File too large. Maximum size: 10MB');\n    }\n    if (size === 0) {\n      errors.push('File is empty');\n    }\n\n    // Check file type\n    const supportedExtensions = ['.js', '.ts', '.py', '.java', '.cpp', '.c', '.html', '.css'];\n    const extension = file.extension || (file.originalname ? file.originalname.substring(file.originalname.lastIndexOf('.')) : '');\n    \n    if (extension && !supportedExtensions.includes(extension.toLowerCase())) {\n      errors.push(`Unsupported file type: ${extension}`);\n    }\n\n    // Check for suspicious file names\n    const suspiciousPatterns = ['malware', 'virus', 'trojan', 'backdoor'];\n    const fileName = file.originalname || '';\n    if (suspiciousPatterns.some(pattern => fileName.toLowerCase().includes(pattern))) {\n      warnings.push('Suspicious file name detected');\n    }\n\n    // Determine language\n    const language = this.getFileLanguage(fileName);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      fileInfo: {\n        name: fileName,\n        size,\n        language,\n        extension\n      }\n    };\n  }\n\n  // Detect malicious content\n  static detectMaliciousContent(content) {\n    if (!content) {\n      return {\n        isSafe: true,\n        threats: []\n      };\n    }\n\n    const threats = [];\n\n    // Patterns to detect various threats\n    const patterns = [\n      { regex: /eval\\s*\\(/gi, type: 'code_injection', description: 'Potential eval() usage detected' },\n      { regex: /new\\s+Function\\s*\\(/gi, type: 'code_injection', description: 'Function constructor usage detected' },\n      { regex: /SELECT\\s+.*\\s+FROM\\s+.*WHERE.*[+]|UNION\\s+SELECT/gi, type: 'sql_injection', description: 'SQL injection pattern detected' },\n      { regex: /innerHTML\\s*=|document\\.write\\s*\\(/gi, type: 'xss', description: 'XSS vulnerability pattern detected' },\n      { regex: /\\.\\.\\/|\\.\\.\\\\|\\/etc\\/passwd|\\/proc\\//gi, type: 'path_traversal', description: 'Path traversal attempt detected' },\n      { regex: /exec\\s*\\(|system\\s*\\(|shell_exec\\s*\\(/gi, type: 'command_injection', description: 'Command injection pattern detected' }\n    ];\n\n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex);\n      if (matches) {\n        threats.push({\n          type: pattern.type,\n          description: pattern.description,\n          matches: matches.length,\n          pattern: pattern.regex.source\n        });\n      }\n    });\n\n    return {\n      isSafe: threats.length === 0,\n      threats\n    };\n  }\n\n  // Sanitize content\n  static sanitizeContent(content) {\n    if (!content) return '';\n\n    return content\n      // Remove null bytes and control characters\n      .replace(/\\x00/g, '')\n      .replace(/[\\x01-\\x08\\x0B-\\x0C\\x0E-\\x1F\\x7F]/g, '')\n      // Normalize line endings\n      .replace(/\\r\\n/g, '\\n')\n      .replace(/\\r/g, '\\n')\n      // Remove BOM\n      .replace(/^\\uFEFF/, '')\n      // Trim excessive whitespace while preserving structure\n      .trim();\n  }\n\n  // Validate code syntax\n  static validateCodeSyntax(code, language) {\n    const errors = [];\n\n    try {\n      if (language === 'javascript' || language === 'typescript') {\n        // Basic syntax check - try to parse as JavaScript\n        new Function(code);\n      }\n      // For other languages, we'd need specific parsers\n      // For now, just return basic validation\n    } catch (error) {\n      errors.push({\n        line: 1,\n        message: error.message,\n        type: 'SyntaxError'\n      });\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Get file language from extension\n  static getFileLanguage(filename) {\n    if (!filename) return 'unknown';\n\n    const extension = filename.substring(filename.lastIndexOf('.')).toLowerCase();\n    const languageMap = {\n      '.js': 'javascript',\n      '.ts': 'typescript',\n      '.py': 'python',\n      '.java': 'java',\n      '.cpp': 'cpp',\n      '.c': 'c',\n      '.html': 'html',\n      '.css': 'css'\n    };\n\n    return languageMap[extension] || 'unknown';\n  }\n\n  // Calculate file hash\n  static calculateFileHash(content) {\n    if (!content) content = '';\n    return crypto.createHash('sha256').update(content).digest('hex');\n  }\n\n  // Validate code input for scanning\n  static validateCodeInput(code) {\n    if (!code || typeof code !== 'string') {\n      return false;\n    }\n    \n    // Check for reasonable size limits\n    if (code.length > 1000000) { // 1MB limit\n      return false;\n    }\n    \n    return true;\n  }\n}\n\nmodule.exports = ValidationUtils;\n"],"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","ignoreList":[]}