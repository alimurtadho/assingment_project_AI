{"version":3,"names":["performance","require","fs","path","SecurityScanner","AIReviewer","TestGenerator","ValidationUtils","describe","scanner","reviewer","generator","beforeAll","mockOpenAIResponse","choices","message","content","JSON","stringify","review","overall_rating","strengths","issues","suggestions","openai","chat","completions","create","jest","fn","mockResolvedValue","test","smallCode","start","now","scanCode","end","duration","expect","toBeLessThan","mediumCode","result","toHaveProperty","codes","promises","map","code","index","Promise","all","testCode","times","i","push","mean","reduce","sum","time","length","variance","Math","pow","standardDeviation","sqrt","reviewCode","types","type","analyzeCode","generateTests","mockFile","originalname","mimetype","size","buffer","Buffer","from","validateFile","avgDuration","detectMaliciousContent","testContent","sanitizeContent","initialMemory","process","memoryUsage","heapUsed","global","gc","finalMemory","memoryIncrease","largeCode","repeat","Array","fill","_","results","toHaveLength","forEach","operations","benchmarks","smallFileScan","mediumFileScan","codeReview","testGeneration","fileValidation","batchOperations","console","log","createPerformanceReport","timestamp","Date","toISOString","nodeVersion","version","platform","cpuCount","cpus","totalMemory","totalmem","freeMemory","freemem","loadAverage","loadavg","module","exports"],"sources":["performance.test.js"],"sourcesContent":["/**\n * Performance Test Suite for CodeGuardian AI v2.0\n * Tests performance characteristics of refactored services\n */\n\nconst { performance } = require('perf_hooks');\nconst fs = require('fs');\nconst path = require('path');\n\n// Import refactored services\nconst SecurityScanner = require('../services/securityScanner.refactored');\nconst AIReviewer = require('../services/aiReviewer.refactored');\nconst TestGenerator = require('../services/testGenerator.refactored');\nconst ValidationUtils = require('../utils/validationUtils');\n\ndescribe('CodeGuardian AI Performance Tests', () => {\n    let scanner, reviewer, generator;\n\n    beforeAll(() => {\n        scanner = new SecurityScanner();\n        reviewer = new AIReviewer();\n        generator = new TestGenerator();\n\n        // Mock OpenAI for consistent testing\n        const mockOpenAIResponse = {\n            choices: [{\n                message: {\n                    content: JSON.stringify({\n                        review: {\n                            overall_rating: 8,\n                            strengths: ['Good structure'],\n                            issues: ['Minor improvements needed'],\n                            suggestions: ['Add comments']\n                        }\n                    })\n                }\n            }]\n        };\n\n        reviewer.openai = {\n            chat: {\n                completions: {\n                    create: jest.fn().mockResolvedValue(mockOpenAIResponse)\n                }\n            }\n        };\n\n        generator.openai = {\n            chat: {\n                completions: {\n                    create: jest.fn().mockResolvedValue({\n                        choices: [{\n                            message: {\n                                content: 'describe(\"test\", () => { it(\"should work\", () => {}); });'\n                            }\n                        }]\n                    })\n                }\n            }\n        };\n    });\n\n    describe('Security Scanner Performance', () => {\n        test('should scan small files quickly', async () => {\n            const smallCode = `\n                function hello() {\n                    console.log(\"Hello World\");\n                }\n            `;\n\n            const start = performance.now();\n            await scanner.scanCode(smallCode, 'small.js');\n            const end = performance.now();\n\n            const duration = end - start;\n            expect(duration).toBeLessThan(100); // Should complete in under 100ms\n        });\n\n        test('should handle medium files efficiently', async () => {\n            // Create a medium-sized code file (~1KB)\n            const mediumCode = `\n                class UserManager {\n                    constructor() {\n                        this.users = [];\n                        this.cache = new Map();\n                    }\n\n                    async createUser(userData) {\n                        const validation = this.validateUserData(userData);\n                        if (!validation.isValid) {\n                            throw new Error('Invalid user data');\n                        }\n\n                        const user = {\n                            id: this.generateId(),\n                            ...userData,\n                            createdAt: new Date(),\n                            updatedAt: new Date()\n                        };\n\n                        this.users.push(user);\n                        this.cache.set(user.id, user);\n                        return user;\n                    }\n\n                    async updateUser(id, updates) {\n                        const user = this.findUser(id);\n                        if (!user) {\n                            throw new Error('User not found');\n                        }\n\n                        Object.assign(user, updates, { updatedAt: new Date() });\n                        this.cache.set(id, user);\n                        return user;\n                    }\n\n                    findUser(id) {\n                        if (this.cache.has(id)) {\n                            return this.cache.get(id);\n                        }\n\n                        const user = this.users.find(u => u.id === id);\n                        if (user) {\n                            this.cache.set(id, user);\n                        }\n                        return user;\n                    }\n\n                    validateUserData(data) {\n                        const errors = [];\n                        \n                        if (!data.email || !this.isValidEmail(data.email)) {\n                            errors.push('Invalid email');\n                        }\n                        \n                        if (!data.name || data.name.length < 2) {\n                            errors.push('Name too short');\n                        }\n\n                        return {\n                            isValid: errors.length === 0,\n                            errors\n                        };\n                    }\n\n                    isValidEmail(email) {\n                        return /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(email);\n                    }\n\n                    generateId() {\n                        return Math.random().toString(36).substr(2, 9);\n                    }\n                }\n            `;\n\n            const start = performance.now();\n            const result = await scanner.scanCode(mediumCode, 'medium.js');\n            const end = performance.now();\n\n            const duration = end - start;\n            expect(duration).toBeLessThan(500); // Should complete in under 500ms\n            expect(result).toHaveProperty('vulnerabilities');\n        });\n\n        test('should handle batch scanning efficiently', async () => {\n            const codes = [\n                'console.log(\"test1\");',\n                'console.log(\"test2\");',\n                'console.log(\"test3\");',\n                'console.log(\"test4\");',\n                'console.log(\"test5\");'\n            ];\n\n            const start = performance.now();\n            const promises = codes.map((code, index) => \n                scanner.scanCode(code, `test${index}.js`)\n            );\n            await Promise.all(promises);\n            const end = performance.now();\n\n            const duration = end - start;\n            // Batch processing should be efficient\n            expect(duration).toBeLessThan(1000); // Should complete in under 1 second\n        });\n\n        test('should have consistent performance across similar files', async () => {\n            const testCode = `\n                function processData(data) {\n                    return data.map(item => item.value * 2);\n                }\n            `;\n\n            const times = [];\n            \n            // Run multiple iterations\n            for (let i = 0; i < 5; i++) {\n                const start = performance.now();\n                await scanner.scanCode(testCode, `test${i}.js`);\n                const end = performance.now();\n                times.push(end - start);\n            }\n\n            // Calculate variance\n            const mean = times.reduce((sum, time) => sum + time, 0) / times.length;\n            const variance = times.reduce((sum, time) => sum + Math.pow(time - mean, 2), 0) / times.length;\n            const standardDeviation = Math.sqrt(variance);\n\n            // Standard deviation should be relatively low (consistent performance)\n            expect(standardDeviation).toBeLessThan(mean * 0.5);\n        });\n    });\n\n    describe('AI Reviewer Performance', () => {\n        test('should review code within reasonable time', async () => {\n            const code = `\n                function fibonacci(n) {\n                    if (n <= 1) return n;\n                    return fibonacci(n - 1) + fibonacci(n - 2);\n                }\n            `;\n\n            const start = performance.now();\n            await reviewer.reviewCode(code, 'fib.js');\n            const end = performance.now();\n\n            const duration = end - start;\n            // AI review should complete quickly with mocked API\n            expect(duration).toBeLessThan(200);\n        });\n\n        test('should handle different analysis types efficiently', async () => {\n            const code = 'const x = 1; const y = 2;';\n            const types = ['security', 'performance', 'refactoring'];\n\n            const start = performance.now();\n            const promises = types.map(type => \n                reviewer.analyzeCode(code, 'test.js', type)\n            );\n            await Promise.all(promises);\n            const end = performance.now();\n\n            const duration = end - start;\n            expect(duration).toBeLessThan(300);\n        });\n    });\n\n    describe('Test Generator Performance', () => {\n        test('should generate tests efficiently', async () => {\n            const code = `\n                function calculator(a, b, operation) {\n                    switch(operation) {\n                        case 'add': return a + b;\n                        case 'subtract': return a - b;\n                        case 'multiply': return a * b;\n                        case 'divide': return a / b;\n                        default: throw new Error('Invalid operation');\n                    }\n                }\n            `;\n\n            const start = performance.now();\n            await generator.generateTests(code, 'calc.js', 'unit');\n            const end = performance.now();\n\n            const duration = end - start;\n            expect(duration).toBeLessThan(200);\n        });\n\n        test('should handle multiple test types concurrently', async () => {\n            const code = 'function add(a, b) { return a + b; }';\n            const types = ['unit', 'integration', 'e2e'];\n\n            const start = performance.now();\n            const promises = types.map(type => \n                generator.generateTests(code, 'test.js', type)\n            );\n            await Promise.all(promises);\n            const end = performance.now();\n\n            const duration = end - start;\n            expect(duration).toBeLessThan(400);\n        });\n    });\n\n    describe('Validation Utils Performance', () => {\n        test('should validate files quickly', () => {\n            const mockFile = {\n                originalname: 'test.js',\n                mimetype: 'text/javascript',\n                size: 1024,\n                buffer: Buffer.from('console.log(\"test\");')\n            };\n\n            const start = performance.now();\n            for (let i = 0; i < 100; i++) {\n                ValidationUtils.validateFile(mockFile);\n            }\n            const end = performance.now();\n\n            const duration = end - start;\n            const avgDuration = duration / 100;\n            expect(avgDuration).toBeLessThan(1); // Should validate in under 1ms on average\n        });\n\n        test('should detect malicious content efficiently', () => {\n            const testCode = `\n                function normalFunction() {\n                    console.log(\"This is normal code\");\n                    return true;\n                }\n            `;\n\n            const start = performance.now();\n            for (let i = 0; i < 50; i++) {\n                ValidationUtils.detectMaliciousContent(testCode);\n            }\n            const end = performance.now();\n\n            const duration = end - start;\n            const avgDuration = duration / 50;\n            expect(avgDuration).toBeLessThan(5); // Should analyze in under 5ms on average\n        });\n\n        test('should sanitize content efficiently', () => {\n            const testContent = 'const x = 1; \\\\x00\\\\x01 console.log(\"test\");';\n\n            const start = performance.now();\n            for (let i = 0; i < 100; i++) {\n                ValidationUtils.sanitizeContent(testContent);\n            }\n            const end = performance.now();\n\n            const duration = end - start;\n            const avgDuration = duration / 100;\n            expect(avgDuration).toBeLessThan(1); // Should sanitize in under 1ms on average\n        });\n    });\n\n    describe('Memory Usage', () => {\n        test('should not leak memory during repeated operations', async () => {\n            const initialMemory = process.memoryUsage().heapUsed;\n            \n            // Perform many operations\n            for (let i = 0; i < 20; i++) {\n                const code = `console.log(\"test ${i}\");`;\n                await scanner.scanCode(code, `test${i}.js`);\n                \n                // Force garbage collection if available\n                if (global.gc) {\n                    global.gc();\n                }\n            }\n\n            const finalMemory = process.memoryUsage().heapUsed;\n            const memoryIncrease = finalMemory - initialMemory;\n            \n            // Memory increase should be reasonable (less than 50MB)\n            expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);\n        });\n\n        test('should handle large code files without excessive memory usage', async () => {\n            // Create a large code string (100KB)\n            const largeCode = 'console.log(\"test\");\\\\n'.repeat(5000);\n            \n            const initialMemory = process.memoryUsage().heapUsed;\n            \n            await scanner.scanCode(largeCode, 'large.js');\n            \n            const finalMemory = process.memoryUsage().heapUsed;\n            const memoryIncrease = finalMemory - initialMemory;\n            \n            // Memory increase should be proportional to input size but not excessive\n            expect(memoryIncrease).toBeLessThan(largeCode.length * 10);\n        });\n    });\n\n    describe('Concurrent Operations', () => {\n        test('should handle concurrent security scans', async () => {\n            const codes = Array(10).fill().map((_, i) => \n                `function test${i}() { console.log(\"test ${i}\"); }`\n            );\n\n            const start = performance.now();\n            const promises = codes.map((code, i) => \n                scanner.scanCode(code, `concurrent${i}.js`)\n            );\n            const results = await Promise.all(promises);\n            const end = performance.now();\n\n            const duration = end - start;\n            \n            // Concurrent operations should complete reasonably quickly\n            expect(duration).toBeLessThan(2000);\n            expect(results).toHaveLength(10);\n            results.forEach(result => {\n                expect(result).toHaveProperty('vulnerabilities');\n            });\n        });\n\n        test('should handle mixed concurrent operations', async () => {\n            const code = 'function test() { return true; }';\n            \n            const start = performance.now();\n            const operations = [\n                scanner.scanCode(code, 'test1.js'),\n                reviewer.reviewCode(code, 'test2.js'),\n                generator.generateTests(code, 'test3.js', 'unit'),\n                scanner.scanCode(code, 'test4.js'),\n                reviewer.analyzeCode(code, 'test5.js', 'security')\n            ];\n            \n            const results = await Promise.all(operations);\n            const end = performance.now();\n\n            const duration = end - start;\n            \n            expect(duration).toBeLessThan(1000);\n            expect(results).toHaveLength(5);\n        });\n    });\n\n    describe('Performance Benchmarks', () => {\n        test('should meet baseline performance requirements', async () => {\n            const benchmarks = {\n                smallFileScan: 100, // ms\n                mediumFileScan: 500, // ms\n                codeReview: 200, // ms\n                testGeneration: 200, // ms\n                fileValidation: 10, // ms\n                batchOperations: 1000 // ms for 10 operations\n            };\n\n            // Small file scan\n            let start = performance.now();\n            await scanner.scanCode('console.log(\"test\");', 'small.js');\n            let duration = performance.now() - start;\n            expect(duration).toBeLessThan(benchmarks.smallFileScan);\n\n            // Medium file scan\n            const mediumCode = 'function test() { return true; }\\\\n'.repeat(50);\n            start = performance.now();\n            await scanner.scanCode(mediumCode, 'medium.js');\n            duration = performance.now() - start;\n            expect(duration).toBeLessThan(benchmarks.mediumFileScan);\n\n            // Code review\n            start = performance.now();\n            await reviewer.reviewCode('function test() {}', 'review.js');\n            duration = performance.now() - start;\n            expect(duration).toBeLessThan(benchmarks.codeReview);\n\n            // Test generation\n            start = performance.now();\n            await generator.generateTests('function add(a, b) { return a + b; }', 'test.js', 'unit');\n            duration = performance.now() - start;\n            expect(duration).toBeLessThan(benchmarks.testGeneration);\n\n            // File validation\n            const mockFile = {\n                originalname: 'test.js',\n                mimetype: 'text/javascript',\n                size: 100,\n                buffer: Buffer.from('test')\n            };\n            start = performance.now();\n            ValidationUtils.validateFile(mockFile);\n            duration = performance.now() - start;\n            expect(duration).toBeLessThan(benchmarks.fileValidation);\n\n            console.log('✅ All performance benchmarks passed');\n        });\n    });\n});\n\n// Utility function to create performance report\nfunction createPerformanceReport() {\n    return {\n        timestamp: new Date().toISOString(),\n        nodeVersion: process.version,\n        platform: process.platform,\n        cpuCount: require('os').cpus().length,\n        totalMemory: require('os').totalmem(),\n        freeMemory: require('os').freemem(),\n        loadAverage: require('os').loadavg()\n    };\n}\n\nmodule.exports = {\n    createPerformanceReport\n};\n"],"mappings":"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","ignoreList":[]}