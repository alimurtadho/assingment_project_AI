36c15b433ed70533fef4c44780e59e8b
/* istanbul ignore next */
"use strict";

function cov_it201g5we() {
  var path = "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/security.js";
  var hash = "54f530182121fbccf366627db8e821515252ccac";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/aldho/poc_aldho/assingment_project_AI/final_project/codeguardian_ai/backend/routes/security.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 2,
          column: 32
        }
      },
      "2": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 3,
          column: 66
        }
      },
      "3": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "4": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "7": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "8": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 98
        }
      },
      "9": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 19,
          column: 97
        }
      },
      "10": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "11": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 21
        }
      },
      "12": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 71
        }
      },
      "13": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "14": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "15": {
        start: {
          line: 32,
          column: 37
        },
        end: {
          line: 32,
          column: 45
        }
      },
      "16": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 48
        }
      },
      "17": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 53
        }
      },
      "18": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 81
        }
      },
      "19": {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "20": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 64,
          column: 7
        }
      },
      "21": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 74,
          column: 7
        }
      },
      "22": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 49
        }
      },
      "23": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 81,
          column: 7
        }
      },
      "24": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 113,
          column: 3
        }
      },
      "25": {
        start: {
          line: 87,
          column: 2
        },
        end: {
          line: 112,
          column: 3
        }
      },
      "26": {
        start: {
          line: 88,
          column: 19
        },
        end: {
          line: 88,
          column: 29
        }
      },
      "27": {
        start: {
          line: 90,
          column: 19
        },
        end: {
          line: 101,
          column: 6
        }
      },
      "28": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "29": {
        start: {
          line: 104,
          column: 6
        },
        end: {
          line: 104,
          column: 70
        }
      },
      "30": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 21
        }
      },
      "31": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 51
        }
      },
      "32": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 111,
          column: 51
        }
      },
      "33": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 154,
          column: 3
        }
      },
      "34": {
        start: {
          line: 117,
          column: 2
        },
        end: {
          line: 153,
          column: 3
        }
      },
      "35": {
        start: {
          line: 118,
          column: 43
        },
        end: {
          line: 118,
          column: 52
        }
      },
      "36": {
        start: {
          line: 119,
          column: 17
        },
        end: {
          line: 119,
          column: 35
        }
      },
      "37": {
        start: {
          line: 121,
          column: 18
        },
        end: {
          line: 121,
          column: 48
        }
      },
      "38": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 136,
          column: 6
        }
      },
      "39": {
        start: {
          line: 138,
          column: 18
        },
        end: {
          line: 138,
          column: 58
        }
      },
      "40": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 148,
          column: 7
        }
      },
      "41": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 52
        }
      },
      "42": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 152,
          column: 51
        }
      },
      "43": {
        start: {
          line: 156,
          column: 0
        },
        end: {
          line: 156,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 14
          },
          end: {
            line: 16,
            column: 15
          }
        },
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 26,
            column: 3
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 64
          },
          end: {
            line: 30,
            column: 65
          }
        },
        loc: {
          start: {
            line: 30,
            column: 84
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 86,
            column: 24
          },
          end: {
            line: 86,
            column: 25
          }
        },
        loc: {
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 86
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 116,
            column: 21
          },
          end: {
            line: 116,
            column: 22
          }
        },
        loc: {
          start: {
            line: 116,
            column: 41
          },
          end: {
            line: 154,
            column: 1
          }
        },
        line: 116
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "2": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 20
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 118,
            column: 19
          },
          end: {
            line: 118,
            column: 20
          }
        }],
        line: 118
      },
      "3": {
        loc: {
          start: {
            line: 118,
            column: 22
          },
          end: {
            line: 118,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 118,
            column: 32
          }
        }],
        line: 118
      },
      "4": {
        loc: {
          start: {
            line: 121,
            column: 18
          },
          end: {
            line: 121,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 121,
            column: 43
          }
        }, {
          start: {
            line: 121,
            column: 46
          },
          end: {
            line: 121,
            column: 48
          }
        }],
        line: 121
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "54f530182121fbccf366627db8e821515252ccac"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_it201g5we = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_it201g5we();
const express =
/* istanbul ignore next */
(cov_it201g5we().s[0]++, require('express'));
const multer =
/* istanbul ignore next */
(cov_it201g5we().s[1]++, require('multer'));
const {
  validateFileUpload
} =
/* istanbul ignore next */
(cov_it201g5we().s[2]++, require('../middleware/validation'));
const securityScanner =
/* istanbul ignore next */
(cov_it201g5we().s[3]++, require('../services/securityScanner'));
const {
  PrismaClient
} =
/* istanbul ignore next */
(cov_it201g5we().s[4]++, require('@prisma/client'));
const router =
/* istanbul ignore next */
(cov_it201g5we().s[5]++, express.Router());
const prisma =
/* istanbul ignore next */
(cov_it201g5we().s[6]++, new PrismaClient());

// Configure multer for file uploads
const upload =
/* istanbul ignore next */
(cov_it201g5we().s[7]++, multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    /* istanbul ignore next */
    cov_it201g5we().f[0]++;
    // Allow common code file types
    const allowedTypes =
    /* istanbul ignore next */
    (cov_it201g5we().s[8]++, ['.js', '.ts', '.py', '.java', '.cpp', '.c', '.php', '.rb', '.go', '.rs']);
    const fileExt =
    /* istanbul ignore next */
    (cov_it201g5we().s[9]++, file.originalname.toLowerCase().substring(file.originalname.lastIndexOf('.')));
    /* istanbul ignore next */
    cov_it201g5we().s[10]++;
    if (allowedTypes.includes(fileExt)) {
      /* istanbul ignore next */
      cov_it201g5we().b[0][0]++;
      cov_it201g5we().s[11]++;
      cb(null, true);
    } else {
      /* istanbul ignore next */
      cov_it201g5we().b[0][1]++;
      cov_it201g5we().s[12]++;
      cb(new Error('Invalid file type. Only code files are allowed.'));
    }
  }
}));

// Security scan endpoint
/* istanbul ignore next */
cov_it201g5we().s[13]++;
router.post('/scan', upload.single('file'), validateFileUpload, async (req, res) => {
  /* istanbul ignore next */
  cov_it201g5we().f[1]++;
  cov_it201g5we().s[14]++;
  try {
    const {
      buffer,
      originalname
    } =
    /* istanbul ignore next */
    (cov_it201g5we().s[15]++, req.file);
    const fileContent =
    /* istanbul ignore next */
    (cov_it201g5we().s[16]++, buffer.toString('utf-8'));
    /* istanbul ignore next */
    cov_it201g5we().s[17]++;
    console.log(`📁 Scanning file: ${originalname}`);

    // Perform security scan
    const scanResults =
    /* istanbul ignore next */
    (cov_it201g5we().s[18]++, await securityScanner.scanCode(fileContent, originalname));

    // Save to database
    const result =
    /* istanbul ignore next */
    (cov_it201g5we().s[19]++, await prisma.scanResult.create({
      data: {
        filename: originalname,
        fileContent: fileContent,
        scanType: 'security',
        vulnerabilities: scanResults.vulnerabilities,
        riskScore: scanResults.riskScore,
        status: 'completed'
      }
    }));

    // Log the action
    /* istanbul ignore next */
    cov_it201g5we().s[20]++;
    await prisma.auditLog.create({
      data: {
        action: 'security_scan',
        details: {
          filename: originalname,
          vulnerabilityCount: scanResults.vulnerabilities.length,
          riskScore: scanResults.riskScore
        },
        ipAddress: req.ip,
        userAgent: req.get('User-Agent')
      }
    });
    /* istanbul ignore next */
    cov_it201g5we().s[21]++;
    res.json({
      success: true,
      scanId: result.id,
      filename: originalname,
      riskScore: scanResults.riskScore,
      vulnerabilities: scanResults.vulnerabilities,
      summary: scanResults.summary,
      recommendations: scanResults.recommendations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_it201g5we().s[22]++;
    console.error('Security scan error:', error);
    /* istanbul ignore next */
    cov_it201g5we().s[23]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Get scan results
/* istanbul ignore next */
cov_it201g5we().s[24]++;
router.get('/scan/:id', async (req, res) => {
  /* istanbul ignore next */
  cov_it201g5we().f[2]++;
  cov_it201g5we().s[25]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_it201g5we().s[26]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_it201g5we().s[27]++, await prisma.scanResult.findUnique({
      where: {
        id
      },
      select: {
        id: true,
        filename: true,
        scanType: true,
        vulnerabilities: true,
        riskScore: true,
        status: true,
        createdAt: true
      }
    }));
    /* istanbul ignore next */
    cov_it201g5we().s[28]++;
    if (!result) {
      /* istanbul ignore next */
      cov_it201g5we().b[1][0]++;
      cov_it201g5we().s[29]++;
      return res.status(404).json({
        error: 'Scan result not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_it201g5we().b[1][1]++;
    }
    cov_it201g5we().s[30]++;
    res.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_it201g5we().s[31]++;
    console.error('Get scan result error:', error);
    /* istanbul ignore next */
    cov_it201g5we().s[32]++;
    res.status(500).json({
      error: error.message
    });
  }
});

// Get all scan results
/* istanbul ignore next */
cov_it201g5we().s[33]++;
router.get('/scans', async (req, res) => {
  /* istanbul ignore next */
  cov_it201g5we().f[3]++;
  cov_it201g5we().s[34]++;
  try {
    const {
      page =
      /* istanbul ignore next */
      (cov_it201g5we().b[2][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_it201g5we().b[3][0]++, 10),
      type
    } =
    /* istanbul ignore next */
    (cov_it201g5we().s[35]++, req.query);
    const skip =
    /* istanbul ignore next */
    (cov_it201g5we().s[36]++, (page - 1) * limit);
    const where =
    /* istanbul ignore next */
    (cov_it201g5we().s[37]++, type ?
    /* istanbul ignore next */
    (cov_it201g5we().b[4][0]++, {
      scanType: type
    }) :
    /* istanbul ignore next */
    (cov_it201g5we().b[4][1]++, {}));
    const results =
    /* istanbul ignore next */
    (cov_it201g5we().s[38]++, await prisma.scanResult.findMany({
      where,
      select: {
        id: true,
        filename: true,
        scanType: true,
        riskScore: true,
        status: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      },
      skip: parseInt(skip),
      take: parseInt(limit)
    }));
    const total =
    /* istanbul ignore next */
    (cov_it201g5we().s[39]++, await prisma.scanResult.count({
      where
    }));
    /* istanbul ignore next */
    cov_it201g5we().s[40]++;
    res.json({
      results,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_it201g5we().s[41]++;
    console.error('Get scan results error:', error);
    /* istanbul ignore next */
    cov_it201g5we().s[42]++;
    res.status(500).json({
      error: error.message
    });
  }
});
/* istanbul ignore next */
cov_it201g5we().s[43]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,