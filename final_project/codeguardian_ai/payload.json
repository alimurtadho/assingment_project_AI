{
  "code": "// Demo file 1: Security vulnerabilities\n// This file contains intentional security issues for demonstration\n\nconst API_KEY = \"sk-1234567890abcdef\"; // Hardcoded secret\nconst DB_PASSWORD = \"admin123\"; // Hardcoded password\n\ninterface User {\n  id: number;\n  email: string;\n}\n\nfunction getUserById(userId: string): User | null {\n  // SQL injection vulnerability\n  const query = `SELECT * FROM users WHERE id = ${userId}`;\n  return executeQuery(query);\n}\n\n// XSS vulnerability\nfunction renderUserProfile(userInput: string): string {\n  return `<div>Welcome ${userInput}</div>`; // No sanitization\n}\n\n// Weak cryptography\nconst crypto = require('crypto');\nfunction hashPassword(password: string): string {\n  return crypto.createHash('md5').update(password).digest('hex'); // MD5 is weak\n}\n\n// More security issues\nconst SECRET_KEY = \"mysecretkey123\"; // Another hardcoded secret\nconst connection = `mongodb://admin:password123@localhost:27017/mydb`; // Hardcoded credentials\n\nfunction dynamicQuery(table: string, condition: string) {\n  // Another SQL injection\n  return `SELECT * FROM ${table} WHERE ${condition}`;\n}\n\n// Insecure random\nfunction generateToken(): string {\n  return Math.random().toString(36); // Not cryptographically secure\n}\n\nexport { getUserById, renderUserProfile, hashPassword, generateToken };\n",
  "language": "typescript"
}