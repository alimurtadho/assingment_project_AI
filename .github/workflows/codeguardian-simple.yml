# CodeGuardian AI - CI Workflow
# Simple workflow with lint and test jobs
name: CodeGuardian AI CI

# Trigger on push to main branch
on:
  push:
    branches: [ main ]
    paths:
      - 'final_project/codeguardian_ai/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'final_project/codeguardian_ai/**'

# Global environment variables
env:
  NODE_VERSION: '18'
  WORKING_DIR: './final_project/codeguardian_ai'

jobs:
  # Job 1: Linting
  lint:
    name: 🔍 Code Linting
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'
      
      - name: 📦 Install root dependencies
        run: npm ci
      
      - name: 📦 Install backend dependencies
        run: |
          if [ -f backend/package.json ]; then
            cd backend && npm ci
          fi
      
      - name: 📦 Install frontend dependencies
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && npm ci
          fi
      
      - name: 🔍 Lint backend
        run: |
          if [ -f backend/package.json ]; then
            cd backend
            if npm run lint --silent 2>/dev/null; then
              npm run lint
            else
              echo "No lint script found, running ESLint directly"
              npx eslint . --ext .js,.ts --max-warnings 0
            fi
          fi
      
      - name: 🔍 Lint frontend
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            if npm run lint --silent 2>/dev/null; then
              npm run lint
            else
              echo "No lint script found, running ESLint directly"
              npx eslint src --ext .js,.jsx,.ts,.tsx --max-warnings 0
            fi
          fi
      
      - name: ✅ Linting completed
        run: echo "✅ Code linting passed successfully!"

  # Job 2: Testing (runs after lint succeeds)
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: lint  # This ensures test runs only after lint job succeeds
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    # PostgreSQL service for backend tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: codeguardian_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      # Test environment
      NODE_ENV: test
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/codeguardian_test
      JWT_SECRET: test_jwt_secret
      OPENAI_API_KEY: test_key
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'
      
      - name: 📦 Install root dependencies
        run: npm ci
      
      - name: 📦 Install backend dependencies
        run: |
          if [ -f backend/package.json ]; then
            cd backend && npm ci
          fi
      
      - name: 📦 Install frontend dependencies
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend && npm ci
          fi
      
      - name: 🗄️ Setup database
        run: |
          if [ -f backend/prisma/schema.prisma ]; then
            cd backend
            npx prisma generate
            npx prisma db push --force-reset
          fi
      
      - name: 🧪 Run backend tests
        run: |
          if [ -f backend/package.json ]; then
            cd backend
            if npm run test --silent 2>/dev/null; then
              npm test
            else
              echo "No test script found, running Jest directly"
              npx jest --passWithNoTests
            fi
          fi
      
      - name: 🧪 Run frontend tests
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            if npm run test --silent 2>/dev/null; then
              CI=true npm test -- --coverage --watchAll=false
            else
              echo "No test script found, running React scripts test"
              CI=true npx react-scripts test --coverage --watchAll=false --passWithNoTests
            fi
          fi
      
      - name: 🔍 API health check
        run: |
          if [ -f backend/server.simple.js ]; then
            cd backend
            node server.simple.js &
            SERVER_PID=$!
            sleep 10
            
            if curl -f http://localhost:8000/health; then
              echo "✅ API health check passed"
            else
              echo "❌ API health check failed"
            fi
            
            kill $SERVER_PID 2>/dev/null || true
          fi
        continue-on-error: true
      
      - name: ✅ Testing completed
        run: echo "✅ All tests passed successfully!"

# Summary
  summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    
    steps:
      - name: 📋 Display results
        run: |
          echo "📋 Workflow Execution Summary"
          echo "============================="
          echo "🔍 Lint Job: ${{ needs.lint.result }}"
          echo "🧪 Test Job: ${{ needs.test.result }}"
          echo ""
          if [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
            echo "🎉 All jobs completed successfully!"
            exit 0
          else
            echo "❌ Some jobs failed. Please check the logs above."
            exit 1
          fi
